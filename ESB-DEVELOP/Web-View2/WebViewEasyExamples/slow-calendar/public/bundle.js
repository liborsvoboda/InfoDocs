(()=>{"use strict";function e(e,n,...s){if(!e)throw new TypeError(t(n,s))}function t(e,t){let s=0;return e.replace(/%[os]/gu,(()=>n(t[s++])))}function n(e){return"object"!=typeof e||null===e?String(e):Object.prototype.toString.call(e)}const s="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:void 0;let i;class a{constructor(e,t){this.code=e,this.message=t}warn(...e){var t;try{i;const n=(null!==(t=(new Error).stack)&&void 0!==t?t:"").replace(/^(?:.+?\n){2}/gu,"\n");console.warn(this.message,...e,n)}catch(e){}}}const o=new a("W01","Unable to initialize event under dispatching."),r=new a("W02","Assigning any falsy value to 'cancelBubble' property has no effect."),l=new a("W03","Assigning any truthy value to 'returnValue' property has no effect."),d=new a("W04","Unable to preventDefault on non-cancelable events."),c=new a("W05","Unable to preventDefault inside passive event listener invocation."),h=new a("W06","An event listener wasn't added because it has been added already: %o, %o"),u=new a("W07","The %o option value was abandoned because the event listener wasn't added as duplicated."),p=new a("W08","The 'callback' argument must be a function or an object that has 'handleEvent' method: %o");new a("W09","Event attribute handler must be a function: %o");class g{static get NONE(){return v}static get CAPTURING_PHASE(){return m}static get AT_TARGET(){return E}static get BUBBLING_PHASE(){return y}constructor(e,t){Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const n=null!=t?t:{};f.set(this,{type:String(e),bubbles:Boolean(n.bubbles),cancelable:Boolean(n.cancelable),composed:Boolean(n.composed),target:null,currentTarget:null,stopPropagationFlag:!1,stopImmediatePropagationFlag:!1,canceledFlag:!1,inPassiveListenerFlag:!1,dispatchFlag:!1,timeStamp:Date.now()})}get type(){return w(this).type}get target(){return w(this).target}get srcElement(){return w(this).target}get currentTarget(){return w(this).currentTarget}composedPath(){const e=w(this).currentTarget;return e?[e]:[]}get NONE(){return v}get CAPTURING_PHASE(){return m}get AT_TARGET(){return E}get BUBBLING_PHASE(){return y}get eventPhase(){return w(this).dispatchFlag?2:0}stopPropagation(){w(this).stopPropagationFlag=!0}get cancelBubble(){return w(this).stopPropagationFlag}set cancelBubble(e){e?w(this).stopPropagationFlag=!0:r.warn()}stopImmediatePropagation(){const e=w(this);e.stopPropagationFlag=e.stopImmediatePropagationFlag=!0}get bubbles(){return w(this).bubbles}get cancelable(){return w(this).cancelable}get returnValue(){return!w(this).canceledFlag}set returnValue(e){e?l.warn():b(w(this))}preventDefault(){b(w(this))}get defaultPrevented(){return w(this).canceledFlag}get composed(){return w(this).composed}get isTrusted(){return!1}get timeStamp(){return w(this).timeStamp}initEvent(e,t=!1,n=!1){const s=w(this);s.dispatchFlag?o.warn():f.set(this,{...s,type:String(e),bubbles:Boolean(t),cancelable:Boolean(n),target:null,currentTarget:null,stopPropagationFlag:!1,stopImmediatePropagationFlag:!1,canceledFlag:!1})}}const v=0,m=1,E=2,y=3,f=new WeakMap;function w(t,n="this"){const s=f.get(t);return e(null!=s,"'%s' must be an object that Event constructor created, but got another one: %o",n,t),s}function b(e){e.inPassiveListenerFlag?c.warn():e.cancelable?e.canceledFlag=!0:d.warn()}Object.defineProperty(g,"NONE",{enumerable:!0}),Object.defineProperty(g,"CAPTURING_PHASE",{enumerable:!0}),Object.defineProperty(g,"AT_TARGET",{enumerable:!0}),Object.defineProperty(g,"BUBBLING_PHASE",{enumerable:!0});const D=Object.getOwnPropertyNames(g.prototype);for(let e=0;e<D.length;++e)"constructor"!==D[e]&&Object.defineProperty(g.prototype,D[e],{enumerable:!0});let _;void 0!==s&&void 0!==s.Event&&Object.setPrototypeOf(g.prototype,s.Event.prototype);const T={INDEX_SIZE_ERR:1,DOMSTRING_SIZE_ERR:2,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,INVALID_CHARACTER_ERR:5,NO_DATA_ALLOWED_ERR:6,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INUSE_ATTRIBUTE_ERR:10,INVALID_STATE_ERR:11,SYNTAX_ERR:12,INVALID_MODIFICATION_ERR:13,NAMESPACE_ERR:14,INVALID_ACCESS_ERR:15,VALIDATION_ERR:16,TYPE_MISMATCH_ERR:17,SECURITY_ERR:18,NETWORK_ERR:19,ABORT_ERR:20,URL_MISMATCH_ERR:21,QUOTA_EXCEEDED_ERR:22,TIMEOUT_ERR:23,INVALID_NODE_TYPE_ERR:24,DATA_CLONE_ERR:25};function M(e){const t=Object.keys(T);for(let n=0;n<t.length;++n){const s=t[n],i=T[s];Object.defineProperty(e,s,{get:()=>i,configurable:!0,enumerable:!0})}}class k extends g{static wrap(e){return new(R(e))(e)}constructor(e){super(e.type,{bubbles:e.bubbles,cancelable:e.cancelable,composed:e.composed}),e.cancelBubble&&super.stopPropagation(),e.defaultPrevented&&super.preventDefault(),L.set(this,{original:e});const t=Object.keys(e);for(let n=0;n<t.length;++n){const s=t[n];s in this||Object.defineProperty(this,s,$(e,s))}}stopPropagation(){super.stopPropagation();const{original:e}=P(this);"stopPropagation"in e&&e.stopPropagation()}get cancelBubble(){return super.cancelBubble}set cancelBubble(e){super.cancelBubble=e;const{original:t}=P(this);"cancelBubble"in t&&(t.cancelBubble=e)}stopImmediatePropagation(){super.stopImmediatePropagation();const{original:e}=P(this);"stopImmediatePropagation"in e&&e.stopImmediatePropagation()}get returnValue(){return super.returnValue}set returnValue(e){super.returnValue=e;const{original:t}=P(this);"returnValue"in t&&(t.returnValue=e)}preventDefault(){super.preventDefault();const{original:e}=P(this);"preventDefault"in e&&e.preventDefault()}get timeStamp(){const{original:e}=P(this);return"timeStamp"in e?e.timeStamp:super.timeStamp}}const L=new WeakMap;function P(t){const n=L.get(t);return e(null!=n,"'this' is expected an Event object, but got",t),n}const S=new WeakMap;function R(e){const t=Object.getPrototypeOf(e);if(null==t)return k;let n=S.get(t);return null==n&&(n=function(e,t){class n extends e{}const s=Object.keys(t);for(let e=0;e<s.length;++e)Object.defineProperty(n.prototype,s[e],$(t,s[e]));return n}(R(t),t),S.set(t,n)),n}function $(e,t){const n=Object.getOwnPropertyDescriptor(e,t);return{get(){const e=P(this).original,n=e[t];return"function"==typeof n?n.bind(e):n},set(e){P(this).original[t]=e},configurable:n.configurable,enumerable:n.enumerable}}function O(e){return 1==(1&e.flags)}function F(e){return 2==(2&e.flags)}function I(e){return 4==(4&e.flags)}function A(e){return 8==(8&e.flags)}function N({callback:e},t,s){try{"function"==typeof e?e.call(t,s):"function"==typeof e.handleEvent&&e.handleEvent(s)}catch(e){!function(e){try{const t=e instanceof Error?e:new Error(n(e));if("function"==typeof dispatchEvent&&"function"==typeof ErrorEvent)dispatchEvent(new ErrorEvent("error",{error:t,message:t.message}));else if("undefined"!=typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",t);console.error(t)}catch(e){}}(e)}}function j({listeners:e},t,n){for(let s=0;s<e.length;++s)if(e[s].callback===t&&O(e[s])===n)return s;return-1}function C(e,t,n){const s=j(e,t,n);return-1!==s&&x(e,s)}function x(e,t,n=!1){const s=e.listeners[t];return function(e){e.flags|=8}(s),s.signal&&s.signal.removeEventListener("abort",s.signalListener),e.cow&&!n?(e.cow=!1,e.listeners=e.listeners.filter(((e,n)=>n!==t)),!1):(e.listeners.splice(t,1),!0)}S.set(Object.prototype,k),void 0!==s&&void 0!==s.Event&&S.set(s.Event.prototype,k);class H{constructor(){B.set(this,Object.create(null))}addEventListener(e,t,n){const s=G(this),{callback:i,capture:a,once:o,passive:r,signal:l,type:d}=function(e,t,n){var s;return W(t),"object"==typeof n&&null!==n?{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n.capture),passive:Boolean(n.passive),once:Boolean(n.once),signal:null!==(s=n.signal)&&void 0!==s?s:void 0}:{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n),passive:!1,once:!1,signal:void 0}}(e,t,n);if(null==i||(null==l?void 0:l.aborted))return;const c=function(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e[t]={attrCallback:void 0,attrListener:void 0,cow:!1,listeners:[]}}(s,d),p=j(c,i,a);-1===p?function(e,t,n,s,i,a){let o;a&&(o=C.bind(null,e,t,n),a.addEventListener("abort",o));const r=function(e,t,n,s,i,a){return{callback:e,flags:(t?1:0)|(n?2:0)|(s?4:0),signal:i,signalListener:a}}(t,n,s,i,a,o);e.cow?(e.cow=!1,e.listeners=[...e.listeners,r]):e.listeners.push(r)}(c,i,a,r,o,l):function(e,t,n,s){h.warn(O(e)?"capture":"bubble",e.callback),F(e)!==t&&u.warn("passive"),I(e)!==n&&u.warn("once"),e.signal!==s&&u.warn("signal")}(c.listeners[p],r,o,l)}removeEventListener(e,t,n){const s=G(this),{callback:i,capture:a,type:o}=function(e,t,n){return W(t),"object"==typeof n&&null!==n?{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n.capture)}:{type:String(e),callback:null!=t?t:void 0,capture:Boolean(n)}}(e,t,n),r=s[o];null!=i&&r&&C(r,i,a)}dispatchEvent(e){const t=G(this)[String(e.type)];if(null==t)return!0;const n=e instanceof g?e:k.wrap(e),i=w(n,"event");if(i.dispatchFlag)throw a="This event has been in dispatching.",s.DOMException?new s.DOMException(a,"InvalidStateError"):(null==_&&(_=class e extends Error{constructor(t){super(t),Error.captureStackTrace&&Error.captureStackTrace(this,e)}get code(){return 11}get name(){return"InvalidStateError"}},Object.defineProperties(_.prototype,{code:{enumerable:!0},name:{enumerable:!0}}),M(_),M(_.prototype)),new _(a));var a;if(i.dispatchFlag=!0,i.target=i.currentTarget=this,!i.stopPropagationFlag){const{cow:e,listeners:s}=t;t.cow=!0;for(let a=0;a<s.length;++a){const o=s[a];if(!A(o)&&(I(o)&&x(t,a,!e)&&(a-=1),i.inPassiveListenerFlag=F(o),N(o,this,n),i.inPassiveListenerFlag=!1,i.stopImmediatePropagationFlag))break}e||(t.cow=!1)}return i.target=null,i.currentTarget=null,i.stopImmediatePropagationFlag=!1,i.stopPropagationFlag=!1,i.dispatchFlag=!1,!i.canceledFlag}}const B=new WeakMap;function G(t,n="this"){const s=B.get(t);return e(null!=s,"'%s' must be an object that EventTarget constructor created, but got another one: %o",n,t),s}function W(e){if("function"!=typeof e&&("object"!=typeof e||null===e||"function"!=typeof e.handleEvent)){if(null!=e&&"object"!=typeof e)throw new TypeError(t(p.message,[e]));p.warn(e)}}const Y=Object.getOwnPropertyNames(H.prototype);for(let e=0;e<Y.length;++e)"constructor"!==Y[e]&&Object.defineProperty(H.prototype,Y[e],{enumerable:!0});void 0!==s&&void 0!==s.EventTarget&&Object.setPrototypeOf(H.prototype,s.EventTarget.prototype);const U=["January","February","March","April","May","June","July","August","September","October","November","December"];function V(e,t){return e.filter((e=>e.date.getFullYear()===t.getFullYear()&&e.date.getMonth()===t.getMonth()&&e.date.getDate()===t.getDate())).sort(((e,t)=>!e.time&&t.time?-1:e.time&&!t.time?1:e.time||t.time?parseInt(e.time.replace(/^0/,"").replace(":",""))-parseInt(t.time.replace(/^0/,"").replace(":","")):0)).sort(((e,t)=>e.multiDays&&!t.multiDays?-1:!e.multiDays&&t.multiDays?1:void 0))}function q(e){const t=e.getMonth(),n=e.getFullYear();return`${U[t]} ${n}`}function J(){return!!navigator.userAgentData&&navigator.userAgentData.brands.some((e=>e.brand.toLowerCase().includes("side panel")))}const X=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];class z extends H{constructor(e,t,n){super(),this.el=e,this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){this.rootEl.innerHTML="";const e=this._date.getMonth(),t=this._date.getFullYear(),n=new Date(t,e,1),s=new Date(t,e+1,0),i=n.getDay(),a=s.getDay(),o=s.getDate(),r=new Date(t,e,0).getDate(),l=[];let d=0;for(let n=r-i+1;n<=r;n++){const s=new Date(t,e-1,n);l.push({date:s,html:this.renderDay(s,n,d,"prev-month")}),d++}for(let n=1;n<=o;n++){const s=new Date(t,e,n);l.push({date:s,html:this.renderDay(s,n,d)}),d++}for(let n=1;n<=7-a-1;n++){const s=new Date(t,e+1,n);l.push({date:s,html:this.renderDay(s,n,d,"next-month")}),d++}for(const{date:e,html:t}of l)this.rootEl.insertAdjacentHTML("beforeend",t),this.rootEl.lastElementChild.addEventListener("click",(t=>{this.dispatchEvent(new CustomEvent("day-clicked",{detail:e}))}));this.updateNowMarker()}renderDay(e,t,n,s=""){const i=V(this._events,e);return`\n      <div class="day ${e.toDateString()===(new Date).toDateString()?"today":""} ${s}">\n        <div class="header">\n          <span class="day-name">${X[e.getDay()]}</span>\n          <span class="day-number">${t}</span>\n        </div>\n        <ul class="events">\n          ${i.map((e=>e.asOneLineHTML(n))).join("")}\n        </ul>\n      </div>\n    `}updateNowMarker(){const e=new Date,t=100*(100*e.getHours()+e.getMinutes())/2400,n=this.rootEl.querySelector(".day.today");if(n){const e=n.offsetHeight*t/100;this.rootEl.style.setProperty("--now-marker",`${e}px`)}setTimeout((()=>this.updateNowMarker()),1e3)}set date(e){this._date=e,this.render()}set events(e){this._events=e,this.render()}}class Q extends H{constructor(e,t,n){super(),this.el=e,this.selectedMode="month",this.rootEl=e,this._date=t,this.selectedMode=n,this.render()}render(){this.rootEl.innerHTML=`\n      <button id="prev-month">Prev</button>\n      <button id="today" class="primary">Today</button>\n      <button id="next-month">Next</button>\n      <span id="month-year">${q(this._date)}</span>\n      <input type="radio" name="view" id="month-view" ${"month"===this.selectedMode?"checked":""}>\n      <label for="month-view">Month</label>\n      <input type="radio" name="view" id="week-view" ${"week"===this.selectedMode?"checked":""}>\n      <label for="week-view">Week</label>      \n      <input type="radio" name="view" id="day-view" ${"day"===this.selectedMode?"checked":""}>\n      <label for="day-view">Day</label>      \n    `,this.rootEl.querySelector("#prev-month").addEventListener("click",(()=>{console.log(`Prev ${this.selectedMode} clicked`),this.dispatchEvent(new g("prev"))})),this.rootEl.querySelector("#next-month").addEventListener("click",(()=>{console.log(`Next ${this.selectedMode} clicked`),this.dispatchEvent(new g("next"))})),this.rootEl.querySelector("#today").addEventListener("click",(()=>{console.log("Today clicked"),this.dispatchEvent(new g("today"))})),this.rootEl.querySelector("#month-view").addEventListener("click",(()=>{console.log("Month view clicked"),this.dispatchEvent(new g("month-view")),this.selectedMode="month"})),this.rootEl.querySelector("#week-view").addEventListener("click",(()=>{console.log("Week view clicked"),this.dispatchEvent(new g("week-view")),this.selectedMode="week"})),this.rootEl.querySelector("#day-view").addEventListener("click",(()=>{console.log("Day view clicked"),this.dispatchEvent(new g("day-view")),this.selectedMode="day"}))}set date(e){this._date=e,this.render()}}class Z{constructor(e,t,n){this.el=e,this._events=[],this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){if(this.rootEl.innerHTML="\n      <h2>Click a day to view events</h2>\n    ",!this._events.length)return;this.rootEl.innerHTML="";const e=document.createElement("ul");e.className="events",this.rootEl.appendChild(e);for(const t of this._events)e.innerHTML+=t.asFullHTML()}set events(e){this._events=e,this.render()}}const K=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];class ee extends H{constructor(e,t,n){super(),this.el=e,this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){this.rootEl.innerHTML="";const e=this._date.getMonth(),t=this._date.getFullYear(),n=this._date.getDate(),s=this._date.getDay(),i=new Date(t,e,n-s);for(let n=0;n<7;n++){const s=new Date(t,e,i.getDate()+n);this.rootEl.insertAdjacentHTML("beforeend",this.renderDay(s,s.getDate())),this.rootEl.lastElementChild.addEventListener("click",(e=>{this.dispatchEvent(new CustomEvent("day-clicked",{detail:s}))}))}this.updateNowMarker()}renderDay(e,t,n=""){const s=V(this._events,e);return`\n      <div class="day ${e.toDateString()===(new Date).toDateString()?"today":""} ${n}">\n        <div class="header">\n          <span class="day-name">${K[e.getDay()]}</span>\n          <span class="day-number">${t}</span>\n        </div>\n        <ul class="events">\n          ${s.map((e=>e.asMediumLengthHTML())).join("")}\n        </ul>\n      </div>\n    `}updateNowMarker(){const e=new Date,t=100*(100*e.getHours()+e.getMinutes())/2400,n=this.rootEl.querySelector(".day.today");if(n){const e=n.offsetHeight*t/100;this.rootEl.style.setProperty("--now-marker",`${e}px`)}setTimeout((()=>this.updateNowMarker()),1e3)}set date(e){this._date=e,this.render()}set events(e){this._events=e,this.render()}}const te=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];class ne extends H{constructor(e,t,n){super(),this.el=e,this._date=new Date,this.rootEl=e,this._date=t,this._events=n,this.render()}render(){const e=V(this._events,this._date);this.rootEl.innerHTML=`\n      <div class="day">\n        <div class="header">\n          ${te[this._date.getDay()]}, ${this._date.getDate()}, ${q(this._date)}\n        </div>\n        <ul class="events">\n          ${e.map((e=>e.asMediumLengthHTML())).join("")}\n        </ul>\n      </div>\n    `,this.updateNowMarker()}updateNowMarker(){const e=new Date,t=100*(100*e.getHours()+e.getMinutes())/2400,n=this.rootEl.querySelector(".day.today");if(n){const e=n.offsetHeight*t/100;this.rootEl.style.setProperty("--now-marker",`${e}px`)}setTimeout((()=>this.updateNowMarker()),1e3)}set date(e){this._date=e,this.render()}set events(e){this._events=e,this.render()}}class se extends H{constructor(e,t,n,s){super(),this.mode="month",this.rootEl=e,this._date=t,this._events=s,this.mode=n,this.render()}render(){this.rootEl.innerHTML="",J()||(this.toolbarEl=document.createElement("div"),this.toolbarEl.id="toolbar",this.rootEl.appendChild(this.toolbarEl),this.toolbar=new Q(this.toolbarEl,this._date,this.mode),this.toolbar.addEventListener("prev",(()=>{"month"===this.mode?this.date=new Date(this._date.getFullYear(),this._date.getMonth()-1,1):"week"===this.mode?this.date=new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()-7):this.date=new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()-1),this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("next",(()=>{"month"===this.mode?this.date=new Date(this._date.getFullYear(),this._date.getMonth()+1,1):"week"===this.mode?this.date=new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()+7):this.date=new Date(this._date.getFullYear(),this._date.getMonth(),this._date.getDate()+1),this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("today",(()=>{this.date=new Date,this.dispatchEvent(new CustomEvent("date-changed",{detail:this._date}))})),this.toolbar.addEventListener("month-view",(()=>{this.mode="month",this.rootEl.setAttribute("data-mode","month"),this.dispatchEvent(new CustomEvent("mode-changed",{detail:this.mode}))})),this.toolbar.addEventListener("week-view",(()=>{this.mode="week",this.rootEl.setAttribute("data-mode","week"),this.dispatchEvent(new CustomEvent("mode-changed",{detail:this.mode}))})),this.toolbar.addEventListener("day-view",(()=>{this.mode="day",this.rootEl.setAttribute("data-mode","day"),this.dispatchEvent(new CustomEvent("mode-changed",{detail:this.mode}))}))),this.monthGridEl=document.createElement("div"),this.monthGridEl.id="month-grid",this.rootEl.appendChild(this.monthGridEl),this.monthGrid=new z(this.monthGridEl,this._date,this._events),this.weekGridEl=document.createElement("div"),this.weekGridEl.id="week-grid",this.rootEl.appendChild(this.weekGridEl),this.weekGrid=new ee(this.weekGridEl,this._date,this._events),this.dayGridEl=document.createElement("div"),this.dayGridEl.id="day-grid",this.rootEl.appendChild(this.dayGridEl),this.dayGrid=new ne(this.dayGridEl,this._date,this._events),this.sidebarEl=document.createElement("div"),this.sidebarEl.id="sidebar",this.rootEl.appendChild(this.sidebarEl),this.sidebar=new Z(this.sidebarEl,this._date,this._events),this.monthGrid.addEventListener("day-clicked",(e=>{const t=e.detail,n=V(this._events,t);this.sidebar.events=n})),this.weekGrid.addEventListener("day-clicked",(e=>{const t=e.detail,n=V(this._events,t);this.sidebar.events=n})),this.sidebar.events=V(this._events,new Date),this.rootEl.setAttribute("data-mode",this.mode)}set date(e){console.log("Setting date to",e),this._date=e,this.monthGrid.date=e,this.weekGrid.date=e,this.dayGrid.date=e,this.toolbar&&(this.toolbar.date=e),this.sidebar.events=V(this._events,this._date)}set events(e){this._events=e,this.monthGrid.events=e,this.weekGrid.events=e,this.dayGrid.events=e,this.sidebar.events=V(this._events,this._date)}}class ie{constructor(e,t,n){this.rsvp=!1,this.title=e,this.id=t,this.date=n}asOneLineHTML(e=void 0){const t=this.time?`<span class="time">${this.time}</span>`:"";return`\n      <li id="id-${this.id}" data-index-in-grid="${e}" class="event${this.multiDays?" multi-day":""}${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>${t} <span class="title">${this.title}</span></div>\n      </li>\n    `}asMediumLengthHTML(){const e=this.time?`<span class="time">${this.time}</span>`:"";return`\n      <li id="id-${this.id}" class="event${this.multiDays?" multi-day":""}${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>${e}</div>\n        <p class="title">${this.title}</p>\n        <p>${this.description}</p>\n      </li>\n    `}asFullHTML(){let e="";return this.multiDays?e=`From ${this.multiDays.start.toDateString()} to ${this.multiDays.end.toDateString()}`:(e=this.date.toDateString(),this.time&&(e+=`, at ${this.time}`),this.repeat&&(e+=`, ${this.repeat}`),this.duration&&(e+=` (${this.duration} minutes)`)),`\n      <li class="event${this.rsvp?"":" unconfirmed"}" style="--event-color: ${this.color};">\n        <div>\n          <h2>${this.title}</h2>\n          <p class="when">${e}</p>\n          ${this.location?`<p class="where">${this.location}</p>`:""}\n          <p class="what">${this.description}</p>\n        </div>\n      </li>\n    `}}var ae=function(e,t,n,s){return new(n||(n=Promise))((function(i,a){function o(e){try{l(s.next(e))}catch(e){a(e)}}function r(e){try{l(s.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}l((s=s.apply(e,t||[])).next())}))};class oe{constructor(e){this.events=e}start(){this.popupEl||(this.popupEl=document.createElement("div"),this.popupEl.className="popup"),addEventListener("mousemove",(e=>{this.popupEl.classList.remove("visible"),this.popupEl.remove();const t=e.target.closest("#month-grid .event, #week-grid .event");if(!t)return;const n=t.id;if(!n||!n.startsWith("id-"))return;let s=n.replace("id-","");const i=this.events.find((e=>e.id===s));if(!i)return void console.log("No event found for id",s);const a=parseInt(t.dataset.indexInGrid);this.popupEl.style.setProperty("--event-color",i.color),this.popupEl.classList.toggle("visible",!0),this.popupEl.classList.toggle("unconfirmed",!i.rsvp);let o="";i.multiDays?o=`From ${i.multiDays.start.toDateString()} to ${i.multiDays.end.toDateString()}`:(o=i.date.toDateString(),i.time&&(o+=`, at ${i.time}`),i.repeat&&(o+=`, ${i.repeat}`),i.duration&&(o+=` (${i.duration} minutes)`)),this.popupEl.innerHTML=`\n        <h2>${i.title}</h2>\n        <p class="when">${o}</p>\n        ${i.location?`<p class="where">${i.location}</p>`:""}\n        <p class="what">${i.description}</p>\n      `,document.body.appendChild(this.popupEl);const r=t.getBoundingClientRect(),l=r.top,d=r.right,c=r.left,h=r.width;this.popupEl.style.top=a>=28?l-this.popupEl.clientHeight+"px":`${l}px`,6===a||13===a||20===a||27===a||34===a?(this.popupEl.style.left=c-h+"px",this.popupEl.classList.toggle("left",!0)):(this.popupEl.style.left=`${d}px`,this.popupEl.classList.toggle("left",!1))}))}}class re{getStoredPrefs(){return e=this,t=void 0,s=function*(){yield new Promise((e=>setTimeout(e,250*Math.random())));const e=localStorage.getItem("slow-cal-mode"),t=localStorage.getItem("slow-cal-initDate");return{mode:e,initDate:t?new Date(t):void 0}},new((n=void 0)||(n=Promise))((function(i,a){function o(e){try{l(s.next(e))}catch(e){a(e)}}function r(e){try{l(s.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}l((s=s.apply(e,t||[])).next())}));var e,t,n,s}set mode(e){console.log("Storing mode prefs"),localStorage.setItem("slow-cal-mode",e)}set initDate(e){console.log("Storing date prefs"),localStorage.setItem("slow-cal-initDate",e.toISOString())}}addEventListener("DOMContentLoaded",(()=>{return e=void 0,t=void 0,s=function*(){const e=J(),t=new re,n=yield t.getStoredPrefs(),s=e?new Date:n.initDate||new Date,i=e?"day":n.mode||"month",a=document.getElementById("app");a.classList.toggle("in-side-panel",e);const o=new se(a,s,i,[]),r=yield function(){return ae(this,void 0,void 0,(function*(){const e=yield function(){return ae(this,void 0,void 0,(function*(){console.log("Fetching calendar data ..."),yield new Promise((e=>setTimeout(e,500*Math.random())));const e=yield fetch(`./data.json?cacheBuster=${Date.now()}`);return yield e.json()}))}();return console.log("Processing events ..."),e.events.map((e=>function(e){const t=[new Date(e.startDate)];let n=null;if(e.repeat){const n=new Date(e.startDate),s=e.endDate?new Date(e.endDate):new Date(n.getTime()+15768e7);if("daily"===e.repeat){console.log("Expanding daily event ...");const e=(s.getTime()-n.getTime())/864e5;for(let s=1;s<=e;s++){const e=new Date(n.getTime()+24*s*60*60*1e3);0!==e.getDay()&&6!==e.getDay()&&t.push(e)}}else if("weekly"===e.repeat){console.log("Expanding weekly event ...");const e=(s.getTime()-n.getTime())/6048e5;for(let s=1;s<=e;s++){const e=new Date(n.getTime()+7*s*24*60*60*1e3);t.push(e)}}else if("monthly"===e.repeat){console.log("Expanding monthly event ...");const e=12*(s.getFullYear()-n.getFullYear())+(s.getMonth()-n.getMonth());for(let s=1;s<=e;s++){const e=new Date(n.getTime());e.setMonth(e.getMonth()+s),t.push(e)}}else if("yearly"===e.repeat){console.log("Expanding yearly event ...");const e=s.getFullYear()-n.getFullYear();for(let s=1;s<=e;s++){const e=new Date(n.getTime());e.setFullYear(e.getFullYear()+s),t.push(e)}}}else if(e.endDate){const s=new Date(e.startDate),i=new Date(e.endDate),a=(i.getTime()-s.getTime())/864e5;for(let e=1;e<=a;e++){const n=new Date(s.getTime()+24*e*60*60*1e3);t.push(n)}n={start:s,end:i}}return t.map(((t,s)=>{const i=e.id+(s>0?`-${s}`:""),a=new ie(e.title,i,t);return a.multiDays=n,a.color=e.color,a.time=e.startTime,a.duration=e.duration,a.repeat=e.repeat,a.location=e.location,a.description=e.description,a.rsvp=e.rsvp,a}))}(e))).flat()}))}();console.log("Refreshing calendar with events"),o.events=r,console.log("Initializing the popup util"),new oe(r).start(),o.addEventListener("mode-changed",(e=>{t.mode=e.detail})),o.addEventListener("date-changed",(e=>{t.initDate=e.detail}))},new((n=void 0)||(n=Promise))((function(i,a){function o(e){try{l(s.next(e))}catch(e){a(e)}}function r(e){try{l(s.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}l((s=s.apply(e,t||[])).next())}));var e,t,n,s}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBV3pHLEVBQVV5RyxTQUMzQjVOLEVBQU0yTixPQUFTeEcsRUFBVXdHLE9BQ3pCM04sRUFBTTZOLFNBQVcxRyxFQUFVMEcsU0FDM0I3TixFQUFNdU4sWUFBY3BHLEVBQVVvRyxZQUM5QnZOLEVBQU1xTixLQUFPbEcsRUFBVWtHLEtBRWhCck4sQ0FBSyxHQUVoQixDQU9Xa1IsQ0FBa0NsUixLQUN4Q21SLE1BQ0wsRyxDRGhGdUJDLEdBRXJCeFUsUUFBUStPLElBQUksbUNBQ1p3RSxFQUFNekksT0FBU0EsRUFFZjlLLFFBQVErTyxJQUFJLCtCQUNFLElBQUltQyxHQUFXcEcsR0FDdkIrRixRQUdOMEMsRUFBTXJLLGlCQUFpQixnQkFBaUJvQixJQUN0QzRJLEVBQU1yRSxLQUFPdkUsRUFBRW9ELE1BQU0sSUFJdkI2RixFQUFNckssaUJBQWlCLGdCQUFpQm9CLElBQ3RDNEksRUFBTUosU0FBV3hJLEVBQUVvRCxNQUFNLEdBRTdCLEUsWUEvQmlELEssNlFBK0IvQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xvdy1jYWxlbmRhci8uL25vZGVfbW9kdWxlcy9ldmVudC10YXJnZXQtc2hpbS9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vc2xvdy1jYWxlbmRhci8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9zbG93LWNhbGVuZGFyLy4vc3JjL01vbnRoR3JpZC50cyIsIndlYnBhY2s6Ly9zbG93LWNhbGVuZGFyLy4vc3JjL1Rvb2xiYXIudHMiLCJ3ZWJwYWNrOi8vc2xvdy1jYWxlbmRhci8uL3NyYy9TaWRlYmFyLnRzIiwid2VicGFjazovL3Nsb3ctY2FsZW5kYXIvLi9zcmMvV2Vla0dyaWQudHMiLCJ3ZWJwYWNrOi8vc2xvdy1jYWxlbmRhci8uL3NyYy9EYXlHcmlkLnRzIiwid2VicGFjazovL3Nsb3ctY2FsZW5kYXIvLi9zcmMvQXBwVUkudHMiLCJ3ZWJwYWNrOi8vc2xvdy1jYWxlbmRhci8uL3NyYy9DYWxlbmRhckV2ZW50LnRzIiwid2VicGFjazovL3Nsb3ctY2FsZW5kYXIvLi9zcmMvRXZlbnRQb3B1cC50cyIsIndlYnBhY2s6Ly9zbG93LWNhbGVuZGFyLy4vc3JjL1N0b3JlLnRzIiwid2VicGFjazovL3Nsb3ctY2FsZW5kYXIvLi9zcmMvYXBwLnRzIiwid2VicGFjazovL3Nsb3ctY2FsZW5kYXIvLi9zcmMvZXZlbnRzLWZhY3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBc3NlcnQgYSBjb25kaXRpb24uXG4gKiBAcGFyYW0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdGhhdCBpdCBzaG91bGQgc2F0aXNmeS5cbiAqIEBwYXJhbSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIGFyZ3MgVGhlIGFyZ3VtZW50cyBmb3IgcmVwbGFjaW5nIHBsYWNlaG9sZGVycyBpbiB0aGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VHlwZShjb25kaXRpb24sIG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGZvcm1hdChtZXNzYWdlLCBhcmdzKSk7XG4gICAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IGEgdGV4dCBhbmQgYXJndW1lbnRzIHRvIG9uZSBzdHJpbmcuXG4gKiBAcGFyYW0gbWVzc2FnZSBUaGUgZm9ybWF0aW5nIHRleHRcbiAqIEBwYXJhbSBhcmdzIFRoZSBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChtZXNzYWdlLCBhcmdzKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiBtZXNzYWdlLnJlcGxhY2UoLyVbb3NdL2d1LCAoKSA9PiBhbnlUb1N0cmluZyhhcmdzW2krK10pKTtcbn1cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICogQHBhcmFtIHggVGhlIHZhbHVlIHRvIGdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICovXG5mdW5jdGlvbiBhbnlUb1N0cmluZyh4KSB7XG4gICAgaWYgKHR5cGVvZiB4ICE9PSBcIm9iamVjdFwiIHx8IHggPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh4KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KTtcbn1cblxubGV0IGN1cnJlbnRFcnJvckhhbmRsZXI7XG4vKipcbiAqIFNldCB0aGUgZXJyb3IgaGFuZGxlci5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgZXJyb3IgaGFuZGxlciB0byBzZXQuXG4gKi9cbmZ1bmN0aW9uIHNldEVycm9ySGFuZGxlcih2YWx1ZSkge1xuICAgIGFzc2VydFR5cGUodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCwgXCJUaGUgZXJyb3IgaGFuZGxlciBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgdW5kZWZpbmVkLCBidXQgZ290ICVvLlwiLCB2YWx1ZSk7XG4gICAgY3VycmVudEVycm9ySGFuZGxlciA9IHZhbHVlO1xufVxuLyoqXG4gKiBQcmludCBhIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0gbWF5YmVFcnJvciBUaGUgZXJyb3Igb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXBvcnRFcnJvcihtYXliZUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBtYXliZUVycm9yIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgICAgID8gbWF5YmVFcnJvclxuICAgICAgICAgICAgOiBuZXcgRXJyb3IoYW55VG9TdHJpbmcobWF5YmVFcnJvcikpO1xuICAgICAgICAvLyBDYWxsIHRoZSB1c2VyLWRlZmluZWQgZXJyb3IgaGFuZGxlciBpZiBleGlzdHMuXG4gICAgICAgIGlmIChjdXJyZW50RXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBjdXJyZW50RXJyb3JIYW5kbGVyKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBEaXNwYXRjaCBhbiBgZXJyb3JgIGV2ZW50IGlmIHRoaXMgaXMgb24gYSBicm93c2VyLlxuICAgICAgICBpZiAodHlwZW9mIGRpc3BhdGNoRXZlbnQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgdHlwZW9mIEVycm9yRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudChuZXcgRXJyb3JFdmVudChcImVycm9yXCIsIHsgZXJyb3IsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVtaXQgYW4gYHVuY2F1Z2h0RXhjZXB0aW9uYCBldmVudCBpZiB0aGlzIGlzIG9uIE5vZGUuanMuXG4gICAgICAgIC8vaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHR5cGVvZiBwcm9jZXNzLmVtaXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgcHJpbnQgdGhlIGVycm9yLlxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIC8vIGlnbm9yZS5cbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGdsb2JhbCBvYmplY3QuXG4gKi9cbi8vaXN0YW5idWwgaWdub3JlIG5leHRcbmNvbnN0IEdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBzZWxmXG4gICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxubGV0IGN1cnJlbnRXYXJuSGFuZGxlcjtcbi8qKlxuICogU2V0IHRoZSB3YXJuaW5nIGhhbmRsZXIuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHdhcm5pbmcgaGFuZGxlciB0byBzZXQuXG4gKi9cbmZ1bmN0aW9uIHNldFdhcm5pbmdIYW5kbGVyKHZhbHVlKSB7XG4gICAgYXNzZXJ0VHlwZSh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkLCBcIlRoZSB3YXJuaW5nIGhhbmRsZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZCwgYnV0IGdvdCAlby5cIiwgdmFsdWUpO1xuICAgIGN1cnJlbnRXYXJuSGFuZGxlciA9IHZhbHVlO1xufVxuLyoqXG4gKiBUaGUgd2FybmluZyBpbmZvcm1hdGlvbi5cbiAqL1xuY2xhc3MgV2FybmluZyB7XG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSkge1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXBvcnQgdGhpcyB3YXJuaW5nLlxuICAgICAqIEBwYXJhbSBhcmdzIFRoZSBhcmd1bWVudHMgb2YgdGhlIHdhcm5pbmcuXG4gICAgICovXG4gICAgd2FybiguLi5hcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENhbGwgdGhlIHVzZXItZGVmaW5lZCB3YXJuaW5nIGhhbmRsZXIgaWYgZXhpc3RzLlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRXYXJuSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRXYXJuSGFuZGxlcih7IC4uLnRoaXMsIGFyZ3MgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBwcmludCB0aGUgd2FybmluZy5cbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKChfYSA9IG5ldyBFcnJvcigpLnN0YWNrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiKS5yZXBsYWNlKC9eKD86Lis/XFxuKXsyfS9ndSwgXCJcXG5cIik7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5tZXNzYWdlLCAuLi5hcmdzLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9iKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IEluaXRFdmVudFdhc0NhbGxlZFdoaWxlRGlzcGF0Y2hpbmcgPSBuZXcgV2FybmluZyhcIlcwMVwiLCBcIlVuYWJsZSB0byBpbml0aWFsaXplIGV2ZW50IHVuZGVyIGRpc3BhdGNoaW5nLlwiKTtcbmNvbnN0IEZhbHN5V2FzQXNzaWduZWRUb0NhbmNlbEJ1YmJsZSA9IG5ldyBXYXJuaW5nKFwiVzAyXCIsIFwiQXNzaWduaW5nIGFueSBmYWxzeSB2YWx1ZSB0byAnY2FuY2VsQnViYmxlJyBwcm9wZXJ0eSBoYXMgbm8gZWZmZWN0LlwiKTtcbmNvbnN0IFRydXRoeVdhc0Fzc2lnbmVkVG9SZXR1cm5WYWx1ZSA9IG5ldyBXYXJuaW5nKFwiVzAzXCIsIFwiQXNzaWduaW5nIGFueSB0cnV0aHkgdmFsdWUgdG8gJ3JldHVyblZhbHVlJyBwcm9wZXJ0eSBoYXMgbm8gZWZmZWN0LlwiKTtcbmNvbnN0IE5vbkNhbmNlbGFibGVFdmVudFdhc0NhbmNlbGVkID0gbmV3IFdhcm5pbmcoXCJXMDRcIiwgXCJVbmFibGUgdG8gcHJldmVudERlZmF1bHQgb24gbm9uLWNhbmNlbGFibGUgZXZlbnRzLlwiKTtcbmNvbnN0IENhbmNlbGVkSW5QYXNzaXZlTGlzdGVuZXIgPSBuZXcgV2FybmluZyhcIlcwNVwiLCBcIlVuYWJsZSB0byBwcmV2ZW50RGVmYXVsdCBpbnNpZGUgcGFzc2l2ZSBldmVudCBsaXN0ZW5lciBpbnZvY2F0aW9uLlwiKTtcbmNvbnN0IEV2ZW50TGlzdGVuZXJXYXNEdXBsaWNhdGVkID0gbmV3IFdhcm5pbmcoXCJXMDZcIiwgXCJBbiBldmVudCBsaXN0ZW5lciB3YXNuJ3QgYWRkZWQgYmVjYXVzZSBpdCBoYXMgYmVlbiBhZGRlZCBhbHJlYWR5OiAlbywgJW9cIik7XG5jb25zdCBPcHRpb25XYXNJZ25vcmVkID0gbmV3IFdhcm5pbmcoXCJXMDdcIiwgXCJUaGUgJW8gb3B0aW9uIHZhbHVlIHdhcyBhYmFuZG9uZWQgYmVjYXVzZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2Fzbid0IGFkZGVkIGFzIGR1cGxpY2F0ZWQuXCIpO1xuY29uc3QgSW52YWxpZEV2ZW50TGlzdGVuZXIgPSBuZXcgV2FybmluZyhcIlcwOFwiLCBcIlRoZSAnY2FsbGJhY2snIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QgdGhhdCBoYXMgJ2hhbmRsZUV2ZW50JyBtZXRob2Q6ICVvXCIpO1xuY29uc3QgSW52YWxpZEF0dHJpYnV0ZUhhbmRsZXIgPSBuZXcgV2FybmluZyhcIlcwOVwiLCBcIkV2ZW50IGF0dHJpYnV0ZSBoYW5kbGVyIG11c3QgYmUgYSBmdW5jdGlvbjogJW9cIik7XG5cbi8qZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgRXZlbnRgIGludGVyZmFjZSwgdGhhdCB3cmFwcyBhIGdpdmVuIGV2ZW50IG9iamVjdC5cbiAqIGBFdmVudFRhcmdldGAgc2hpbSBjYW4gY29udHJvbCB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhpcyBgRXZlbnRgIG9iamVjdHMuXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZXZlbnRcbiAqL1xuY2xhc3MgRXZlbnQge1xuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtbm9uZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTk9ORSgpIHtcbiAgICAgICAgcmV0dXJuIE5PTkU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtY2FwdHVyaW5nX3BoYXNlXG4gICAgICovXG4gICAgc3RhdGljIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7XG4gICAgICAgIHJldHVybiBDQVBUVVJJTkdfUEhBU0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtYXRfdGFyZ2V0XG4gICAgICovXG4gICAgc3RhdGljIGdldCBBVF9UQVJHRVQoKSB7XG4gICAgICAgIHJldHVybiBBVF9UQVJHRVQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtYnViYmxpbmdfcGhhc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEJVQkJMSU5HX1BIQVNFKCkge1xuICAgICAgICByZXR1cm4gQlVCQkxJTkdfUEhBU0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhpcyBldmVudCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGlzIGV2ZW50LlxuICAgICAqIEBwYXJhbSBldmVudEluaXREaWN0IE9wdGlvbnMgdG8gaW5pdGlhbGl6ZS5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWV2ZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZSwgZXZlbnRJbml0RGljdCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpc1RydXN0ZWRcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBldmVudEluaXREaWN0ICE9PSBudWxsICYmIGV2ZW50SW5pdERpY3QgIT09IHZvaWQgMCA/IGV2ZW50SW5pdERpY3QgOiB7fTtcbiAgICAgICAgaW50ZXJuYWxEYXRhTWFwLnNldCh0aGlzLCB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcodHlwZSksXG4gICAgICAgICAgICBidWJibGVzOiBCb29sZWFuKG9wdHMuYnViYmxlcyksXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBCb29sZWFuKG9wdHMuY2FuY2VsYWJsZSksXG4gICAgICAgICAgICBjb21wb3NlZDogQm9vbGVhbihvcHRzLmNvbXBvc2VkKSxcbiAgICAgICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IG51bGwsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb25GbGFnOiBmYWxzZSxcbiAgICAgICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc6IGZhbHNlLFxuICAgICAgICAgICAgY2FuY2VsZWRGbGFnOiBmYWxzZSxcbiAgICAgICAgICAgIGluUGFzc2l2ZUxpc3RlbmVyRmxhZzogZmFsc2UsXG4gICAgICAgICAgICBkaXNwYXRjaEZsYWc6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhpcyBldmVudC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LXR5cGVcbiAgICAgKi9cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykudHlwZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRhcmdldCBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGluZy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LXRhcmdldFxuICAgICAqL1xuICAgIGdldCB0YXJnZXQoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLnRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRhcmdldCBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGluZy5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGB0YXJnZXRgIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1zcmNlbGVtZW50XG4gICAgICovXG4gICAgZ2V0IHNyY0VsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLnRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRhcmdldCBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGluZy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWN1cnJlbnR0YXJnZXRcbiAgICAgKi9cbiAgICBnZXQgY3VycmVudFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuY3VycmVudFRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHRhcmdldCBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGluZy5cbiAgICAgKiBUaGlzIGRvZXNuJ3Qgc3VwcG9ydCBub2RlIHRyZWUuXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1jb21wb3NlZHBhdGhcbiAgICAgKi9cbiAgICBjb21wb3NlZFBhdGgoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYXJnZXQgPSAkKHRoaXMpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGlmIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gW2N1cnJlbnRUYXJnZXRdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1ub25lXG4gICAgICovXG4gICAgZ2V0IE5PTkUoKSB7XG4gICAgICAgIHJldHVybiBOT05FO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWNhcHR1cmluZ19waGFzZVxuICAgICAqL1xuICAgIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7XG4gICAgICAgIHJldHVybiBDQVBUVVJJTkdfUEhBU0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtYXRfdGFyZ2V0XG4gICAgICovXG4gICAgZ2V0IEFUX1RBUkdFVCgpIHtcbiAgICAgICAgcmV0dXJuIEFUX1RBUkdFVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1idWJibGluZ19waGFzZVxuICAgICAqL1xuICAgIGdldCBCVUJCTElOR19QSEFTRSgpIHtcbiAgICAgICAgcmV0dXJuIEJVQkJMSU5HX1BIQVNFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBldmVudCBwaGFzZS5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWV2ZW50cGhhc2VcbiAgICAgKi9cbiAgICBnZXQgZXZlbnRQaGFzZSgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuZGlzcGF0Y2hGbGFnID8gMiA6IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3AgZXZlbnQgYnViYmxpbmcuXG4gICAgICogQmVjYXVzZSB0aGlzIHNoaW0gZG9lc24ndCBzdXBwb3J0IG5vZGUgdHJlZSwgdGhpcyBtZXJlbHkgY2hhbmdlcyB0aGUgYGNhbmNlbEJ1YmJsZWAgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1zdG9wcHJvcGFnYXRpb25cbiAgICAgKi9cbiAgICBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICQodGhpcykuc3RvcFByb3BhZ2F0aW9uRmxhZyA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiBldmVudCBidWJibGluZyB3YXMgc3RvcHBlZC5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtY2FuY2VsYnViYmxlXG4gICAgICovXG4gICAgZ2V0IGNhbmNlbEJ1YmJsZSgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuc3RvcFByb3BhZ2F0aW9uRmxhZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcCBldmVudCBidWJibGluZyBpZiBgdHJ1ZWAgaXMgc2V0LlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHN0b3BQcm9wYWdhdGlvbigpYCBtZXRob2QgaW5zdGVhZC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWNhbmNlbGJ1YmJsZVxuICAgICAqL1xuICAgIHNldCBjYW5jZWxCdWJibGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnN0b3BQcm9wYWdhdGlvbkZsYWcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgRmFsc3lXYXNBc3NpZ25lZFRvQ2FuY2VsQnViYmxlLndhcm4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nIGFuZCBzdWJzZXF1ZW50IGV2ZW50IGxpc3RlbmVyIGNhbGxpbmdzLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtc3RvcGltbWVkaWF0ZXByb3BhZ2F0aW9uXG4gICAgICovXG4gICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gJCh0aGlzKTtcbiAgICAgICAgZGF0YS5zdG9wUHJvcGFnYXRpb25GbGFnID0gZGF0YS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYHRydWVgIGlmIHRoaXMgZXZlbnQgd2lsbCBidWJibGUuXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1idWJibGVzXG4gICAgICovXG4gICAgZ2V0IGJ1YmJsZXMoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLmJ1YmJsZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiB0aGlzIGV2ZW50IGNhbiBiZSBjYW5jZWxlZCBieSB0aGUgYHByZXZlbnREZWZhdWx0KClgIG1ldGhvZC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWNhbmNlbGFibGVcbiAgICAgKi9cbiAgICBnZXQgY2FuY2VsYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuY2FuY2VsYWJsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYHRydWVgIGlmIHRoZSBkZWZhdWx0IGJlaGF2aW9yIHdpbGwgYWN0LlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRlZmF1bHRQcmV2ZW50ZWRgIHByb2VwcnR5IGluc3RlYWQuXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1yZXR1cm52YWx1ZVxuICAgICAqL1xuICAgIGdldCByZXR1cm5WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICEkKHRoaXMpLmNhbmNlbGVkRmxhZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlmIGBmYWxzZWAgaXMgc2V0LlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHByZXZlbnREZWZhdWx0KClgIG1ldGhvZCBpbnN0ZWFkLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtcmV0dXJudmFsdWVcbiAgICAgKi9cbiAgICBzZXQgcmV0dXJuVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgc2V0Q2FuY2VsRmxhZygkKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFRydXRoeVdhc0Fzc2lnbmVkVG9SZXR1cm5WYWx1ZS53YXJuKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIHRoZSBkZWZhdWx0IGJlaGF2aW9yLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZXZlbnQtcHJldmVudGRlZmF1bHRcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgc2V0Q2FuY2VsRmxhZygkKHRoaXMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYHRydWVgIGlmIHRoZSBkZWZhdWx0IGJlaGF2aW9yIHdhcyBjYW5jZWxlZC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWRlZmF1bHRwcmV2ZW50ZWRcbiAgICAgKi9cbiAgICBnZXQgZGVmYXVsdFByZXZlbnRlZCgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuY2FuY2VsZWRGbGFnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LWNvbXBvc2VkXG4gICAgICovXG4gICAgZ2V0IGNvbXBvc2VkKCkge1xuICAgICAgICByZXR1cm4gJCh0aGlzKS5jb21wb3NlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ldmVudC1pc3RydXN0ZWRcbiAgICAgKi9cbiAgICAvL2lzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgZ2V0IGlzVHJ1c3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWV2ZW50LXRpbWVzdGFtcFxuICAgICAqL1xuICAgIGdldCB0aW1lU3RhbXAoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLnRpbWVTdGFtcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgRG9uJ3QgdXNlIHRoaXMgbWV0aG9kLiBUaGUgY29uc3RydWN0b3IgZGlkIGluaXRpYWxpemF0aW9uLlxuICAgICAqL1xuICAgIGluaXRFdmVudCh0eXBlLCBidWJibGVzID0gZmFsc2UsIGNhbmNlbGFibGUgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBkYXRhID0gJCh0aGlzKTtcbiAgICAgICAgaWYgKGRhdGEuZGlzcGF0Y2hGbGFnKSB7XG4gICAgICAgICAgICBJbml0RXZlbnRXYXNDYWxsZWRXaGlsZURpc3BhdGNoaW5nLndhcm4oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcm5hbERhdGFNYXAuc2V0KHRoaXMsIHtcbiAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcodHlwZSksXG4gICAgICAgICAgICBidWJibGVzOiBCb29sZWFuKGJ1YmJsZXMpLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogQm9vbGVhbihjYW5jZWxhYmxlKSxcbiAgICAgICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IG51bGwsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb25GbGFnOiBmYWxzZSxcbiAgICAgICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc6IGZhbHNlLFxuICAgICAgICAgICAgY2FuY2VsZWRGbGFnOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEhlbHBlcnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBOT05FID0gMDtcbmNvbnN0IENBUFRVUklOR19QSEFTRSA9IDE7XG5jb25zdCBBVF9UQVJHRVQgPSAyO1xuY29uc3QgQlVCQkxJTkdfUEhBU0UgPSAzO1xuLyoqXG4gKiBQcml2YXRlIGRhdGEgZm9yIGV2ZW50IHdyYXBwZXJzLlxuICovXG5jb25zdCBpbnRlcm5hbERhdGFNYXAgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBHZXQgcHJpdmF0ZSBkYXRhLlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBvYmplY3QgdG8gZ2V0IHByaXZhdGUgZGF0YS5cbiAqIEBwYXJhbSBuYW1lIFRoZSB2YXJpYWJsZSBuYW1lIHRvIHJlcG9ydC5cbiAqIEByZXR1cm5zIFRoZSBwcml2YXRlIGRhdGEgb2YgdGhlIGV2ZW50LlxuICovXG5mdW5jdGlvbiAkKGV2ZW50LCBuYW1lID0gXCJ0aGlzXCIpIHtcbiAgICBjb25zdCByZXR2ID0gaW50ZXJuYWxEYXRhTWFwLmdldChldmVudCk7XG4gICAgYXNzZXJ0VHlwZShyZXR2ICE9IG51bGwsIFwiJyVzJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IEV2ZW50IGNvbnN0cnVjdG9yIGNyZWF0ZWQsIGJ1dCBnb3QgYW5vdGhlciBvbmU6ICVvXCIsIG5hbWUsIGV2ZW50KTtcbiAgICByZXR1cm4gcmV0djtcbn1cbi8qKlxuICogaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNzZXQtdGhlLWNhbmNlbGVkLWZsYWdcbiAqIEBwYXJhbSBkYXRhIHByaXZhdGUgZGF0YS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FuY2VsRmxhZyhkYXRhKSB7XG4gICAgaWYgKGRhdGEuaW5QYXNzaXZlTGlzdGVuZXJGbGFnKSB7XG4gICAgICAgIENhbmNlbGVkSW5QYXNzaXZlTGlzdGVuZXIud2FybigpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZGF0YS5jYW5jZWxhYmxlKSB7XG4gICAgICAgIE5vbkNhbmNlbGFibGVFdmVudFdhc0NhbmNlbGVkLndhcm4oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLmNhbmNlbGVkRmxhZyA9IHRydWU7XG59XG4vLyBTZXQgZW51bWVyYWJsZVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50LCBcIk5PTkVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50LCBcIkNBUFRVUklOR19QSEFTRVwiLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnQsIFwiQVRfVEFSR0VUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudCwgXCJCVUJCTElOR19QSEFTRVwiLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5jb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoRXZlbnQucHJvdG90eXBlKTtcbmZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChrZXlzW2ldID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudC5wcm90b3R5cGUsIGtleXNbaV0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn1cbi8vIEVuc3VyZSBgZXZlbnQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnRgIGlzIGB0cnVlYC5cbmlmICh0eXBlb2YgR2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBHbG9iYWwuRXZlbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoRXZlbnQucHJvdG90eXBlLCBHbG9iYWwuRXZlbnQucHJvdG90eXBlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgSW52YWxpZFN0YXRlRXJyb3IgaW5zdGFuY2UuXG4gKiBAcGFyYW0gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW52YWxpZFN0YXRlRXJyb3IobWVzc2FnZSkge1xuICAgIGlmIChHbG9iYWwuRE9NRXhjZXB0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2xvYmFsLkRPTUV4Y2VwdGlvbihtZXNzYWdlLCBcIkludmFsaWRTdGF0ZUVycm9yXCIpO1xuICAgIH1cbiAgICBpZiAoRE9NRXhjZXB0aW9uID09IG51bGwpIHtcbiAgICAgICAgRE9NRXhjZXB0aW9uID0gY2xhc3MgRE9NRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgICAgICAgICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRE9NRXhjZXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgICAgICAgICAgZ2V0IGNvZGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICAgICAgICAgIGdldCBuYW1lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkludmFsaWRTdGF0ZUVycm9yXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKERPTUV4Y2VwdGlvbi5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvZGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgbmFtZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBkZWZpbmVFcnJvckNvZGVQcm9wZXJ0aWVzKERPTUV4Y2VwdGlvbik7XG4gICAgICAgIGRlZmluZUVycm9yQ29kZVByb3BlcnRpZXMoRE9NRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRE9NRXhjZXB0aW9uKG1lc3NhZ2UpO1xufVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEhlbHBlcnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5sZXQgRE9NRXhjZXB0aW9uO1xuY29uc3QgRXJyb3JDb2RlTWFwID0ge1xuICAgIElOREVYX1NJWkVfRVJSOiAxLFxuICAgIERPTVNUUklOR19TSVpFX0VSUjogMixcbiAgICBISUVSQVJDSFlfUkVRVUVTVF9FUlI6IDMsXG4gICAgV1JPTkdfRE9DVU1FTlRfRVJSOiA0LFxuICAgIElOVkFMSURfQ0hBUkFDVEVSX0VSUjogNSxcbiAgICBOT19EQVRBX0FMTE9XRURfRVJSOiA2LFxuICAgIE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUjogNyxcbiAgICBOT1RfRk9VTkRfRVJSOiA4LFxuICAgIE5PVF9TVVBQT1JURURfRVJSOiA5LFxuICAgIElOVVNFX0FUVFJJQlVURV9FUlI6IDEwLFxuICAgIElOVkFMSURfU1RBVEVfRVJSOiAxMSxcbiAgICBTWU5UQVhfRVJSOiAxMixcbiAgICBJTlZBTElEX01PRElGSUNBVElPTl9FUlI6IDEzLFxuICAgIE5BTUVTUEFDRV9FUlI6IDE0LFxuICAgIElOVkFMSURfQUNDRVNTX0VSUjogMTUsXG4gICAgVkFMSURBVElPTl9FUlI6IDE2LFxuICAgIFRZUEVfTUlTTUFUQ0hfRVJSOiAxNyxcbiAgICBTRUNVUklUWV9FUlI6IDE4LFxuICAgIE5FVFdPUktfRVJSOiAxOSxcbiAgICBBQk9SVF9FUlI6IDIwLFxuICAgIFVSTF9NSVNNQVRDSF9FUlI6IDIxLFxuICAgIFFVT1RBX0VYQ0VFREVEX0VSUjogMjIsXG4gICAgVElNRU9VVF9FUlI6IDIzLFxuICAgIElOVkFMSURfTk9ERV9UWVBFX0VSUjogMjQsXG4gICAgREFUQV9DTE9ORV9FUlI6IDI1LFxufTtcbmZ1bmN0aW9uIGRlZmluZUVycm9yQ29kZVByb3BlcnRpZXMob2JqKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKEVycm9yQ29kZU1hcCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gRXJyb3JDb2RlTWFwW2tleV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgYEV2ZW50YCBpbnRlcmZhY2UsIHRoYXQgd3JhcHMgYSBnaXZlbiBldmVudCBvYmplY3QuXG4gKiBUaGlzIGNsYXNzIGNvbnRyb2xzIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBgRXZlbnRgLlxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1ldmVudFxuICovXG5jbGFzcyBFdmVudFdyYXBwZXIgZXh0ZW5kcyBFdmVudCB7XG4gICAgLyoqXG4gICAgICogV3JhcCBhIGdpdmVuIGV2ZW50IG9iamVjdCB0byBjb250cm9sIHN0YXRlcy5cbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50LWxpa2Ugb2JqZWN0IHRvIHdyYXAuXG4gICAgICovXG4gICAgc3RhdGljIHdyYXAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAoZ2V0V3JhcHBlckNsYXNzT2YoZXZlbnQpKShldmVudCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGV2ZW50KSB7XG4gICAgICAgIHN1cGVyKGV2ZW50LnR5cGUsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IGV2ZW50LmJ1YmJsZXMsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBldmVudC5jYW5jZWxhYmxlLFxuICAgICAgICAgICAgY29tcG9zZWQ6IGV2ZW50LmNvbXBvc2VkLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGV2ZW50LmNhbmNlbEJ1YmJsZSkge1xuICAgICAgICAgICAgc3VwZXIuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIHN1cGVyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaW50ZXJuYWxEYXRhTWFwJDEuc2V0KHRoaXMsIHsgb3JpZ2luYWw6IGV2ZW50IH0pO1xuICAgICAgICAvLyBEZWZpbmUgYWNjZXNzb3JzXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhldmVudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghKGtleSBpbiB0aGlzKSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIGRlZmluZVJlZGlyZWN0RGVzY3JpcHRvcihldmVudCwga2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgICBzdXBlci5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5hbCB9ID0gJCQxKHRoaXMpO1xuICAgICAgICBpZiAoXCJzdG9wUHJvcGFnYXRpb25cIiBpbiBvcmlnaW5hbCkge1xuICAgICAgICAgICAgb3JpZ2luYWwuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNhbmNlbEJ1YmJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNhbmNlbEJ1YmJsZTtcbiAgICB9XG4gICAgc2V0IGNhbmNlbEJ1YmJsZSh2YWx1ZSkge1xuICAgICAgICBzdXBlci5jYW5jZWxCdWJibGUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5hbCB9ID0gJCQxKHRoaXMpO1xuICAgICAgICBpZiAoXCJjYW5jZWxCdWJibGVcIiBpbiBvcmlnaW5hbCkge1xuICAgICAgICAgICAgb3JpZ2luYWwuY2FuY2VsQnViYmxlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuICAgICAgICBzdXBlci5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5hbCB9ID0gJCQxKHRoaXMpO1xuICAgICAgICBpZiAoXCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cIiBpbiBvcmlnaW5hbCkge1xuICAgICAgICAgICAgb3JpZ2luYWwuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHJldHVyblZhbHVlKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIucmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIHNldCByZXR1cm5WYWx1ZSh2YWx1ZSkge1xuICAgICAgICBzdXBlci5yZXR1cm5WYWx1ZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCB7IG9yaWdpbmFsIH0gPSAkJDEodGhpcyk7XG4gICAgICAgIGlmIChcInJldHVyblZhbHVlXCIgaW4gb3JpZ2luYWwpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsLnJldHVyblZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgIHN1cGVyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHsgb3JpZ2luYWwgfSA9ICQkMSh0aGlzKTtcbiAgICAgICAgaWYgKFwicHJldmVudERlZmF1bHRcIiBpbiBvcmlnaW5hbCkge1xuICAgICAgICAgICAgb3JpZ2luYWwucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdGltZVN0YW1wKCkge1xuICAgICAgICBjb25zdCB7IG9yaWdpbmFsIH0gPSAkJDEodGhpcyk7XG4gICAgICAgIGlmIChcInRpbWVTdGFtcFwiIGluIG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwudGltZVN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci50aW1lU3RhbXA7XG4gICAgfVxufVxuLyoqXG4gKiBQcml2YXRlIGRhdGEgZm9yIGV2ZW50IHdyYXBwZXJzLlxuICovXG5jb25zdCBpbnRlcm5hbERhdGFNYXAkMSA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEdldCBwcml2YXRlIGRhdGEuXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IG9iamVjdCB0byBnZXQgcHJpdmF0ZSBkYXRhLlxuICogQHJldHVybnMgVGhlIHByaXZhdGUgZGF0YSBvZiB0aGUgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uICQkMShldmVudCkge1xuICAgIGNvbnN0IHJldHYgPSBpbnRlcm5hbERhdGFNYXAkMS5nZXQoZXZlbnQpO1xuICAgIGFzc2VydFR5cGUocmV0diAhPSBudWxsLCBcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudCBvYmplY3QsIGJ1dCBnb3RcIiwgZXZlbnQpO1xuICAgIHJldHVybiByZXR2O1xufVxuLyoqXG4gKiBDYWNoZSBmb3Igd3JhcHBlciBjbGFzc2VzLlxuICogQHR5cGUge1dlYWtNYXA8T2JqZWN0LCBGdW5jdGlvbj59XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB3cmFwcGVyQ2xhc3NDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4vLyBNYWtlIGFzc29jaWF0aW9uIGZvciB3cmFwcGVycy5cbndyYXBwZXJDbGFzc0NhY2hlLnNldChPYmplY3QucHJvdG90eXBlLCBFdmVudFdyYXBwZXIpO1xuaWYgKHR5cGVvZiBHbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIEdsb2JhbC5FdmVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdyYXBwZXJDbGFzc0NhY2hlLnNldChHbG9iYWwuRXZlbnQucHJvdG90eXBlLCBFdmVudFdyYXBwZXIpO1xufVxuLyoqXG4gKiBHZXQgdGhlIHdyYXBwZXIgY2xhc3Mgb2YgYSBnaXZlbiBwcm90b3R5cGUuXG4gKiBAcGFyYW0gb3JpZ2luYWxFdmVudCBUaGUgZXZlbnQgb2JqZWN0IHRvIHdyYXAuXG4gKi9cbmZ1bmN0aW9uIGdldFdyYXBwZXJDbGFzc09mKG9yaWdpbmFsRXZlbnQpIHtcbiAgICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWxFdmVudCk7XG4gICAgaWYgKHByb3RvdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBFdmVudFdyYXBwZXI7XG4gICAgfVxuICAgIGxldCB3cmFwcGVyID0gd3JhcHBlckNsYXNzQ2FjaGUuZ2V0KHByb3RvdHlwZSk7XG4gICAgaWYgKHdyYXBwZXIgPT0gbnVsbCkge1xuICAgICAgICB3cmFwcGVyID0gZGVmaW5lV3JhcHBlcihnZXRXcmFwcGVyQ2xhc3NPZihwcm90b3R5cGUpLCBwcm90b3R5cGUpO1xuICAgICAgICB3cmFwcGVyQ2xhc3NDYWNoZS5zZXQocHJvdG90eXBlLCB3cmFwcGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59XG4vKipcbiAqIERlZmluZSBuZXcgd3JhcHBlciBjbGFzcy5cbiAqIEBwYXJhbSBCYXNlRXZlbnRXcmFwcGVyIFRoZSBiYXNlIHdyYXBwZXIgY2xhc3MuXG4gKiBAcGFyYW0gb3JpZ2luYWxQcm90b3R5cGUgVGhlIHByb3RvdHlwZSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVdyYXBwZXIoQmFzZUV2ZW50V3JhcHBlciwgb3JpZ2luYWxQcm90b3R5cGUpIHtcbiAgICBjbGFzcyBDdXN0b21FdmVudFdyYXBwZXIgZXh0ZW5kcyBCYXNlRXZlbnRXcmFwcGVyIHtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9yaWdpbmFsUHJvdG90eXBlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEN1c3RvbUV2ZW50V3JhcHBlci5wcm90b3R5cGUsIGtleXNbaV0sIGRlZmluZVJlZGlyZWN0RGVzY3JpcHRvcihvcmlnaW5hbFByb3RvdHlwZSwga2V5c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gQ3VzdG9tRXZlbnRXcmFwcGVyO1xufVxuLyoqXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gcmVkaXJlY3QgYSBnaXZlbiBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVkaXJlY3REZXNjcmlwdG9yKG9iaiwga2V5KSB7XG4gICAgY29uc3QgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gJCQxKHRoaXMpLm9yaWdpbmFsO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcmlnaW5hbFtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmJpbmQob3JpZ2luYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gJCQxKHRoaXMpLm9yaWdpbmFsO1xuICAgICAgICAgICAgb3JpZ2luYWxba2V5XSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IGQuY29uZmlndXJhYmxlLFxuICAgICAgICBlbnVtZXJhYmxlOiBkLmVudW1lcmFibGUsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbGlzdGVuZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIGNhcHR1cmUgVGhlIGNhcHR1cmUgZmxhZy5cbiAqIEBwYXJhbSBwYXNzaXZlIFRoZSBwYXNzaXZlIGZsYWcuXG4gKiBAcGFyYW0gb25jZSBUaGUgb25jZSBmbGFnLlxuICogQHBhcmFtIHNpZ25hbCBUaGUgYWJvcnQgc2lnbmFsLlxuICogQHBhcmFtIHNpZ25hbExpc3RlbmVyIFRoZSBhYm9ydCBldmVudCBsaXN0ZW5lciBmb3IgdGhlIGFib3J0IHNpZ25hbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXIoY2FsbGJhY2ssIGNhcHR1cmUsIHBhc3NpdmUsIG9uY2UsIHNpZ25hbCwgc2lnbmFsTGlzdGVuZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgZmxhZ3M6IChjYXB0dXJlID8gMSAvKiBDYXB0dXJlICovIDogMCkgfFxuICAgICAgICAgICAgKHBhc3NpdmUgPyAyIC8qIFBhc3NpdmUgKi8gOiAwKSB8XG4gICAgICAgICAgICAob25jZSA/IDQgLyogT25jZSAqLyA6IDApLFxuICAgICAgICBzaWduYWwsXG4gICAgICAgIHNpZ25hbExpc3RlbmVyLFxuICAgIH07XG59XG4vKipcbiAqIFNldCB0aGUgYHJlbW92ZWRgIGZsYWcgdG8gdGhlIGdpdmVuIGxpc3RlbmVyLlxuICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gc2V0UmVtb3ZlZChsaXN0ZW5lcikge1xuICAgIGxpc3RlbmVyLmZsYWdzIHw9IDggLyogUmVtb3ZlZCAqLztcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxpc3RlbmVyIGhhcyB0aGUgYGNhcHR1cmVgIGZsYWcgb3Igbm90LlxuICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gaXNDYXB0dXJlKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIChsaXN0ZW5lci5mbGFncyAmIDEgLyogQ2FwdHVyZSAqLykgPT09IDEgLyogQ2FwdHVyZSAqLztcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxpc3RlbmVyIGhhcyB0aGUgYHBhc3NpdmVgIGZsYWcgb3Igbm90LlxuICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gaXNQYXNzaXZlKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIChsaXN0ZW5lci5mbGFncyAmIDIgLyogUGFzc2l2ZSAqLykgPT09IDIgLyogUGFzc2l2ZSAqLztcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxpc3RlbmVyIGhhcyB0aGUgYG9uY2VgIGZsYWcgb3Igbm90LlxuICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gaXNPbmNlKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIChsaXN0ZW5lci5mbGFncyAmIDQgLyogT25jZSAqLykgPT09IDQgLyogT25jZSAqLztcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxpc3RlbmVyIGhhcyB0aGUgYHJlbW92ZWRgIGZsYWcgb3Igbm90LlxuICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gaXNSZW1vdmVkKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIChsaXN0ZW5lci5mbGFncyAmIDggLyogUmVtb3ZlZCAqLykgPT09IDggLyogUmVtb3ZlZCAqLztcbn1cbi8qKlxuICogQ2FsbCBhbiBldmVudCBsaXN0ZW5lci5cbiAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gY2FsbC5cbiAqIEBwYXJhbSB0YXJnZXQgVGhlIGV2ZW50IHRhcmdldCBvYmplY3QgZm9yIGB0aGlzQXJnYC5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgb2JqZWN0IGZvciB0aGUgZmlyc3QgYXJndW1lbnQuXG4gKiBAcGFyYW0gYXR0cmlidXRlIGB0cnVlYCBpZiB0aGlzIGNhbGxiYWNrIGlzIGFuIGV2ZW50IGF0dHJpYnV0ZSBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayh7IGNhbGxiYWNrIH0sIHRhcmdldCwgZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrLmhhbmRsZUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAodGhyb3duRXJyb3IpIHtcbiAgICAgICAgcmVwb3J0RXJyb3IodGhyb3duRXJyb3IpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBpbmRleCBvZiBnaXZlbiBsaXN0ZW5lci5cbiAqIFRoaXMgcmV0dXJucyBgLTFgIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSBsaXN0IFRoZSBsaXN0ZW5lciBsaXN0LlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaW5kLlxuICogQHBhcmFtIGNhcHR1cmUgVGhlIGNhcHR1cmUgZmxhZyB0byBmaW5kLlxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXhPZkxpc3RlbmVyKHsgbGlzdGVuZXJzIH0sIGNhbGxiYWNrLCBjYXB0dXJlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgJiZcbiAgICAgICAgICAgIGlzQ2FwdHVyZShsaXN0ZW5lcnNbaV0pID09PSBjYXB0dXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gbGlzdGVuZXIuXG4gKiBEb2VzIGNvcHktb24td3JpdGUgaWYgbmVlZGVkLlxuICogQHBhcmFtIGxpc3QgVGhlIGxpc3RlbmVyIGxpc3QuXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIGNhcHR1cmUgVGhlIGNhcHR1cmUgZmxhZy5cbiAqIEBwYXJhbSBwYXNzaXZlIFRoZSBwYXNzaXZlIGZsYWcuXG4gKiBAcGFyYW0gb25jZSBUaGUgb25jZSBmbGFnLlxuICogQHBhcmFtIHNpZ25hbCBUaGUgYWJvcnQgc2lnbmFsLlxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgY2FwdHVyZSwgcGFzc2l2ZSwgb25jZSwgc2lnbmFsKSB7XG4gICAgbGV0IHNpZ25hbExpc3RlbmVyO1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgc2lnbmFsTGlzdGVuZXIgPSByZW1vdmVMaXN0ZW5lci5iaW5kKG51bGwsIGxpc3QsIGNhbGxiYWNrLCBjYXB0dXJlKTtcbiAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBzaWduYWxMaXN0ZW5lcik7XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVyID0gY3JlYXRlTGlzdGVuZXIoY2FsbGJhY2ssIGNhcHR1cmUsIHBhc3NpdmUsIG9uY2UsIHNpZ25hbCwgc2lnbmFsTGlzdGVuZXIpO1xuICAgIGlmIChsaXN0LmNvdykge1xuICAgICAgICBsaXN0LmNvdyA9IGZhbHNlO1xuICAgICAgICBsaXN0Lmxpc3RlbmVycyA9IFsuLi5saXN0Lmxpc3RlbmVycywgbGlzdGVuZXJdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGlzdC5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJldHVybiBsaXN0ZW5lcjtcbn1cbi8qKlxuICogUmVtb3ZlIGEgbGlzdGVuZXIuXG4gKiBAcGFyYW0gbGlzdCBUaGUgbGlzdGVuZXIgbGlzdC5cbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmluZC5cbiAqIEBwYXJhbSBjYXB0dXJlIFRoZSBjYXB0dXJlIGZsYWcgdG8gZmluZC5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiBpdCBtdXRhdGVkIHRoZSBsaXN0IGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgY2FwdHVyZSkge1xuICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4T2ZMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgY2FwdHVyZSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlTGlzdGVuZXJBdChsaXN0LCBpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgbGlzdGVuZXIuXG4gKiBAcGFyYW0gbGlzdCBUaGUgbGlzdGVuZXIgbGlzdC5cbiAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHRhcmdldCBsaXN0ZW5lci5cbiAqIEBwYXJhbSBkaXNhYmxlQ293IERpc2FibGUgY29weS1vbi13cml0ZSBpZiB0cnVlLlxuICogQHJldHVybnMgYHRydWVgIGlmIGl0IG11dGF0ZWQgdGhlIGBsaXN0ZW5lcnNgIGFycmF5IGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lckF0KGxpc3QsIGluZGV4LCBkaXNhYmxlQ293ID0gZmFsc2UpIHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGxpc3QubGlzdGVuZXJzW2luZGV4XTtcbiAgICAvLyBTZXQgdGhlIHJlbW92ZWQgZmxhZy5cbiAgICBzZXRSZW1vdmVkKGxpc3RlbmVyKTtcbiAgICAvLyBEaXNwb3NlIHRoZSBhYm9ydCBzaWduYWwgbGlzdGVuZXIgaWYgZXhpc3RzLlxuICAgIGlmIChsaXN0ZW5lci5zaWduYWwpIHtcbiAgICAgICAgbGlzdGVuZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lci5zaWduYWxMaXN0ZW5lcik7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBpdCBmcm9tIHRoZSBhcnJheS5cbiAgICBpZiAobGlzdC5jb3cgJiYgIWRpc2FibGVDb3cpIHtcbiAgICAgICAgbGlzdC5jb3cgPSBmYWxzZTtcbiAgICAgICAgbGlzdC5saXN0ZW5lcnMgPSBsaXN0Lmxpc3RlbmVycy5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsaXN0Lmxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBgTGlzdGVuZXJMaXN0TWFwYCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyTGlzdE1hcCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbi8qKlxuICogR2V0IHRoZSBsaXN0ZW5lciBsaXN0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICogSWYgdGhlIGxpc3RlbmVyIGxpc3QgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLCBpbml0aWFsaXplIGFuZCByZXR1cm4gaXQuXG4gKiBAcGFyYW0gbGlzdGVuZXJNYXAgVGhlIGxpc3RlbmVyIGxpc3QgbWFwLlxuICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUgdG8gZ2V0LlxuICovXG5mdW5jdGlvbiBlbnN1cmVMaXN0ZW5lckxpc3QobGlzdGVuZXJNYXAsIHR5cGUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBsaXN0ZW5lck1hcFt0eXBlXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGxpc3RlbmVyTWFwW3R5cGVdID0ge1xuICAgICAgICBhdHRyQ2FsbGJhY2s6IHVuZGVmaW5lZCxcbiAgICAgICAgYXR0ckxpc3RlbmVyOiB1bmRlZmluZWQsXG4gICAgICAgIGNvdzogZmFsc2UsXG4gICAgICAgIGxpc3RlbmVyczogW10sXG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgRXZlbnRUYXJnZXRgIGludGVyZmFjZS5cbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNldmVudHRhcmdldFxuICovXG5jbGFzcyBFdmVudFRhcmdldCB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGlzIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpbnRlcm5hbERhdGFNYXAkMi5zZXQodGhpcywgY3JlYXRlTGlzdGVuZXJMaXN0TWFwKCkpO1xuICAgIH1cbiAgICAvLyBJbXBsZW1lbnRhdGlvblxuICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZTAsIGNhbGxiYWNrMCwgb3B0aW9uczApIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJNYXAgPSAkJDIodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2ssIGNhcHR1cmUsIG9uY2UsIHBhc3NpdmUsIHNpZ25hbCwgdHlwZSwgfSA9IG5vcm1hbGl6ZUFkZE9wdGlvbnModHlwZTAsIGNhbGxiYWNrMCwgb3B0aW9uczApO1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCB8fCAoc2lnbmFsID09PSBudWxsIHx8IHNpZ25hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lnbmFsLmFib3J0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdCA9IGVuc3VyZUxpc3RlbmVyTGlzdChsaXN0ZW5lck1hcCwgdHlwZSk7XG4gICAgICAgIC8vIEZpbmQgZXhpc3RpbmcgbGlzdGVuZXIuXG4gICAgICAgIGNvbnN0IGkgPSBmaW5kSW5kZXhPZkxpc3RlbmVyKGxpc3QsIGNhbGxiYWNrLCBjYXB0dXJlKTtcbiAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICB3YXJuRHVwbGljYXRlKGxpc3QubGlzdGVuZXJzW2ldLCBwYXNzaXZlLCBvbmNlLCBzaWduYWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCB0aGUgbmV3IGxpc3RlbmVyLlxuICAgICAgICBhZGRMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgY2FwdHVyZSwgcGFzc2l2ZSwgb25jZSwgc2lnbmFsKTtcbiAgICB9XG4gICAgLy8gSW1wbGVtZW50YXRpb25cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUwLCBjYWxsYmFjazAsIG9wdGlvbnMwKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyTWFwID0gJCQyKHRoaXMpO1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrLCBjYXB0dXJlLCB0eXBlIH0gPSBub3JtYWxpemVPcHRpb25zKHR5cGUwLCBjYWxsYmFjazAsIG9wdGlvbnMwKTtcbiAgICAgICAgY29uc3QgbGlzdCA9IGxpc3RlbmVyTWFwW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiBsaXN0KSB7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSW1wbGVtZW50YXRpb25cbiAgICBkaXNwYXRjaEV2ZW50KGUpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9ICQkMih0aGlzKVtTdHJpbmcoZS50eXBlKV07XG4gICAgICAgIGlmIChsaXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZSBpbnN0YW5jZW9mIEV2ZW50ID8gZSA6IEV2ZW50V3JhcHBlci53cmFwKGUpO1xuICAgICAgICBjb25zdCBldmVudERhdGEgPSAkKGV2ZW50LCBcImV2ZW50XCIpO1xuICAgICAgICBpZiAoZXZlbnREYXRhLmRpc3BhdGNoRmxhZykge1xuICAgICAgICAgICAgdGhyb3cgY3JlYXRlSW52YWxpZFN0YXRlRXJyb3IoXCJUaGlzIGV2ZW50IGhhcyBiZWVuIGluIGRpc3BhdGNoaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudERhdGEuZGlzcGF0Y2hGbGFnID0gdHJ1ZTtcbiAgICAgICAgZXZlbnREYXRhLnRhcmdldCA9IGV2ZW50RGF0YS5jdXJyZW50VGFyZ2V0ID0gdGhpcztcbiAgICAgICAgaWYgKCFldmVudERhdGEuc3RvcFByb3BhZ2F0aW9uRmxhZykge1xuICAgICAgICAgICAgY29uc3QgeyBjb3csIGxpc3RlbmVycyB9ID0gbGlzdDtcbiAgICAgICAgICAgIC8vIFNldCBjb3B5LW9uLXdyaXRlIGZsYWcuXG4gICAgICAgICAgICBsaXN0LmNvdyA9IHRydWU7XG4gICAgICAgICAgICAvLyBDYWxsIGxpc3RlbmVycy5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICAgICAgLy8gU2tpcCBpZiByZW1vdmVkLlxuICAgICAgICAgICAgICAgIGlmIChpc1JlbW92ZWQobGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyBsaXN0ZW5lciBpZiBoYXMgdGhlIGBvbmNlYCBmbGFnLlxuICAgICAgICAgICAgICAgIGlmIChpc09uY2UobGlzdGVuZXIpICYmIHJlbW92ZUxpc3RlbmVyQXQobGlzdCwgaSwgIWNvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB0aGlzIGxpc3RlbmVyIHdhcyByZW1vdmVkLCB0aGUgbmV4dCBpbmRleCBpcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gc2FtZSBhcyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoaXMgbGlzdGVuZXIgd2l0aCB0aGUgYHBhc3NpdmVgIGZsYWcuXG4gICAgICAgICAgICAgICAgZXZlbnREYXRhLmluUGFzc2l2ZUxpc3RlbmVyRmxhZyA9IGlzUGFzc2l2ZShsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sobGlzdGVuZXIsIHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICBldmVudERhdGEuaW5QYXNzaXZlTGlzdGVuZXJGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gU3RvcCBpZiB0aGUgYGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpYCBtZXRob2Qgd2FzIGNhbGxlZC5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnREYXRhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzdG9yZSBjb3B5LW9uLXdyaXRlIGZsYWcuXG4gICAgICAgICAgICBpZiAoIWNvdykge1xuICAgICAgICAgICAgICAgIGxpc3QuY293ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnREYXRhLnRhcmdldCA9IG51bGw7XG4gICAgICAgIGV2ZW50RGF0YS5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgZXZlbnREYXRhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWcgPSBmYWxzZTtcbiAgICAgICAgZXZlbnREYXRhLnN0b3BQcm9wYWdhdGlvbkZsYWcgPSBmYWxzZTtcbiAgICAgICAgZXZlbnREYXRhLmRpc3BhdGNoRmxhZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gIWV2ZW50RGF0YS5jYW5jZWxlZEZsYWc7XG4gICAgfVxufVxuLyoqXG4gKiBJbnRlcm5hbCBkYXRhLlxuICovXG5jb25zdCBpbnRlcm5hbERhdGFNYXAkMiA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEdldCBwcml2YXRlIGRhdGEuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSBldmVudCB0YXJnZXQgb2JqZWN0IHRvIGdldCBwcml2YXRlIGRhdGEuXG4gKiBAcGFyYW0gbmFtZSBUaGUgdmFyaWFibGUgbmFtZSB0byByZXBvcnQuXG4gKiBAcmV0dXJucyBUaGUgcHJpdmF0ZSBkYXRhIG9mIHRoZSBldmVudC5cbiAqL1xuZnVuY3Rpb24gJCQyKHRhcmdldCwgbmFtZSA9IFwidGhpc1wiKSB7XG4gICAgY29uc3QgcmV0diA9IGludGVybmFsRGF0YU1hcCQyLmdldCh0YXJnZXQpO1xuICAgIGFzc2VydFR5cGUocmV0diAhPSBudWxsLCBcIiclcycgbXVzdCBiZSBhbiBvYmplY3QgdGhhdCBFdmVudFRhcmdldCBjb25zdHJ1Y3RvciBjcmVhdGVkLCBidXQgZ290IGFub3RoZXIgb25lOiAlb1wiLCBuYW1lLCB0YXJnZXQpO1xuICAgIHJldHVybiByZXR2O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplQWRkT3B0aW9ucyh0eXBlLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBhc3NlcnRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyh0eXBlKSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdm9pZCAwID8gY2FsbGJhY2sgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnMuY2FwdHVyZSksXG4gICAgICAgICAgICBwYXNzaXZlOiBCb29sZWFuKG9wdGlvbnMucGFzc2l2ZSksXG4gICAgICAgICAgICBvbmNlOiBCb29sZWFuKG9wdGlvbnMub25jZSksXG4gICAgICAgICAgICBzaWduYWw6IChfYSA9IG9wdGlvbnMuc2lnbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyh0eXBlKSxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB2b2lkIDAgPyBjYWxsYmFjayA6IHVuZGVmaW5lZCxcbiAgICAgICAgY2FwdHVyZTogQm9vbGVhbihvcHRpb25zKSxcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIG9uY2U6IGZhbHNlLFxuICAgICAgICBzaWduYWw6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplT3B0aW9ucyh0eXBlLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGFzc2VydENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nKHR5cGUpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB2b2lkIDAgPyBjYWxsYmFjayA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNhcHR1cmU6IEJvb2xlYW4ob3B0aW9ucy5jYXB0dXJlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogU3RyaW5nKHR5cGUpLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2sgIT09IG51bGwgJiYgY2FsbGJhY2sgIT09IHZvaWQgMCA/IGNhbGxiYWNrIDogdW5kZWZpbmVkLFxuICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnMpLFxuICAgIH07XG59XG4vKipcbiAqIEFzc2VydCB0aGUgdHlwZSBvZiAnY2FsbGJhY2snIGFyZ3VtZW50LlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgY2FsbGJhY2sgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjYWxsYmFjay5oYW5kbGVFdmVudCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWxsYmFjayA9PSBudWxsIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBJbnZhbGlkRXZlbnRMaXN0ZW5lci53YXJuKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGZvcm1hdChJbnZhbGlkRXZlbnRMaXN0ZW5lci5tZXNzYWdlLCBbY2FsbGJhY2tdKSk7XG59XG4vKipcbiAqIFByaW50IHdhcm5pbmcgZm9yIGR1cGxpY2F0ZWQuXG4gKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGN1cnJlbnQgbGlzdGVuZXIgdGhhdCBpcyBkdXBsaWNhdGVkLlxuICogQHBhcmFtIHBhc3NpdmUgVGhlIHBhc3NpdmUgZmxhZyBvZiB0aGUgbmV3IGR1cGxpY2F0ZWQgbGlzdGVuZXIuXG4gKiBAcGFyYW0gb25jZSBUaGUgb25jZSBmbGFnIG9mIHRoZSBuZXcgZHVwbGljYXRlZCBsaXN0ZW5lci5cbiAqIEBwYXJhbSBzaWduYWwgVGhlIHNpZ25hbCBvYmplY3Qgb2YgdGhlIG5ldyBkdXBsaWNhdGVkIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiB3YXJuRHVwbGljYXRlKGxpc3RlbmVyLCBwYXNzaXZlLCBvbmNlLCBzaWduYWwpIHtcbiAgICBFdmVudExpc3RlbmVyV2FzRHVwbGljYXRlZC53YXJuKGlzQ2FwdHVyZShsaXN0ZW5lcikgPyBcImNhcHR1cmVcIiA6IFwiYnViYmxlXCIsIGxpc3RlbmVyLmNhbGxiYWNrKTtcbiAgICBpZiAoaXNQYXNzaXZlKGxpc3RlbmVyKSAhPT0gcGFzc2l2ZSkge1xuICAgICAgICBPcHRpb25XYXNJZ25vcmVkLndhcm4oXCJwYXNzaXZlXCIpO1xuICAgIH1cbiAgICBpZiAoaXNPbmNlKGxpc3RlbmVyKSAhPT0gb25jZSkge1xuICAgICAgICBPcHRpb25XYXNJZ25vcmVkLndhcm4oXCJvbmNlXCIpO1xuICAgIH1cbiAgICBpZiAobGlzdGVuZXIuc2lnbmFsICE9PSBzaWduYWwpIHtcbiAgICAgICAgT3B0aW9uV2FzSWdub3JlZC53YXJuKFwic2lnbmFsXCIpO1xuICAgIH1cbn1cbi8vIFNldCBlbnVtZXJhYmxlXG5jb25zdCBrZXlzJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhFdmVudFRhcmdldC5wcm90b3R5cGUpO1xuZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzJDEubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoa2V5cyQxW2ldID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudFRhcmdldC5wcm90b3R5cGUsIGtleXMkMVtpXSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufVxuLy8gRW5zdXJlIGBldmVudFRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudFRhcmdldGAgaXMgYHRydWVgLlxuaWYgKHR5cGVvZiBHbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgR2xvYmFsLkV2ZW50VGFyZ2V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwgR2xvYmFsLkV2ZW50VGFyZ2V0LnByb3RvdHlwZSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IHZhbHVlIG9mIGEgZ2l2ZW4gZXZlbnQgYXR0cmlidXRlLlxuICogQHBhcmFtIHRhcmdldCBUaGUgYEV2ZW50VGFyZ2V0YCBvYmplY3QgdG8gZ2V0LlxuICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50QXR0cmlidXRlVmFsdWUodGFyZ2V0LCB0eXBlKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBsaXN0TWFwID0gJCQyKHRhcmdldCwgXCJ0YXJnZXRcIik7XG4gICAgcmV0dXJuIChfYiA9IChfYSA9IGxpc3RNYXBbdHlwZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyQ2FsbGJhY2spICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG59XG4vKipcbiAqIFNldCBhbiBldmVudCBsaXN0ZW5lciB0byBhIGdpdmVuIGV2ZW50IGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB0YXJnZXQgVGhlIGBFdmVudFRhcmdldGAgb2JqZWN0IHRvIHNldC5cbiAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0eXBlLlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBldmVudCBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gc2V0RXZlbnRBdHRyaWJ1dGVWYWx1ZSh0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgSW52YWxpZEF0dHJpYnV0ZUhhbmRsZXIud2FybihjYWxsYmFjayk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICAodHlwZW9mIGNhbGxiYWNrID09PSBcIm9iamVjdFwiICYmIGNhbGxiYWNrICE9PSBudWxsKSkge1xuICAgICAgICB1cHNlcnRFdmVudEF0dHJpYnV0ZUxpc3RlbmVyKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRBdHRyaWJ1dGVMaXN0ZW5lcih0YXJnZXQsIHR5cGUpO1xuICAgIH1cbn1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBIZWxwZXJzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLyoqXG4gKiBVcGRhdGUgb3IgaW5zZXJ0IHRoZSBnaXZlbiBldmVudCBhdHRyaWJ1dGUgaGFuZGxlci5cbiAqIEBwYXJhbSB0YXJnZXQgVGhlIGBFdmVudFRhcmdldGAgb2JqZWN0IHRvIHNldC5cbiAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0eXBlLlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBldmVudCBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gdXBzZXJ0RXZlbnRBdHRyaWJ1dGVMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgbGlzdCA9IGVuc3VyZUxpc3RlbmVyTGlzdCgkJDIodGFyZ2V0LCBcInRhcmdldFwiKSwgU3RyaW5nKHR5cGUpKTtcbiAgICBsaXN0LmF0dHJDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGlmIChsaXN0LmF0dHJMaXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICAgIGxpc3QuYXR0ckxpc3RlbmVyID0gYWRkTGlzdGVuZXIobGlzdCwgZGVmaW5lRXZlbnRBdHRyaWJ1dGVDYWxsYmFjayhsaXN0KSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gZXZlbnQgYXR0cmlidXRlIGhhbmRsZXIuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSBgRXZlbnRUYXJnZXRgIG9iamVjdCB0byByZW1vdmUuXG4gKiBAcGFyYW0gdHlwZSBUaGUgZXZlbnQgdHlwZS5cbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZXZlbnQgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50QXR0cmlidXRlTGlzdGVuZXIodGFyZ2V0LCB0eXBlKSB7XG4gICAgY29uc3QgbGlzdE1hcCA9ICQkMih0YXJnZXQsIFwidGFyZ2V0XCIpO1xuICAgIGNvbnN0IGxpc3QgPSBsaXN0TWFwW1N0cmluZyh0eXBlKV07XG4gICAgaWYgKGxpc3QgJiYgbGlzdC5hdHRyTGlzdGVuZXIpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIobGlzdCwgbGlzdC5hdHRyTGlzdGVuZXIuY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgbGlzdC5hdHRyQ2FsbGJhY2sgPSBsaXN0LmF0dHJMaXN0ZW5lciA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG4vKipcbiAqIERlZmluZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBsaXN0ZW5lciBsaXN0IG9iamVjdC5cbiAqIEl0IGNhbGxzIGBhdHRyQ2FsbGJhY2tgIHByb3BlcnR5IGlmIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyBhIGZ1bmN0aW9uLlxuICogQHBhcmFtIGxpc3QgVGhlIGBMaXN0ZW5lckxpc3RgIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lRXZlbnRBdHRyaWJ1dGVDYWxsYmFjayhsaXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IGxpc3QuYXR0ckNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgYW4gYEV2ZW50VGFyZ2V0YCBjbGFzcyB0aGF0IGhhcyBldmVudCBhdHRpYnV0ZXMuXG4gKiBAcGFyYW0gdHlwZXMgVGhlIHR5cGVzIHRvIGRlZmluZSBldmVudCBhdHRyaWJ1dGVzLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBnZXRFdmVudEF0dHJpYnV0ZVZhbHVlYC9gc2V0RXZlbnRBdHRyaWJ1dGVWYWx1ZWAgcGFpciBvbiB5b3VyIGRlcml2ZWQgY2xhc3MgaW5zdGVhZCBiZWNhdXNlIG9mIHN0YXRpYyBhbmFseXNpcyBmcmllbmRseS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQoLi4udHlwZXMpIHtcbiAgICBjbGFzcyBDdXN0b21FdmVudFRhcmdldCBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBkZWZpbmVFdmVudEF0dHJpYnV0ZShDdXN0b21FdmVudFRhcmdldC5wcm90b3R5cGUsIHR5cGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIEN1c3RvbUV2ZW50VGFyZ2V0O1xufVxuLyoqXG4gKiBEZWZpbmUgYW4gZXZlbnQgYXR0cmlidXRlLlxuICogQHBhcmFtIHRhcmdldCBUaGUgYEV2ZW50VGFyZ2V0YCBvYmplY3QgdG8gZGVmaW5lIGFuIGV2ZW50IGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0eXBlIHRvIGRlZmluZS5cbiAqIEBwYXJhbSBfZXZlbnRDbGFzcyBVbnVzZWQsIGJ1dCB0byBpbmZlciBgRXZlbnRgIGNsYXNzIHR5cGUuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGdldEV2ZW50QXR0cmlidXRlVmFsdWVgL2BzZXRFdmVudEF0dHJpYnV0ZVZhbHVlYCBwYWlyIG9uIHlvdXIgZGVyaXZlZCBjbGFzcyBpbnN0ZWFkIGJlY2F1c2Ugb2Ygc3RhdGljIGFuYWx5c2lzIGZyaWVuZGx5LlxuICovXG5mdW5jdGlvbiBkZWZpbmVFdmVudEF0dHJpYnV0ZSh0YXJnZXQsIHR5cGUsIF9ldmVudENsYXNzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYG9uJHt0eXBlfWAsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEV2ZW50QXR0cmlidXRlVmFsdWUodGhpcywgdHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgc2V0RXZlbnRBdHRyaWJ1dGVWYWx1ZSh0aGlzLCB0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRUYXJnZXQ7XG5leHBvcnQgeyBFdmVudCwgRXZlbnRUYXJnZXQsIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0LCBkZWZpbmVFdmVudEF0dHJpYnV0ZSwgZ2V0RXZlbnRBdHRyaWJ1dGVWYWx1ZSwgc2V0RXJyb3JIYW5kbGVyLCBzZXRFdmVudEF0dHJpYnV0ZVZhbHVlLCBzZXRXYXJuaW5nSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ2FsZW5kYXJFdmVudCB9IGZyb20gXCIuL0NhbGVuZGFyRXZlbnRcIjtcclxuXHJcbmNvbnN0IE1PTlRIUyA9IFtcclxuICAnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsXHJcbiAgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ1xyXG5dO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50c0ZvckRheShldmVudHM6IENhbGVuZGFyRXZlbnRbXSwgZGF0ZTogRGF0ZSk6IENhbGVuZGFyRXZlbnRbXSB7XHJcbiAgcmV0dXJuIGV2ZW50cy5maWx0ZXIoZXZlbnQgPT4ge1xyXG4gICAgcmV0dXJuIGV2ZW50LmRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZS5nZXRGdWxsWWVhcigpICYmXHJcbiAgICAgIGV2ZW50LmRhdGUuZ2V0TW9udGgoKSA9PT0gZGF0ZS5nZXRNb250aCgpICYmXHJcbiAgICAgIGV2ZW50LmRhdGUuZ2V0RGF0ZSgpID09PSBkYXRlLmdldERhdGUoKTtcclxuICB9KS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAvLyBJZiBvbmUgaGFzIG5vIHRpbWUgcHJvcGVydHksIGl0IHNob3VsZCBiZSBmaXJzdC5cclxuICAgIC8vIElmIGJvdGggaGF2ZSBubyB0aW1lLCBubyBzb3J0aW5nIGlzIG5lZWRlZC5cclxuICAgIGlmICghYS50aW1lICYmICEhYi50aW1lKSB7XHJcbiAgICAgIHJldHVybiAtMTtcclxuICAgIH0gZWxzZSBpZiAoISFhLnRpbWUgJiYgIWIudGltZSkge1xyXG4gICAgICByZXR1cm4gMTtcclxuICAgIH0gZWxzZSBpZiAoIWEudGltZSAmJiAhYi50aW1lKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvcnQgdGhlIGV2ZW50cyBieSB0aW1lLiBUaW1lcyBhcmUgc3RyaW5ncyBpbiAyNFxyXG4gICAgLy8gZm9ybWF0cywgc28ganVzdCByZW1vdmUgdGhlIGxlYWRpbmcgMCwgaWYgYW55LCBhbmRcclxuICAgIC8vIHRoZSBjb2xvbiwgYW5kIGNvbXBhcmUgdGhlIG51bWJlcnMuXHJcbiAgICBjb25zdCBhVGltZSA9IHBhcnNlSW50KGEudGltZS5yZXBsYWNlKC9eMC8sICcnKS5yZXBsYWNlKCc6JywgJycpKTtcclxuICAgIGNvbnN0IGJUaW1lID0gcGFyc2VJbnQoYi50aW1lLnJlcGxhY2UoL14wLywgJycpLnJlcGxhY2UoJzonLCAnJykpO1xyXG4gICAgcmV0dXJuIGFUaW1lIC0gYlRpbWU7XHJcbiAgfSkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgLy8gU29ydCB0aGUgZXZlbnRzIHRoYXQgYXJlIG11bHRpLWRheXMgZmlyc3QuXHJcbiAgICBpZiAoISFhLm11bHRpRGF5cyAmJiAhYi5tdWx0aURheXMpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfSBlbHNlIGlmICghYS5tdWx0aURheXMgJiYgISFiLm11bHRpRGF5cykge1xyXG4gICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1vbnRoWWVhcihkYXRlOiBEYXRlKTogc3RyaW5nIHtcclxuICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcclxuICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gIHJldHVybiBgJHtNT05USFNbbW9udGhdfSAke3llYXJ9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5Ccm93c2VyU2lkZVBhbmVsKCk6IGJvb2xlYW4ge1xyXG4gIC8vIEB0cy1pZ25vcmVcclxuICByZXR1cm4gISFuYXZpZ2F0b3IudXNlckFnZW50RGF0YSAmJiBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5icmFuZHMuc29tZShicmFuZCA9PiB7XHJcbiAgICByZXR1cm4gYnJhbmQuYnJhbmQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInNpZGUgcGFuZWxcIik7XHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRUYXJnZXQsIEV2ZW50IH0gZnJvbSBcImV2ZW50LXRhcmdldC1zaGltXCI7XHJcbmltcG9ydCB7IENhbGVuZGFyRXZlbnQgfSBmcm9tIFwiLi9DYWxlbmRhckV2ZW50XCI7XHJcbmltcG9ydCB7IGdldEV2ZW50c0ZvckRheSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5jb25zdCBEQVlTID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vbnRoR3JpZCBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcclxuICBwcml2YXRlIHJvb3RFbDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBfZGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgcHJpdmF0ZSBfZXZlbnRzOiBDYWxlbmRhckV2ZW50W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEhUTUxFbGVtZW50LCBkYXRlOiBEYXRlLCBldmVudHM6IENhbGVuZGFyRXZlbnRbXSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnJvb3RFbCA9IGVsO1xyXG4gICAgdGhpcy5fZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLl9ldmVudHMgPSBldmVudHM7XHJcblxyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcbiAgXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5yb290RWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgY29uc3QgbW9udGggPSB0aGlzLl9kYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCB5ZWFyID0gdGhpcy5fZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gIFxyXG4gICAgY29uc3QgZmlyc3REYXkgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XHJcbiAgICBjb25zdCBsYXN0RGF5ID0gbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCAwKTtcclxuICBcclxuICAgIGNvbnN0IGZpcnN0V2Vla2RheSA9IGZpcnN0RGF5LmdldERheSgpO1xyXG4gICAgY29uc3QgbGFzdFdlZWtkYXkgPSBsYXN0RGF5LmdldERheSgpO1xyXG4gICAgY29uc3QgZGF5c0luTW9udGggPSBsYXN0RGF5LmdldERhdGUoKTtcclxuICAgIGNvbnN0IGRheXNJbkxhc3RNb250aCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAwKS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBkYXlzOiB7ZGF0ZTogRGF0ZSwgaHRtbDogc3RyaW5nfVtdID0gW107XHJcbiAgXHJcbiAgICBsZXQgaW5kZXhJbkdyaWQgPSAwO1xyXG5cclxuICAgIC8vIERheXMgZnJvbSBsYXN0IG1vbnRoXHJcbiAgICBmb3IgKGxldCBpID0gZGF5c0luTGFzdE1vbnRoIC0gZmlyc3RXZWVrZGF5ICsgMTsgaSA8PSBkYXlzSW5MYXN0TW9udGg7IGkrKykge1xyXG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBpKTtcclxuICAgICAgZGF5cy5wdXNoKHtkYXRlLCBodG1sOiB0aGlzLnJlbmRlckRheShkYXRlLCBpLCBpbmRleEluR3JpZCwgJ3ByZXYtbW9udGgnKX0pO1xyXG4gICAgICBpbmRleEluR3JpZCsrO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gRGF5cyBmcm9tIHRoaXMgbW9udGhcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGRheXNJbk1vbnRoOyBpKyspIHtcclxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBpKTtcclxuICAgICAgZGF5cy5wdXNoKHtkYXRlLCBodG1sOiB0aGlzLnJlbmRlckRheShkYXRlLCBpLCBpbmRleEluR3JpZCl9KTtcclxuICAgICAgaW5kZXhJbkdyaWQrKztcclxuICAgIH1cclxuICBcclxuICAgIC8vIERheXMgZnJvbSBuZXh0IG1vbnRoXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA3IC0gbGFzdFdlZWtkYXkgLSAxOyBpKyspIHtcclxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgaSk7XHJcbiAgICAgIGRheXMucHVzaCh7ZGF0ZSwgaHRtbDogdGhpcy5yZW5kZXJEYXkoZGF0ZSwgaSwgaW5kZXhJbkdyaWQsICduZXh0LW1vbnRoJyl9KTtcclxuICAgICAgaW5kZXhJbkdyaWQrKztcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IHtkYXRlLCBodG1sfSBvZiBkYXlzKSB7XHJcbiAgICAgIHRoaXMucm9vdEVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbCk7XHJcbiAgICAgIGNvbnN0IGRheUVsID0gdGhpcy5yb290RWwubGFzdEVsZW1lbnRDaGlsZCBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgICAgIGRheUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZGF5LWNsaWNrZWQnLCB7ZGV0YWlsOiBkYXRlfSkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVwZGF0ZU5vd01hcmtlcigpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyRGF5KGRhdGU6IERhdGUsIGRheU51bWJlcjogbnVtYmVyLCBpbmRleEluR3JpZDogbnVtYmVyLCBjbGFzc05hbWU6IHN0cmluZyA9ICcnKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50c0ZvckRheSh0aGlzLl9ldmVudHMsIGRhdGUpO1xyXG4gICAgY29uc3QgaXNUb2RheSA9IGRhdGUudG9EYXRlU3RyaW5nKCkgPT09IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCk7XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPGRpdiBjbGFzcz1cImRheSAke2lzVG9kYXkgPyAndG9kYXknIDogJyd9ICR7Y2xhc3NOYW1lfVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGF5LW5hbWVcIj4ke0RBWVNbZGF0ZS5nZXREYXkoKV19PC9zcGFuPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkYXktbnVtYmVyXCI+JHtkYXlOdW1iZXJ9PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDx1bCBjbGFzcz1cImV2ZW50c1wiPlxyXG4gICAgICAgICAgJHtldmVudHMubWFwKGV2ZW50ID0+IGV2ZW50LmFzT25lTGluZUhUTUwoaW5kZXhJbkdyaWQpKS5qb2luKCcnKX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVOb3dNYXJrZXIoKSB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgdGltZSA9IG5vdy5nZXRIb3VycygpICogMTAwICsgbm93LmdldE1pbnV0ZXMoKTtcclxuICAgIGNvbnN0IHJhdGlvID0gdGltZSAqIDEwMCAvIDI0MDA7XHJcblxyXG4gICAgLy8gRm9yY2luZyBhIHN5bmMgcmVmbG93IGhlcmUgYnkgcXVlcnlpbmcgdGhlIG9mZnNldEhlaWdodCBvZiB0aGUgZGF5IGNlbGwuXHJcbiAgICAvLyBDb3VsZCBqdXN0IHNldCB0aGUgJSB2YWx1ZSBkaXJlY3RseSBpbnN0ZWFkLlxyXG4gICAgY29uc3QgZGF5RWwgPSB0aGlzLnJvb3RFbC5xdWVyeVNlbGVjdG9yKCcuZGF5LnRvZGF5JykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBpZiAoZGF5RWwpIHtcclxuICAgICAgY29uc3QgcHhIZWlnaHQgPSBkYXlFbC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IG1hcmtlckhlaWdodCA9IHB4SGVpZ2h0ICogcmF0aW8gLyAxMDA7XHJcblxyXG4gICAgICB0aGlzLnJvb3RFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ub3ctbWFya2VyJywgYCR7bWFya2VySGVpZ2h0fXB4YCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZU5vd01hcmtlcigpLCAxMDAwKTtcclxuICB9XHJcblxyXG4gIHNldCBkYXRlKGRhdGU6IERhdGUpIHtcclxuICAgIHRoaXMuX2RhdGUgPSBkYXRlO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHNldCBldmVudHMoZXZlbnRzOiBDYWxlbmRhckV2ZW50W10pIHtcclxuICAgIHRoaXMuX2V2ZW50cyA9IGV2ZW50cztcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEV2ZW50VGFyZ2V0LCBFdmVudCB9IGZyb20gXCJldmVudC10YXJnZXQtc2hpbVwiO1xyXG5pbXBvcnQgeyBmb3JtYXRNb250aFllYXIgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBFdmVudFRhcmdldCB7XHJcbiAgcHJpdmF0ZSByb290RWw6IEhUTUxFbGVtZW50O1xyXG4gIHByaXZhdGUgX2RhdGU6IERhdGU7XHJcbiAgcHJpdmF0ZSBzZWxlY3RlZE1vZGU6IHN0cmluZyA9IFwibW9udGhcIjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQsIGRhdGU6IERhdGUsIG1vZGU6IHN0cmluZykge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnJvb3RFbCA9IGVsO1xyXG4gICAgdGhpcy5fZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLnNlbGVjdGVkTW9kZSA9IG1vZGU7XHJcblxyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMucm9vdEVsLmlubmVySFRNTCA9IGBcclxuICAgICAgPGJ1dHRvbiBpZD1cInByZXYtbW9udGhcIj5QcmV2PC9idXR0b24+XHJcbiAgICAgIDxidXR0b24gaWQ9XCJ0b2RheVwiIGNsYXNzPVwicHJpbWFyeVwiPlRvZGF5PC9idXR0b24+XHJcbiAgICAgIDxidXR0b24gaWQ9XCJuZXh0LW1vbnRoXCI+TmV4dDwvYnV0dG9uPlxyXG4gICAgICA8c3BhbiBpZD1cIm1vbnRoLXllYXJcIj4ke2Zvcm1hdE1vbnRoWWVhcih0aGlzLl9kYXRlKX08L3NwYW4+XHJcbiAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwidmlld1wiIGlkPVwibW9udGgtdmlld1wiICR7dGhpcy5zZWxlY3RlZE1vZGUgPT09IFwibW9udGhcIiA/IFwiY2hlY2tlZFwiIDogXCJcIn0+XHJcbiAgICAgIDxsYWJlbCBmb3I9XCJtb250aC12aWV3XCI+TW9udGg8L2xhYmVsPlxyXG4gICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInZpZXdcIiBpZD1cIndlZWstdmlld1wiICR7dGhpcy5zZWxlY3RlZE1vZGUgPT09IFwid2Vla1wiID8gXCJjaGVja2VkXCIgOiBcIlwifT5cclxuICAgICAgPGxhYmVsIGZvcj1cIndlZWstdmlld1wiPldlZWs8L2xhYmVsPiAgICAgIFxyXG4gICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInZpZXdcIiBpZD1cImRheS12aWV3XCIgJHt0aGlzLnNlbGVjdGVkTW9kZSA9PT0gXCJkYXlcIiA/IFwiY2hlY2tlZFwiIDogXCJcIn0+XHJcbiAgICAgIDxsYWJlbCBmb3I9XCJkYXktdmlld1wiPkRheTwvbGFiZWw+ICAgICAgXHJcbiAgICBgO1xyXG5cclxuICAgIHRoaXMucm9vdEVsLnF1ZXJ5U2VsZWN0b3IoJyNwcmV2LW1vbnRoJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBQcmV2ICR7dGhpcy5zZWxlY3RlZE1vZGV9IGNsaWNrZWRgKTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncHJldicpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucm9vdEVsLnF1ZXJ5U2VsZWN0b3IoJyNuZXh0LW1vbnRoJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBOZXh0ICR7dGhpcy5zZWxlY3RlZE1vZGV9IGNsaWNrZWRgKTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbmV4dCcpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucm9vdEVsLnF1ZXJ5U2VsZWN0b3IoJyN0b2RheScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlRvZGF5IGNsaWNrZWRcIik7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3RvZGF5JykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yb290RWwucXVlcnlTZWxlY3RvcignI21vbnRoLXZpZXcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJNb250aCB2aWV3IGNsaWNrZWRcIik7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ21vbnRoLXZpZXcnKSk7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRNb2RlID0gXCJtb250aFwiO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yb290RWwucXVlcnlTZWxlY3RvcignI3dlZWstdmlldycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIldlZWsgdmlldyBjbGlja2VkXCIpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd3ZWVrLXZpZXcnKSk7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRNb2RlID0gXCJ3ZWVrXCI7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJvb3RFbC5xdWVyeVNlbGVjdG9yKCcjZGF5LXZpZXcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJEYXkgdmlldyBjbGlja2VkXCIpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdkYXktdmlldycpKTtcclxuICAgICAgdGhpcy5zZWxlY3RlZE1vZGUgPSBcImRheVwiO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXQgZGF0ZShkYXRlOiBEYXRlKSB7XHJcbiAgICB0aGlzLl9kYXRlID0gZGF0ZTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENhbGVuZGFyRXZlbnQgfSBmcm9tIFwiLi9DYWxlbmRhckV2ZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lkZWJhciB7XHJcbiAgcHJpdmF0ZSByb290RWw6IEhUTUxFbGVtZW50O1xyXG4gIHByaXZhdGUgX2V2ZW50czogQ2FsZW5kYXJFdmVudFtdID0gW107XHJcbiAgcHJpdmF0ZSBfZGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEhUTUxFbGVtZW50LCBkYXRlOiBEYXRlLCBldmVudHM6IENhbGVuZGFyRXZlbnRbXSkge1xyXG4gICAgdGhpcy5yb290RWwgPSBlbDtcclxuICAgIHRoaXMuX2RhdGUgPSBkYXRlO1xyXG4gICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xyXG5cclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMucm9vdEVsLmlubmVySFRNTCA9IGBcclxuICAgICAgPGgyPkNsaWNrIGEgZGF5IHRvIHZpZXcgZXZlbnRzPC9oMj5cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9ldmVudHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJvb3RFbC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICB1bC5jbGFzc05hbWUgPSAnZXZlbnRzJztcclxuICAgIHRoaXMucm9vdEVsLmFwcGVuZENoaWxkKHVsKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHRoaXMuX2V2ZW50cykge1xyXG4gICAgICB1bC5pbm5lckhUTUwgKz0gZXZlbnQuYXNGdWxsSFRNTCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IGV2ZW50cyhldmVudHM6IENhbGVuZGFyRXZlbnRbXSkge1xyXG4gICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRUYXJnZXQsIEV2ZW50IH0gZnJvbSBcImV2ZW50LXRhcmdldC1zaGltXCI7XHJcbmltcG9ydCB7IENhbGVuZGFyRXZlbnQgfSBmcm9tIFwiLi9DYWxlbmRhckV2ZW50XCI7XHJcbmltcG9ydCB7IGdldEV2ZW50c0ZvckRheSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5jb25zdCBEQVlTID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdlZWtHcmlkIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xyXG4gIHByaXZhdGUgcm9vdEVsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIF9kYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcclxuICBwcml2YXRlIF9ldmVudHM6IENhbGVuZGFyRXZlbnRbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQsIGRhdGU6IERhdGUsIGV2ZW50czogQ2FsZW5kYXJFdmVudFtdKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMucm9vdEVsID0gZWw7XHJcbiAgICB0aGlzLl9kYXRlID0gZGF0ZTtcclxuICAgIHRoaXMuX2V2ZW50cyA9IGV2ZW50cztcclxuXHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuICBcclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLnJvb3RFbC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAvLyBGaW5kIHRoZSBkYXRlcyB0aGF0IG1ha2UgdGhlIHdlZWsgYXJvdW5kIHRoaXMuX2RhdGUuXHJcbiAgICBjb25zdCBtb250aCA9IHRoaXMuX2RhdGUuZ2V0TW9udGgoKTtcclxuICAgIGNvbnN0IHllYXIgPSB0aGlzLl9kYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBkYXRlID0gdGhpcy5fZGF0ZS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBkYXkgPSB0aGlzLl9kYXRlLmdldERheSgpO1xyXG5cclxuICAgIGNvbnN0IGZpcnN0RGF5ID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgLSBkYXkpO1xyXG5cclxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgZGF0ZXMgYW5kIHJlbmRlciB0aGUgZGF5cy5cclxuICAgIGNvbnN0IGRheXM6IHtkYXRlOiBEYXRlLCBodG1sOiBzdHJpbmd9W10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZmlyc3REYXkuZ2V0RGF0ZSgpICsgaSk7XHJcbiAgICAgIHRoaXMucm9vdEVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5yZW5kZXJEYXkoZGF0ZSwgZGF0ZS5nZXREYXRlKCkpKTtcclxuXHJcbiAgICAgIGNvbnN0IGRheUVsID0gdGhpcy5yb290RWwubGFzdEVsZW1lbnRDaGlsZCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgZGF5RWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkYXktY2xpY2tlZCcsIHtkZXRhaWw6IGRhdGV9KSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXBkYXRlTm93TWFya2VyKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJEYXkoZGF0ZTogRGF0ZSwgZGF5TnVtYmVyOiBudW1iZXIsIGNsYXNzTmFtZTogc3RyaW5nID0gJycpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnRzRm9yRGF5KHRoaXMuX2V2ZW50cywgZGF0ZSk7XHJcbiAgICBjb25zdCBpc1RvZGF5ID0gZGF0ZS50b0RhdGVTdHJpbmcoKSA9PT0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcclxuXHJcbiAgICByZXR1cm4gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZGF5ICR7aXNUb2RheSA/ICd0b2RheScgOiAnJ30gJHtjbGFzc05hbWV9XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkYXktbmFtZVwiPiR7REFZU1tkYXRlLmdldERheSgpXX08L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImRheS1udW1iZXJcIj4ke2RheU51bWJlcn08L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHVsIGNsYXNzPVwiZXZlbnRzXCI+XHJcbiAgICAgICAgICAke2V2ZW50cy5tYXAoZXZlbnQgPT4gZXZlbnQuYXNNZWRpdW1MZW5ndGhIVE1MKCkpLmpvaW4oJycpfVxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZU5vd01hcmtlcigpIHtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCB0aW1lID0gbm93LmdldEhvdXJzKCkgKiAxMDAgKyBub3cuZ2V0TWludXRlcygpO1xyXG4gICAgY29uc3QgcmF0aW8gPSB0aW1lICogMTAwIC8gMjQwMDtcclxuXHJcbiAgICAvLyBGb3JjaW5nIGEgc3luYyByZWZsb3cgaGVyZSBieSBxdWVyeWluZyB0aGUgb2Zmc2V0SGVpZ2h0IG9mIHRoZSBkYXkgY2VsbC5cclxuICAgIC8vIENvdWxkIGp1c3Qgc2V0IHRoZSAlIHZhbHVlIGRpcmVjdGx5IGluc3RlYWQuXHJcbiAgICBjb25zdCBkYXlFbCA9IHRoaXMucm9vdEVsLnF1ZXJ5U2VsZWN0b3IoJy5kYXkudG9kYXknKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGlmIChkYXlFbCkge1xyXG4gICAgICBjb25zdCBweEhlaWdodCA9IGRheUVsLm9mZnNldEhlaWdodDtcclxuICAgICAgY29uc3QgbWFya2VySGVpZ2h0ID0gcHhIZWlnaHQgKiByYXRpbyAvIDEwMDtcclxuXHJcbiAgICAgIHRoaXMucm9vdEVsLnN0eWxlLnNldFByb3BlcnR5KCctLW5vdy1tYXJrZXInLCBgJHttYXJrZXJIZWlnaHR9cHhgKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlTm93TWFya2VyKCksIDEwMDApO1xyXG4gIH1cclxuXHJcbiAgc2V0IGRhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgdGhpcy5fZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgc2V0IGV2ZW50cyhldmVudHM6IENhbGVuZGFyRXZlbnRbXSkge1xyXG4gICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRUYXJnZXQsIEV2ZW50IH0gZnJvbSBcImV2ZW50LXRhcmdldC1zaGltXCI7XHJcbmltcG9ydCB7IENhbGVuZGFyRXZlbnQgfSBmcm9tIFwiLi9DYWxlbmRhckV2ZW50XCI7XHJcbmltcG9ydCB7IGdldEV2ZW50c0ZvckRheSwgZm9ybWF0TW9udGhZZWFyIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IE1PTlRIUyA9IFtcclxuICAnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsXHJcbiAgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywnRGVjZW1iZXInXHJcbl07XHJcbmNvbnN0IERBWVMgPSBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J107XHJcblxyXG5leHBvcnQgY2xhc3MgRGF5R3JpZCBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcclxuICBwcml2YXRlIHJvb3RFbDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBfZGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgcHJpdmF0ZSBfZXZlbnRzOiBDYWxlbmRhckV2ZW50W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEhUTUxFbGVtZW50LCBkYXRlOiBEYXRlLCBldmVudHM6IENhbGVuZGFyRXZlbnRbXSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnJvb3RFbCA9IGVsO1xyXG4gICAgdGhpcy5fZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLl9ldmVudHMgPSBldmVudHM7XHJcblxyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50c0ZvckRheSh0aGlzLl9ldmVudHMsIHRoaXMuX2RhdGUpO1xyXG5cclxuICAgIHRoaXMucm9vdEVsLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cImRheVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJcIj5cclxuICAgICAgICAgICR7REFZU1t0aGlzLl9kYXRlLmdldERheSgpXX0sICR7dGhpcy5fZGF0ZS5nZXREYXRlKCl9LCAke2Zvcm1hdE1vbnRoWWVhcih0aGlzLl9kYXRlKX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8dWwgY2xhc3M9XCJldmVudHNcIj5cclxuICAgICAgICAgICR7ZXZlbnRzLm1hcChldmVudCA9PiBldmVudC5hc01lZGl1bUxlbmd0aEhUTUwoKSkuam9pbignJyl9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG5cclxuICAgIHRoaXMudXBkYXRlTm93TWFya2VyKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVOb3dNYXJrZXIoKSB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgdGltZSA9IG5vdy5nZXRIb3VycygpICogMTAwICsgbm93LmdldE1pbnV0ZXMoKTtcclxuICAgIGNvbnN0IHJhdGlvID0gdGltZSAqIDEwMCAvIDI0MDA7XHJcblxyXG4gICAgLy8gRm9yY2luZyBhIHN5bmMgcmVmbG93IGhlcmUgYnkgcXVlcnlpbmcgdGhlIG9mZnNldEhlaWdodCBvZiB0aGUgZGF5IGNlbGwuXHJcbiAgICAvLyBDb3VsZCBqdXN0IHNldCB0aGUgJSB2YWx1ZSBkaXJlY3RseSBpbnN0ZWFkLlxyXG4gICAgY29uc3QgZGF5RWwgPSB0aGlzLnJvb3RFbC5xdWVyeVNlbGVjdG9yKCcuZGF5LnRvZGF5JykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBpZiAoZGF5RWwpIHtcclxuICAgICAgY29uc3QgcHhIZWlnaHQgPSBkYXlFbC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IG1hcmtlckhlaWdodCA9IHB4SGVpZ2h0ICogcmF0aW8gLyAxMDA7XHJcblxyXG4gICAgICB0aGlzLnJvb3RFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ub3ctbWFya2VyJywgYCR7bWFya2VySGVpZ2h0fXB4YCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZU5vd01hcmtlcigpLCAxMDAwKTtcclxuICB9XHJcblxyXG4gIHNldCBkYXRlKGRhdGU6IERhdGUpIHtcclxuICAgIHRoaXMuX2RhdGUgPSBkYXRlO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHNldCBldmVudHMoZXZlbnRzOiBDYWxlbmRhckV2ZW50W10pIHtcclxuICAgIHRoaXMuX2V2ZW50cyA9IGV2ZW50cztcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEV2ZW50VGFyZ2V0LCBFdmVudCB9IGZyb20gXCJldmVudC10YXJnZXQtc2hpbVwiO1xyXG5pbXBvcnQgeyBDYWxlbmRhckV2ZW50IH0gZnJvbSBcIi4vQ2FsZW5kYXJFdmVudFwiO1xyXG5pbXBvcnQgeyBNb250aEdyaWQgfSBmcm9tIFwiLi9Nb250aEdyaWRcIjtcclxuaW1wb3J0IHsgVG9vbGJhciB9IGZyb20gXCIuL1Rvb2xiYXJcIjtcclxuaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gXCIuL1NpZGViYXJcIjtcclxuaW1wb3J0IHsgZ2V0RXZlbnRzRm9yRGF5LCBpc0luQnJvd3NlclNpZGVQYW5lbCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IFdlZWtHcmlkIH0gZnJvbSBcIi4vV2Vla0dyaWRcIjtcclxuaW1wb3J0IHsgRGF5R3JpZCB9IGZyb20gXCIuL0RheUdyaWRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHBVSSBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcclxuICBwcml2YXRlIHJvb3RFbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgbW9udGhHcmlkRWw6IEhUTUxFbGVtZW50O1xyXG4gIHB1YmxpYyBtb250aEdyaWQ6IE1vbnRoR3JpZDtcclxuXHJcbiAgcHJpdmF0ZSB3ZWVrR3JpZEVsOiBIVE1MRWxlbWVudDtcclxuICBwdWJsaWMgd2Vla0dyaWQ6IFdlZWtHcmlkO1xyXG5cclxuICBwcml2YXRlIGRheUdyaWRFbDogSFRNTEVsZW1lbnQ7XHJcbiAgcHVibGljIGRheUdyaWQ6IERheUdyaWQ7XHJcblxyXG4gIHByaXZhdGUgdG9vbGJhckVsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIHRvb2xiYXI6IFRvb2xiYXI7XHJcblxyXG4gIHByaXZhdGUgc2lkZWJhckVsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIHNpZGViYXI6IFNpZGViYXI7XHJcblxyXG4gIHByaXZhdGUgX2RhdGU6IERhdGU7XHJcbiAgcHJpdmF0ZSBfZXZlbnRzOiBDYWxlbmRhckV2ZW50W107XHJcblxyXG4gIHByaXZhdGUgbW9kZTogc3RyaW5nID0gXCJtb250aFwiO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbDogSFRNTEVsZW1lbnQsIGRhdGU6IERhdGUsIG1vZGU6IHN0cmluZywgZXZlbnRzOiBDYWxlbmRhckV2ZW50W10pIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5yb290RWwgPSBlbDtcclxuICAgIHRoaXMuX2RhdGUgPSBkYXRlO1xyXG4gICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgdGhpcy5tb2RlID0gbW9kZTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5yb290RWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgaWYgKCFpc0luQnJvd3NlclNpZGVQYW5lbCgpKSB7XHJcbiAgICAgIC8vIENyZWF0ZSBhbiBlbGVtZW50IGZvciB0aGUgdG9vbGJhci5cclxuICAgICAgdGhpcy50b29sYmFyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy50b29sYmFyRWwuaWQgPSAndG9vbGJhcic7XHJcbiAgICAgIHRoaXMucm9vdEVsLmFwcGVuZENoaWxkKHRoaXMudG9vbGJhckVsKTtcclxuXHJcbiAgICAgIC8vIEluaXQgdGhlIHRvb2xiYXIgY29tcG9uZW50IGluIGl0LlxyXG4gICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcih0aGlzLnRvb2xiYXJFbCwgdGhpcy5fZGF0ZSwgdGhpcy5tb2RlKTtcclxuXHJcbiAgICAgIHRoaXMudG9vbGJhci5hZGRFdmVudExpc3RlbmVyKCdwcmV2JywgKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFwibW9udGhcIikge1xyXG4gICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUodGhpcy5fZGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLl9kYXRlLmdldE1vbnRoKCkgLSAxLCAxKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gXCJ3ZWVrXCIpIHtcclxuICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKHRoaXMuX2RhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5fZGF0ZS5nZXRNb250aCgpLCB0aGlzLl9kYXRlLmdldERhdGUoKSAtIDcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSh0aGlzLl9kYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMuX2RhdGUuZ2V0TW9udGgoKSwgdGhpcy5fZGF0ZS5nZXREYXRlKCkgLSAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkYXRlLWNoYW5nZWQnLCB7IGRldGFpbDogdGhpcy5fZGF0ZSB9KSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy50b29sYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ25leHQnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gXCJtb250aFwiKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSh0aGlzLl9kYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMuX2RhdGUuZ2V0TW9udGgoKSArIDEsIDEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBcIndlZWtcIikge1xyXG4gICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUodGhpcy5fZGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLl9kYXRlLmdldE1vbnRoKCksIHRoaXMuX2RhdGUuZ2V0RGF0ZSgpICsgNyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKHRoaXMuX2RhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5fZGF0ZS5nZXRNb250aCgpLCB0aGlzLl9kYXRlLmdldERhdGUoKSArIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2RhdGUtY2hhbmdlZCcsIHsgZGV0YWlsOiB0aGlzLl9kYXRlIH0pKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnRvb2xiYXIuYWRkRXZlbnRMaXN0ZW5lcigndG9kYXknLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2RhdGUtY2hhbmdlZCcsIHsgZGV0YWlsOiB0aGlzLl9kYXRlIH0pKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnRvb2xiYXIuYWRkRXZlbnRMaXN0ZW5lcignbW9udGgtdmlldycsICgpID0+IHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBcIm1vbnRoXCI7XHJcbiAgICAgICAgdGhpcy5yb290RWwuc2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIsIFwibW9udGhcIik7XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtb2RlLWNoYW5nZWQnLCB7IGRldGFpbDogdGhpcy5tb2RlIH0pKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnRvb2xiYXIuYWRkRXZlbnRMaXN0ZW5lcignd2Vlay12aWV3JywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IFwid2Vla1wiO1xyXG4gICAgICAgIHRoaXMucm9vdEVsLnNldEF0dHJpYnV0ZShcImRhdGEtbW9kZVwiLCBcIndlZWtcIik7XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtb2RlLWNoYW5nZWQnLCB7IGRldGFpbDogdGhpcy5tb2RlIH0pKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnRvb2xiYXIuYWRkRXZlbnRMaXN0ZW5lcignZGF5LXZpZXcnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gXCJkYXlcIjtcclxuICAgICAgICB0aGlzLnJvb3RFbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVcIiwgXCJkYXlcIik7XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtb2RlLWNoYW5nZWQnLCB7IGRldGFpbDogdGhpcy5tb2RlIH0pKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoZSBtb250aCBncmlkLlxyXG4gICAgdGhpcy5tb250aEdyaWRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGhpcy5tb250aEdyaWRFbC5pZCA9ICdtb250aC1ncmlkJztcclxuICAgIHRoaXMucm9vdEVsLmFwcGVuZENoaWxkKHRoaXMubW9udGhHcmlkRWwpO1xyXG5cclxuICAgIC8vIEluaXQgdGhlIG1vbnRoIGdyaWQgY29tcG9uZW50IGluIGl0LlxyXG4gICAgdGhpcy5tb250aEdyaWQgPSBuZXcgTW9udGhHcmlkKHRoaXMubW9udGhHcmlkRWwsIHRoaXMuX2RhdGUsIHRoaXMuX2V2ZW50cyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoZSB3ZWVrIGdyaWQuXHJcbiAgICB0aGlzLndlZWtHcmlkRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMud2Vla0dyaWRFbC5pZCA9ICd3ZWVrLWdyaWQnO1xyXG4gICAgdGhpcy5yb290RWwuYXBwZW5kQ2hpbGQodGhpcy53ZWVrR3JpZEVsKTtcclxuXHJcbiAgICAvLyBJbml0IHRoZSB3ZWVrIGdyaWQgY29tcG9uZW50IGluIGl0LlxyXG4gICAgdGhpcy53ZWVrR3JpZCA9IG5ldyBXZWVrR3JpZCh0aGlzLndlZWtHcmlkRWwsIHRoaXMuX2RhdGUsIHRoaXMuX2V2ZW50cyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoZSBkYXkgZ3JpZC5cclxuICAgIHRoaXMuZGF5R3JpZEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLmRheUdyaWRFbC5pZCA9ICdkYXktZ3JpZCc7XHJcbiAgICB0aGlzLnJvb3RFbC5hcHBlbmRDaGlsZCh0aGlzLmRheUdyaWRFbCk7XHJcblxyXG4gICAgLy8gSW5pdCB0aGUgZGF5IGdyaWQgY29tcG9uZW50IGluIGl0LlxyXG4gICAgdGhpcy5kYXlHcmlkID0gbmV3IERheUdyaWQodGhpcy5kYXlHcmlkRWwsIHRoaXMuX2RhdGUsIHRoaXMuX2V2ZW50cyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoZSBzaWRlYmFyLlxyXG4gICAgdGhpcy5zaWRlYmFyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMuc2lkZWJhckVsLmlkID0gJ3NpZGViYXInO1xyXG4gICAgdGhpcy5yb290RWwuYXBwZW5kQ2hpbGQodGhpcy5zaWRlYmFyRWwpO1xyXG5cclxuICAgIC8vIEluaXQgdGhlIHNpZGViYXIgY29tcG9uZW50IGluIGl0LlxyXG4gICAgdGhpcy5zaWRlYmFyID0gbmV3IFNpZGViYXIodGhpcy5zaWRlYmFyRWwsIHRoaXMuX2RhdGUsIHRoaXMuX2V2ZW50cyk7XHJcblxyXG4gICAgLy8gTGlzdGVuIGZvciBkYXktY2xpY2tlZCBldmVudHMgZnJvbSB0aGUgbW9udGggYW5kIHdlZWsgZ3JpZHMgdG8gc2hvdyB0aGUgZnVsbFxyXG4gICAgLy8gbGlzdCBpbiB0aGUgc2lkZWJhci5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRoaXMubW9udGhHcmlkLmFkZEV2ZW50TGlzdGVuZXIoJ2RheS1jbGlja2VkJywgKGU6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBlLmRldGFpbDtcclxuICAgICAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnRzRm9yRGF5KHRoaXMuX2V2ZW50cywgZGF0ZSk7XHJcbiAgICAgIHRoaXMuc2lkZWJhci5ldmVudHMgPSBldmVudHM7XHJcbiAgICB9KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRoaXMud2Vla0dyaWQuYWRkRXZlbnRMaXN0ZW5lcignZGF5LWNsaWNrZWQnLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcclxuICAgICAgY29uc3QgZGF0ZSA9IGUuZGV0YWlsO1xyXG4gICAgICBjb25zdCBldmVudHMgPSBnZXRFdmVudHNGb3JEYXkodGhpcy5fZXZlbnRzLCBkYXRlKTtcclxuICAgICAgdGhpcy5zaWRlYmFyLmV2ZW50cyA9IGV2ZW50cztcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFN0YXJ0IHdpdGggdG9kYXkuXHJcbiAgICB0aGlzLnNpZGViYXIuZXZlbnRzID0gZ2V0RXZlbnRzRm9yRGF5KHRoaXMuX2V2ZW50cywgbmV3IERhdGUoKSk7XHJcblxyXG4gICAgLy8gU2hvdy9oaWRlIHRoZSByaWdodCBtb2RlXHJcbiAgICB0aGlzLnJvb3RFbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVcIiwgdGhpcy5tb2RlKTtcclxuICB9XHJcblxyXG4gIHNldCBkYXRlKGRhdGU6IERhdGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBkYXRlIHRvXCIsIGRhdGUpO1xyXG4gICAgdGhpcy5fZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLm1vbnRoR3JpZC5kYXRlID0gZGF0ZTtcclxuICAgIHRoaXMud2Vla0dyaWQuZGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLmRheUdyaWQuZGF0ZSA9IGRhdGU7XHJcbiAgICBpZiAodGhpcy50b29sYmFyKSB7XHJcbiAgICAgIHRoaXMudG9vbGJhci5kYXRlID0gZGF0ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc2lkZWJhci5ldmVudHMgPSBnZXRFdmVudHNGb3JEYXkodGhpcy5fZXZlbnRzLCB0aGlzLl9kYXRlKTtcclxuICB9XHJcblxyXG4gIHNldCBldmVudHMoZXZlbnRzOiBDYWxlbmRhckV2ZW50W10pIHtcclxuICAgIHRoaXMuX2V2ZW50cyA9IGV2ZW50cztcclxuICAgIHRoaXMubW9udGhHcmlkLmV2ZW50cyA9IGV2ZW50cztcclxuICAgIHRoaXMud2Vla0dyaWQuZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgdGhpcy5kYXlHcmlkLmV2ZW50cyA9IGV2ZW50cztcclxuICAgIHRoaXMuc2lkZWJhci5ldmVudHMgPSBnZXRFdmVudHNGb3JEYXkodGhpcy5fZXZlbnRzLCB0aGlzLl9kYXRlKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIENhbGVuZGFyRXZlbnQge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgaWQ6IHN0cmluZztcclxuICBkYXRlOiBEYXRlO1xyXG4gIHRpbWU6IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgZHVyYXRpb246IG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgcmVwZWF0OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIGNvbG9yOiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIGxvY2F0aW9uOiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIG11bHRpRGF5czoge3N0YXJ0OiBEYXRlLCBlbmQ6IERhdGV9fG51bGw7XHJcbiAgcnN2cDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0aXRsZTogc3RyaW5nLCBpZDogc3RyaW5nLCBkYXRlOiBEYXRlKSB7XHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLmRhdGUgPSBkYXRlO1xyXG4gIH1cclxuXHJcbiAgYXNPbmVMaW5lSFRNTChpbmRleEluR3JpZDogbnVtYmVyfHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB0aW1lID0gdGhpcy50aW1lID8gYDxzcGFuIGNsYXNzPVwidGltZVwiPiR7dGhpcy50aW1lfTwvc3Bhbj5gIDogJyc7XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPGxpIGlkPVwiaWQtJHt0aGlzLmlkfVwiIGRhdGEtaW5kZXgtaW4tZ3JpZD1cIiR7aW5kZXhJbkdyaWR9XCIgY2xhc3M9XCJldmVudCR7ISF0aGlzLm11bHRpRGF5cyA/IFwiIG11bHRpLWRheVwiIDogXCJcIn0ke3RoaXMucnN2cCA/IFwiXCIgOiBcIiB1bmNvbmZpcm1lZFwifVwiIHN0eWxlPVwiLS1ldmVudC1jb2xvcjogJHt0aGlzLmNvbG9yfTtcIj5cclxuICAgICAgICA8ZGl2PiR7dGltZX0gPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPiR7dGhpcy50aXRsZX08L3NwYW4+PC9kaXY+XHJcbiAgICAgIDwvbGk+XHJcbiAgICBgO1xyXG4gIH1cclxuXHJcbiAgYXNNZWRpdW1MZW5ndGhIVE1MKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB0aW1lID0gdGhpcy50aW1lID8gYDxzcGFuIGNsYXNzPVwidGltZVwiPiR7dGhpcy50aW1lfTwvc3Bhbj5gIDogJyc7XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPGxpIGlkPVwiaWQtJHt0aGlzLmlkfVwiIGNsYXNzPVwiZXZlbnQkeyEhdGhpcy5tdWx0aURheXMgPyBcIiBtdWx0aS1kYXlcIiA6IFwiXCJ9JHt0aGlzLnJzdnAgPyBcIlwiIDogXCIgdW5jb25maXJtZWRcIn1cIiBzdHlsZT1cIi0tZXZlbnQtY29sb3I6ICR7dGhpcy5jb2xvcn07XCI+XHJcbiAgICAgICAgPGRpdj4ke3RpbWV9PC9kaXY+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJ0aXRsZVwiPiR7dGhpcy50aXRsZX08L3A+XHJcbiAgICAgICAgPHA+JHt0aGlzLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgPC9saT5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBhc0Z1bGxIVE1MKCk6IHN0cmluZyB7XHJcbiAgICBsZXQgd2hlbiA9IFwiXCI7XHJcbiAgICAgIFxyXG4gICAgaWYgKCF0aGlzLm11bHRpRGF5cykge1xyXG4gICAgICB3aGVuID0gdGhpcy5kYXRlLnRvRGF0ZVN0cmluZygpO1xyXG4gICAgICBpZiAodGhpcy50aW1lKSB7XHJcbiAgICAgICAgd2hlbiArPSBgLCBhdCAke3RoaXMudGltZX1gO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnJlcGVhdCkge1xyXG4gICAgICAgIHdoZW4gKz0gYCwgJHt0aGlzLnJlcGVhdH1gO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgd2hlbiArPSBgICgke3RoaXMuZHVyYXRpb259IG1pbnV0ZXMpYDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2hlbiA9IGBGcm9tICR7dGhpcy5tdWx0aURheXMuc3RhcnQudG9EYXRlU3RyaW5nKCl9IHRvICR7dGhpcy5tdWx0aURheXMuZW5kLnRvRGF0ZVN0cmluZygpfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPGxpIGNsYXNzPVwiZXZlbnQke3RoaXMucnN2cCA/IFwiXCIgOiBcIiB1bmNvbmZpcm1lZFwifVwiIHN0eWxlPVwiLS1ldmVudC1jb2xvcjogJHt0aGlzLmNvbG9yfTtcIj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGgyPiR7dGhpcy50aXRsZX08L2gyPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJ3aGVuXCI+JHt3aGVufTwvcD5cclxuICAgICAgICAgICR7dGhpcy5sb2NhdGlvbiA/IGA8cCBjbGFzcz1cIndoZXJlXCI+JHt0aGlzLmxvY2F0aW9ufTwvcD5gIDogXCJcIn1cclxuICAgICAgICAgIDxwIGNsYXNzPVwid2hhdFwiPiR7dGhpcy5kZXNjcmlwdGlvbn08L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvbGk+XHJcbiAgICBgO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDYWxlbmRhckV2ZW50IH0gZnJvbSBcIi4vQ2FsZW5kYXJFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50UG9wdXAge1xyXG4gIHByaXZhdGUgcG9wdXBFbDogSFRNTEVsZW1lbnR8dW5kZWZpbmVkO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGV2ZW50czogQ2FsZW5kYXJFdmVudFtdKSB7fVxyXG5cclxuICBzdGFydCgpIHtcclxuICAgIGlmICghdGhpcy5wb3B1cEVsKSB7XHJcbiAgICAgIHRoaXMucG9wdXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIHRoaXMucG9wdXBFbC5jbGFzc05hbWUgPSBcInBvcHVwXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgdGhpcy5wb3B1cEVsLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xyXG4gICAgICB0aGlzLnBvcHVwRWwucmVtb3ZlKCk7XHJcblxyXG4gICAgICBjb25zdCBldmVudEVsID0gKGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbG9zZXN0KFwiI21vbnRoLWdyaWQgLmV2ZW50LCAjd2Vlay1ncmlkIC5ldmVudFwiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgaWYgKCFldmVudEVsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpZCA9IGV2ZW50RWwuaWQ7XHJcblxyXG4gICAgICBpZiAoIWlkIHx8ICFpZC5zdGFydHNXaXRoKFwiaWQtXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZXZlbnRJZCA9IGlkLnJlcGxhY2UoXCJpZC1cIiwgXCJcIik7XHJcblxyXG4gICAgICBjb25zdCBldmVudCA9IHRoaXMuZXZlbnRzLmZpbmQoZXZlbnQgPT4gZXZlbnQuaWQgPT09IGV2ZW50SWQpOyAgICAgIFxyXG4gICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBldmVudCBmb3VuZCBmb3IgaWRcIiwgZXZlbnRJZCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBldmVudEluZGV4SW5HcmlkID0gcGFyc2VJbnQoZXZlbnRFbC5kYXRhc2V0LmluZGV4SW5HcmlkISk7XHJcblxyXG4gICAgICB0aGlzLnBvcHVwRWwuc3R5bGUuc2V0UHJvcGVydHkoXCItLWV2ZW50LWNvbG9yXCIsIGV2ZW50LmNvbG9yKTtcclxuICAgICAgdGhpcy5wb3B1cEVsLmNsYXNzTGlzdC50b2dnbGUoXCJ2aXNpYmxlXCIsIHRydWUpO1xyXG4gICAgICB0aGlzLnBvcHVwRWwuY2xhc3NMaXN0LnRvZ2dsZShcInVuY29uZmlybWVkXCIsICFldmVudC5yc3ZwKTtcclxuXHJcbiAgICAgIGxldCB3aGVuID0gXCJcIjtcclxuICAgICAgXHJcbiAgICAgIGlmICghZXZlbnQubXVsdGlEYXlzKSB7XHJcbiAgICAgICAgd2hlbiA9IGV2ZW50LmRhdGUudG9EYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRpbWUpIHtcclxuICAgICAgICAgIHdoZW4gKz0gYCwgYXQgJHtldmVudC50aW1lfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudC5yZXBlYXQpIHtcclxuICAgICAgICAgIHdoZW4gKz0gYCwgJHtldmVudC5yZXBlYXR9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50LmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICB3aGVuICs9IGAgKCR7ZXZlbnQuZHVyYXRpb259IG1pbnV0ZXMpYDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2hlbiA9IGBGcm9tICR7ZXZlbnQubXVsdGlEYXlzLnN0YXJ0LnRvRGF0ZVN0cmluZygpfSB0byAke2V2ZW50Lm11bHRpRGF5cy5lbmQudG9EYXRlU3RyaW5nKCl9YDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wb3B1cEVsLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8aDI+JHtldmVudC50aXRsZX08L2gyPlxyXG4gICAgICAgIDxwIGNsYXNzPVwid2hlblwiPiR7d2hlbn08L3A+XHJcbiAgICAgICAgJHtldmVudC5sb2NhdGlvbiA/IGA8cCBjbGFzcz1cIndoZXJlXCI+JHtldmVudC5sb2NhdGlvbn08L3A+YCA6IFwiXCJ9XHJcbiAgICAgICAgPHAgY2xhc3M9XCJ3aGF0XCI+JHtldmVudC5kZXNjcmlwdGlvbn08L3A+XHJcbiAgICAgIGA7XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucG9wdXBFbCk7XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBldmVudCBlbGVtZW50LlxyXG4gICAgICBjb25zdCByZWN0ID0gZXZlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgY29uc3QgdG9wID0gcmVjdC50b3A7XHJcbiAgICAgIGNvbnN0IHJpZ2h0ID0gcmVjdC5yaWdodDtcclxuICAgICAgY29uc3QgbGVmdCA9IHJlY3QubGVmdDtcclxuICAgICAgY29uc3Qgd2lkdGggPSByZWN0LndpZHRoO1xyXG5cclxuICAgICAgaWYgKGV2ZW50SW5kZXhJbkdyaWQgPj0gMjgpIHtcclxuICAgICAgICAvLyBUaGUgZXZlbnQgaXMgaW4gdGhlIGxhc3QgMiByb3dzLiBTaG93IHRoZSBwb3B1cCBhYm92ZSBpdC5cclxuICAgICAgICB0aGlzLnBvcHVwRWwuc3R5bGUudG9wID0gYCR7dG9wIC0gdGhpcy5wb3B1cEVsLmNsaWVudEhlaWdodH1weGA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wb3B1cEVsLnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChldmVudEluZGV4SW5HcmlkID09PSA2IHx8IGV2ZW50SW5kZXhJbkdyaWQgPT09IDEzIHx8IGV2ZW50SW5kZXhJbkdyaWQgPT09IDIwIHx8IGV2ZW50SW5kZXhJbkdyaWQgPT09IDI3IHx8IGV2ZW50SW5kZXhJbkdyaWQgPT09IDM0KSB7XHJcbiAgICAgICAgLy8gVGhlIGV2ZW50IGlzIGxhc3QgaW4gYSByb3csIHNvIHdlIHdhbnQgdG8gc2hvdyB0aGUgcG9wdXAgdG8gdGhlIGxlZnQgb2YgaXQuXHJcbiAgICAgICAgdGhpcy5wb3B1cEVsLnN0eWxlLmxlZnQgPSBgJHtsZWZ0IC0gd2lkdGh9cHhgO1xyXG4gICAgICAgIHRoaXMucG9wdXBFbC5jbGFzc0xpc3QudG9nZ2xlKFwibGVmdFwiLCB0cnVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBvcHVwRWwuc3R5bGUubGVmdCA9IGAke3JpZ2h0fXB4YDtcclxuICAgICAgICB0aGlzLnBvcHVwRWwuY2xhc3NMaXN0LnRvZ2dsZShcImxlZnRcIiwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFN0b3JlIHtcclxuICBhc3luYyBnZXRTdG9yZWRQcmVmcygpOiBQcm9taXNlPHttb2RlOiBzdHJpbmcsIGluaXREYXRlOiBEYXRlfHVuZGVmaW5lZH0+IHtcclxuICAgIC8vIEZha2Ugc29tZSByYW5kb20gdGltZSAodXAgdG8gMjUwbXMpIHRvIHNpbXVsYXRlIGFuIEFQSSBjYWxsLlxyXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE1hdGgucmFuZG9tKCkgKiAyNTApKTtcclxuXHJcbiAgICBjb25zdCBtb2RlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Nsb3ctY2FsLW1vZGUnKTtcclxuICAgIGNvbnN0IGluaXREYXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Nsb3ctY2FsLWluaXREYXRlJyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbW9kZSxcclxuICAgICAgaW5pdERhdGU6IGluaXREYXRlID8gbmV3IERhdGUoaW5pdERhdGUpIDogdW5kZWZpbmVkXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0IG1vZGUobW9kZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlN0b3JpbmcgbW9kZSBwcmVmc1wiKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzbG93LWNhbC1tb2RlJywgbW9kZSk7XHJcbiAgfVxyXG5cclxuICBzZXQgaW5pdERhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJTdG9yaW5nIGRhdGUgcHJlZnNcIik7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2xvdy1jYWwtaW5pdERhdGUnLCBkYXRlLnRvSVNPU3RyaW5nKCkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBcHBVSSB9IGZyb20gXCIuL0FwcFVJXCI7XHJcbmltcG9ydCB7IGdldEFsbEV2ZW50cyB9IGZyb20gXCIuL2V2ZW50cy1mYWN0b3J5XCI7XHJcbmltcG9ydCB7IEV2ZW50UG9wdXAgfSBmcm9tIFwiLi9FdmVudFBvcHVwXCI7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSBcIi4vU3RvcmVcIjtcclxuaW1wb3J0IHsgaXNJbkJyb3dzZXJTaWRlUGFuZWwgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGlzSW5TaWRlUGFuZWwgPSBpc0luQnJvd3NlclNpZGVQYW5lbCgpO1xyXG4gIGNvbnN0IHN0b3JlID0gbmV3IFN0b3JlKCk7XHJcbiAgY29uc3QgcHJlZnMgPSBhd2FpdCBzdG9yZS5nZXRTdG9yZWRQcmVmcygpO1xyXG5cclxuICAvLyBUaGlzIGlzIHdoYXQgdGhlIGNhbGVuZGFyIHdpbGwgYmUgY2VudGVyZWQgYXJvdW5kIG9uIGxvYWQuXHJcbiAgY29uc3QgaW5pdERhdGUgPSBpc0luU2lkZVBhbmVsID8gbmV3IERhdGUoKSA6IHByZWZzLmluaXREYXRlIHx8IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgaW5pdE1vZGUgPSBpc0luU2lkZVBhbmVsID8gXCJkYXlcIiA6IHByZWZzLm1vZGUgfHwgXCJtb250aFwiO1xyXG5cclxuICBjb25zdCBhcHBFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKTtcclxuICBhcHBFbC5jbGFzc0xpc3QudG9nZ2xlKCdpbi1zaWRlLXBhbmVsJywgaXNJblNpZGVQYW5lbCk7XHJcbiAgY29uc3QgYXBwVUkgPSBuZXcgQXBwVUkoYXBwRWwhLCBpbml0RGF0ZSwgaW5pdE1vZGUsIFtdKTtcclxuXHJcbiAgY29uc3QgZXZlbnRzID0gYXdhaXQgZ2V0QWxsRXZlbnRzKClcclxuXHJcbiAgY29uc29sZS5sb2coXCJSZWZyZXNoaW5nIGNhbGVuZGFyIHdpdGggZXZlbnRzXCIpO1xyXG4gIGFwcFVJLmV2ZW50cyA9IGV2ZW50cztcclxuXHJcbiAgY29uc29sZS5sb2coXCJJbml0aWFsaXppbmcgdGhlIHBvcHVwIHV0aWxcIik7XHJcbiAgY29uc3QgcG9wdXAgPSBuZXcgRXZlbnRQb3B1cChldmVudHMpO1xyXG4gIHBvcHVwLnN0YXJ0KCk7XHJcblxyXG4gIC8vIEB0cy1pZ25vcmVcclxuICBhcHBVSS5hZGRFdmVudExpc3RlbmVyKFwibW9kZS1jaGFuZ2VkXCIsIChlOiBDdXN0b21FdmVudCkgPT4ge1xyXG4gICAgc3RvcmUubW9kZSA9IGUuZGV0YWlsO1xyXG4gIH0pO1xyXG5cclxuICAvLyBAdHMtaWdub3JlXHJcbiAgYXBwVUkuYWRkRXZlbnRMaXN0ZW5lcihcImRhdGUtY2hhbmdlZFwiLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcclxuICAgIHN0b3JlLmluaXREYXRlID0gZS5kZXRhaWw7XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBDYWxlbmRhckV2ZW50IH0gZnJvbSBcIi4vQ2FsZW5kYXJFdmVudFwiO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xyXG4gIC8vIFNpbXVsYXRlIGEgc2xvd2VyIEFQSSBlbmRwb2ludCBjYWxsLlxyXG4gIGNvbnNvbGUubG9nKFwiRmV0Y2hpbmcgY2FsZW5kYXIgZGF0YSAuLi5cIik7XHJcbiAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE1hdGgucmFuZG9tKCkgKiA1MDApKTtcclxuICAvLyBBZGRpbmcgYSBjYWNoZSBidXN0ZXIgdG8gdGhlIFVSTCB0byBmb3JjZSBhIHJlbG9hZCBvZiB0aGUgZGF0YS5cclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAuL2RhdGEuanNvbj9jYWNoZUJ1c3Rlcj0ke0RhdGUubm93KCl9YCk7XHJcbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlT25lT3JNdWx0aXBsZUV2ZW50c0Zyb21EYXRhKGV2ZW50RGF0YTogYW55KTogQ2FsZW5kYXJFdmVudFtdIHsgIFxyXG4gIGNvbnN0IGRhdGVzOiBEYXRlW10gPSBbbmV3IERhdGUoZXZlbnREYXRhLnN0YXJ0RGF0ZSldO1xyXG4gIGxldCBtdWx0aURheXM6IHtzdGFydDogRGF0ZSwgZW5kOiBEYXRlfXxudWxsID0gbnVsbDtcclxuXHJcbiAgaWYgKGV2ZW50RGF0YS5yZXBlYXQpIHtcclxuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGV2ZW50RGF0YS5zdGFydERhdGUpO1xyXG5cclxuICAgIC8vIElmIHRoaXMgZXZlbnQgaXMgcmVwZWF0ZWQsIGl0IG11c3QgaGF2ZSBhbiBlbmQgZGF0ZS5cclxuICAgIGNvbnN0IGVuZERhdGUgPSBldmVudERhdGEuZW5kRGF0ZVxyXG4gICAgICAvLyBFaXRoZXIgdGhlIGVuZCBkYXRlIGlzIHNwZWNpZmllZC5cclxuICAgICAgPyBuZXcgRGF0ZShldmVudERhdGEuZW5kRGF0ZSlcclxuICAgICAgLy8gT3IgaXQncyA1IHllYXIgYWZ0ZXIgdGhlIHN0YXJ0IGRhdGUuXHJcbiAgICAgIDogbmV3IERhdGUoc3RhcnREYXRlLmdldFRpbWUoKSArIDUgKiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcclxuXHJcbiAgICBpZiAoZXZlbnREYXRhLnJlcGVhdCA9PT0gXCJkYWlseVwiKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRXhwYW5kaW5nIGRhaWx5IGV2ZW50IC4uLlwiKTtcclxuICAgICAgY29uc3QgZGF5cyA9IChlbmREYXRlLmdldFRpbWUoKSAtIHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBkYXlzOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoc3RhcnREYXRlLmdldFRpbWUoKSArIGkgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcclxuICAgICAgICAvLyBJZiBkYXRlIGlzIG9uIGEgd2VlayBlbmQsIHNraXAgaXQuXHJcbiAgICAgICAgaWYgKGRhdGUuZ2V0RGF5KCkgPT09IDAgfHwgZGF0ZS5nZXREYXkoKSA9PT0gNikge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50RGF0YS5yZXBlYXQgPT09IFwid2Vla2x5XCIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJFeHBhbmRpbmcgd2Vla2x5IGV2ZW50IC4uLlwiKTtcclxuICAgICAgY29uc3Qgd2Vla3MgPSAoZW5kRGF0ZS5nZXRUaW1lKCkgLSBzdGFydERhdGUuZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0ICogNyk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHdlZWtzOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoc3RhcnREYXRlLmdldFRpbWUoKSArIGkgKiA3ICogMjQgKiA2MCAqIDYwICogMTAwMCk7XHJcbiAgICAgICAgZGF0ZXMucHVzaChkYXRlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChldmVudERhdGEucmVwZWF0ID09PSBcIm1vbnRobHlcIikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkV4cGFuZGluZyBtb250aGx5IGV2ZW50IC4uLlwiKTtcclxuICAgICAgY29uc3QgbW9udGhzID0gKGVuZERhdGUuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpKSAqIDEyICsgKGVuZERhdGUuZ2V0TW9udGgoKSAtIHN0YXJ0RGF0ZS5nZXRNb250aCgpKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbW9udGhzOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoc3RhcnREYXRlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBpKTtcclxuICAgICAgICBkYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50RGF0YS5yZXBlYXQgPT09IFwieWVhcmx5XCIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJFeHBhbmRpbmcgeWVhcmx5IGV2ZW50IC4uLlwiKTtcclxuICAgICAgY29uc3QgeWVhcnMgPSBlbmREYXRlLmdldEZ1bGxZZWFyKCkgLSBzdGFydERhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0geWVhcnM7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShzdGFydERhdGUuZ2V0VGltZSgpKTtcclxuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIGkpO1xyXG4gICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGV2ZW50RGF0YS5lbmREYXRlKSB7XHJcbiAgICAvLyBJZiB0aGlzIGV2ZW50IGhhcyBhIHN0YXJ0IGFuZCBlbmQgZGF0ZSwgYnV0IGlzbid0IHJlcGVhdGVkLlxyXG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZXZlbnREYXRhLnN0YXJ0RGF0ZSk7XHJcbiAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoZXZlbnREYXRhLmVuZERhdGUpO1xyXG4gICAgY29uc3QgZGF5cyA9IChlbmREYXRlLmdldFRpbWUoKSAtIHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZGF5czsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShzdGFydERhdGUuZ2V0VGltZSgpICsgaSAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xyXG4gICAgICBkYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgfVxyXG4gICAgbXVsdGlEYXlzID0ge3N0YXJ0OiBzdGFydERhdGUsIGVuZDogZW5kRGF0ZX07XHJcbiAgfVxyXG5cclxuXHJcbiAgcmV0dXJuIGRhdGVzLm1hcCgoZGF0ZSwgaW5kZXgpID0+IHtcclxuICAgIGNvbnN0IGlkID0gZXZlbnREYXRhLmlkICsgKGluZGV4ID4gMCA/IGAtJHtpbmRleH1gIDogXCJcIik7XHJcbiAgICBjb25zdCBldmVudCA9IG5ldyBDYWxlbmRhckV2ZW50KGV2ZW50RGF0YS50aXRsZSwgaWQsIGRhdGUpO1xyXG5cclxuICAgIGV2ZW50Lm11bHRpRGF5cyA9IG11bHRpRGF5cztcclxuXHJcbiAgICBldmVudC5jb2xvciA9IGV2ZW50RGF0YS5jb2xvcjtcclxuICAgIGV2ZW50LnRpbWUgPSBldmVudERhdGEuc3RhcnRUaW1lO1xyXG4gICAgZXZlbnQuZHVyYXRpb24gPSBldmVudERhdGEuZHVyYXRpb247XHJcbiAgICBldmVudC5yZXBlYXQgPSBldmVudERhdGEucmVwZWF0O1xyXG4gICAgZXZlbnQubG9jYXRpb24gPSBldmVudERhdGEubG9jYXRpb247XHJcbiAgICBldmVudC5kZXNjcmlwdGlvbiA9IGV2ZW50RGF0YS5kZXNjcmlwdGlvbjtcclxuICAgIGV2ZW50LnJzdnAgPSBldmVudERhdGEucnN2cDtcclxuXHJcbiAgICByZXR1cm4gZXZlbnQ7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxFdmVudHMoKTogUHJvbWlzZTxDYWxlbmRhckV2ZW50W10+IHtcclxuICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hEYXRhKCk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiUHJvY2Vzc2luZyBldmVudHMgLi4uXCIpO1xyXG4gIHJldHVybiBkYXRhLmV2ZW50cy5tYXAoKGV2ZW50OiBhbnkpID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVPbmVPck11bHRpcGxlRXZlbnRzRnJvbURhdGEoZXZlbnQpO1xyXG4gIH0pLmZsYXQoKTtcclxufVxyXG4iXSwibmFtZXMiOlsiYXNzZXJ0VHlwZSIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJhcmdzIiwiVHlwZUVycm9yIiwiZm9ybWF0IiwiaSIsInJlcGxhY2UiLCJhbnlUb1N0cmluZyIsIngiLCJTdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJHbG9iYWwiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInVuZGVmaW5lZCIsImN1cnJlbnRXYXJuSGFuZGxlciIsIldhcm5pbmciLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJ0aGlzIiwid2FybiIsIl9hIiwic3RhY2siLCJFcnJvciIsImNvbnNvbGUiLCJfYiIsIkluaXRFdmVudFdhc0NhbGxlZFdoaWxlRGlzcGF0Y2hpbmciLCJGYWxzeVdhc0Fzc2lnbmVkVG9DYW5jZWxCdWJibGUiLCJUcnV0aHlXYXNBc3NpZ25lZFRvUmV0dXJuVmFsdWUiLCJOb25DYW5jZWxhYmxlRXZlbnRXYXNDYW5jZWxlZCIsIkNhbmNlbGVkSW5QYXNzaXZlTGlzdGVuZXIiLCJFdmVudExpc3RlbmVyV2FzRHVwbGljYXRlZCIsIk9wdGlvbldhc0lnbm9yZWQiLCJJbnZhbGlkRXZlbnRMaXN0ZW5lciIsIkV2ZW50IiwiTk9ORSIsIkNBUFRVUklOR19QSEFTRSIsIkFUX1RBUkdFVCIsIkJVQkJMSU5HX1BIQVNFIiwidHlwZSIsImV2ZW50SW5pdERpY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsIm9wdHMiLCJpbnRlcm5hbERhdGFNYXAiLCJzZXQiLCJidWJibGVzIiwiQm9vbGVhbiIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJzdG9wUHJvcGFnYXRpb25GbGFnIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uRmxhZyIsImNhbmNlbGVkRmxhZyIsImluUGFzc2l2ZUxpc3RlbmVyRmxhZyIsImRpc3BhdGNoRmxhZyIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCIkIiwic3JjRWxlbWVudCIsImNvbXBvc2VkUGF0aCIsImV2ZW50UGhhc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJkYXRhIiwicmV0dXJuVmFsdWUiLCJzZXRDYW5jZWxGbGFnIiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiaXNUcnVzdGVkIiwiaW5pdEV2ZW50IiwiV2Vha01hcCIsImV2ZW50IiwibmFtZSIsInJldHYiLCJnZXQiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImxlbmd0aCIsIkRPTUV4Y2VwdGlvbiIsInNldFByb3RvdHlwZU9mIiwiRXJyb3JDb2RlTWFwIiwiSU5ERVhfU0laRV9FUlIiLCJET01TVFJJTkdfU0laRV9FUlIiLCJISUVSQVJDSFlfUkVRVUVTVF9FUlIiLCJXUk9OR19ET0NVTUVOVF9FUlIiLCJJTlZBTElEX0NIQVJBQ1RFUl9FUlIiLCJOT19EQVRBX0FMTE9XRURfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiTk9UX0ZPVU5EX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5VU0VfQVRUUklCVVRFX0VSUiIsIklOVkFMSURfU1RBVEVfRVJSIiwiU1lOVEFYX0VSUiIsIklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiIsIk5BTUVTUEFDRV9FUlIiLCJJTlZBTElEX0FDQ0VTU19FUlIiLCJWQUxJREFUSU9OX0VSUiIsIlRZUEVfTUlTTUFUQ0hfRVJSIiwiU0VDVVJJVFlfRVJSIiwiTkVUV09SS19FUlIiLCJBQk9SVF9FUlIiLCJVUkxfTUlTTUFUQ0hfRVJSIiwiUVVPVEFfRVhDRUVERURfRVJSIiwiVElNRU9VVF9FUlIiLCJJTlZBTElEX05PREVfVFlQRV9FUlIiLCJEQVRBX0NMT05FX0VSUiIsImRlZmluZUVycm9yQ29kZVByb3BlcnRpZXMiLCJvYmoiLCJrZXkiLCJjb25maWd1cmFibGUiLCJFdmVudFdyYXBwZXIiLCJ3cmFwIiwiZ2V0V3JhcHBlckNsYXNzT2YiLCJzdXBlciIsImludGVybmFsRGF0YU1hcCQxIiwib3JpZ2luYWwiLCJkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3IiLCIkJDEiLCJ3cmFwcGVyQ2xhc3NDYWNoZSIsIm9yaWdpbmFsRXZlbnQiLCJnZXRQcm90b3R5cGVPZiIsIndyYXBwZXIiLCJCYXNlRXZlbnRXcmFwcGVyIiwib3JpZ2luYWxQcm90b3R5cGUiLCJDdXN0b21FdmVudFdyYXBwZXIiLCJkZWZpbmVXcmFwcGVyIiwiZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImJpbmQiLCJpc0NhcHR1cmUiLCJsaXN0ZW5lciIsImZsYWdzIiwiaXNQYXNzaXZlIiwiaXNPbmNlIiwiaXNSZW1vdmVkIiwiaW52b2tlQ2FsbGJhY2siLCJjYWxsYmFjayIsImhhbmRsZUV2ZW50IiwidGhyb3duRXJyb3IiLCJtYXliZUVycm9yIiwiZXJyb3IiLCJkaXNwYXRjaEV2ZW50IiwiRXJyb3JFdmVudCIsInByb2Nlc3MiLCJlbWl0IiwicmVwb3J0RXJyb3IiLCJmaW5kSW5kZXhPZkxpc3RlbmVyIiwibGlzdGVuZXJzIiwiY2FwdHVyZSIsInJlbW92ZUxpc3RlbmVyIiwibGlzdCIsImluZGV4IiwicmVtb3ZlTGlzdGVuZXJBdCIsImRpc2FibGVDb3ciLCJzZXRSZW1vdmVkIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNpZ25hbExpc3RlbmVyIiwiY293IiwiZmlsdGVyIiwiXyIsInNwbGljZSIsIkV2ZW50VGFyZ2V0IiwiaW50ZXJuYWxEYXRhTWFwJDIiLCJjcmVhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZTAiLCJjYWxsYmFjazAiLCJvcHRpb25zMCIsImxpc3RlbmVyTWFwIiwiJCQyIiwib25jZSIsInBhc3NpdmUiLCJvcHRpb25zIiwiYXNzZXJ0Q2FsbGJhY2siLCJub3JtYWxpemVBZGRPcHRpb25zIiwiYWJvcnRlZCIsImF0dHJDYWxsYmFjayIsImF0dHJMaXN0ZW5lciIsImVuc3VyZUxpc3RlbmVyTGlzdCIsImNyZWF0ZUxpc3RlbmVyIiwicHVzaCIsImFkZExpc3RlbmVyIiwid2FybkR1cGxpY2F0ZSIsIm5vcm1hbGl6ZU9wdGlvbnMiLCJlIiwiZXZlbnREYXRhIiwibXNnIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJkZWZpbmVQcm9wZXJ0aWVzIiwia2V5cyQxIiwiTU9OVEhTIiwiZ2V0RXZlbnRzRm9yRGF5IiwiZXZlbnRzIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwic29ydCIsImEiLCJiIiwidGltZSIsInBhcnNlSW50IiwibXVsdGlEYXlzIiwiZm9ybWF0TW9udGhZZWFyIiwibW9udGgiLCJ5ZWFyIiwiaXNJbkJyb3dzZXJTaWRlUGFuZWwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnREYXRhIiwiYnJhbmRzIiwic29tZSIsImJyYW5kIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsIkRBWVMiLCJNb250aEdyaWQiLCJlbCIsIl9kYXRlIiwicm9vdEVsIiwiX2V2ZW50cyIsInJlbmRlciIsImlubmVySFRNTCIsImZpcnN0RGF5IiwibGFzdERheSIsImZpcnN0V2Vla2RheSIsImdldERheSIsImxhc3RXZWVrZGF5IiwiZGF5c0luTW9udGgiLCJkYXlzSW5MYXN0TW9udGgiLCJkYXlzIiwiaW5kZXhJbkdyaWQiLCJodG1sIiwicmVuZGVyRGF5IiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibGFzdEVsZW1lbnRDaGlsZCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwidXBkYXRlTm93TWFya2VyIiwiZGF5TnVtYmVyIiwiY2xhc3NOYW1lIiwidG9EYXRlU3RyaW5nIiwibWFwIiwiYXNPbmVMaW5lSFRNTCIsImpvaW4iLCJyYXRpbyIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImRheUVsIiwicXVlcnlTZWxlY3RvciIsIm1hcmtlckhlaWdodCIsIm9mZnNldEhlaWdodCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJzZXRUaW1lb3V0IiwiVG9vbGJhciIsIm1vZGUiLCJzZWxlY3RlZE1vZGUiLCJsb2ciLCJTaWRlYmFyIiwidWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImFzRnVsbEhUTUwiLCJXZWVrR3JpZCIsImRheSIsImFzTWVkaXVtTGVuZ3RoSFRNTCIsIkRheUdyaWQiLCJBcHBVSSIsInRvb2xiYXJFbCIsImlkIiwidG9vbGJhciIsInNldEF0dHJpYnV0ZSIsIm1vbnRoR3JpZEVsIiwibW9udGhHcmlkIiwid2Vla0dyaWRFbCIsIndlZWtHcmlkIiwiZGF5R3JpZEVsIiwiZGF5R3JpZCIsInNpZGViYXJFbCIsInNpZGViYXIiLCJDYWxlbmRhckV2ZW50IiwidGl0bGUiLCJyc3ZwIiwiY29sb3IiLCJkZXNjcmlwdGlvbiIsIndoZW4iLCJzdGFydCIsImVuZCIsInJlcGVhdCIsImR1cmF0aW9uIiwibG9jYXRpb24iLCJFdmVudFBvcHVwIiwicG9wdXBFbCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImV2ZW50RWwiLCJjbG9zZXN0Iiwic3RhcnRzV2l0aCIsImV2ZW50SWQiLCJmaW5kIiwiZXZlbnRJbmRleEluR3JpZCIsImRhdGFzZXQiLCJ0b2dnbGUiLCJib2R5IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInJpZ2h0IiwibGVmdCIsIndpZHRoIiwiY2xpZW50SGVpZ2h0IiwiU3RvcmUiLCJnZXRTdG9yZWRQcmVmcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiTWF0aCIsInJhbmRvbSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJpbml0RGF0ZSIsInNldEl0ZW0iLCJ0b0lTT1N0cmluZyIsImlzSW5TaWRlUGFuZWwiLCJzdG9yZSIsInByZWZzIiwiaW5pdE1vZGUiLCJhcHBFbCIsImdldEVsZW1lbnRCeUlkIiwiYXBwVUkiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsImZldGNoRGF0YSIsImRhdGVzIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImdldFRpbWUiLCJ3ZWVrcyIsIm1vbnRocyIsInNldE1vbnRoIiwieWVhcnMiLCJzZXRGdWxsWWVhciIsInN0YXJ0VGltZSIsImNyZWF0ZU9uZU9yTXVsdGlwbGVFdmVudHNGcm9tRGF0YSIsImZsYXQiLCJnZXRBbGxFdmVudHMiXSwic291cmNlUm9vdCI6IiJ9