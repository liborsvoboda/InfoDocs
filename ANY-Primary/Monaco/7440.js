"use strict";(self.webpackChunkmy_application=self.webpackChunkmy_application||[]).push([[7440],{7440:(o,e,r)=>{r.r(e),r.d(e,{default:()=>t});const t='// The editor colors can be customized through CSS or through JS\n\nmonaco.editor.defineTheme("myTheme", {\n\tbase: "vs",\n\tinherit: true,\n\trules: [],\n\tcolors: {\n\t\t"editor.foreground": "#000000",\n\t\t"editor.background": "#EDF9FA",\n\t\t"editorCursor.foreground": "#8B0000",\n\t\t"editor.lineHighlightBackground": "#0000FF20",\n\t\t"editorLineNumber.foreground": "#008800",\n\t\t"editor.selectionBackground": "#88000030",\n\t\t"editor.inactiveSelectionBackground": "#88000015",\n\t},\n});\nmonaco.editor.setTheme("myTheme");\n\nmonaco.editor.create(document.getElementById("container"), {\n\tvalue: "My to-do list:\\n* buy milk\\n* buy coffee\\n* write awesome code",\n\tlanguage: "text/plain",\n\tfontFamily: "Arial",\n\tfontSize: 20,\n});\n\n// A list of color names:\n("foreground"); // Overall foreground color. This color is only used if not overridden by a component.\n("errorForeground"); // Overall foreground color for error messages. This color is only used if not overridden by a component.\n("descriptionForeground"); // Foreground color for description text providing additional information, for example for a label.\n("focusBorder"); // Overall border color for focused elements. This color is only used if not overridden by a component.\n("contrastBorder"); // An extra border around elements to separate them from others for greater contrast.\n("contrastActiveBorder"); // An extra border around active elements to separate them from others for greater contrast.\n("selection.background"); // The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\n("textSeparator.foreground"); // Color for text separators.\n("textLink.foreground"); // Foreground color for links in text.\n("textLink.activeForeground"); // Foreground color for active links in text.\n("textPreformat.foreground"); // Foreground color for preformatted text segments.\n("textBlockQuote.background"); // Background color for block quotes in text.\n("textBlockQuote.border"); // Border color for block quotes in text.\n("textCodeBlock.background"); // Background color for code blocks in text.\n("widget.shadow"); // Shadow color of widgets such as find/replace inside the editor.\n("input.background"); // Input box background.\n("input.foreground"); // Input box foreground.\n("input.border"); // Input box border.\n("inputOption.activeBorder"); // Border color of activated options in input fields.\n("input.placeholderForeground"); // Input box foreground color for placeholder text.\n("inputValidation.infoBackground"); // Input validation background color for information severity.\n("inputValidation.infoBorder"); // Input validation border color for information severity.\n("inputValidation.warningBackground"); // Input validation background color for information warning.\n("inputValidation.warningBorder"); // Input validation border color for warning severity.\n("inputValidation.errorBackground"); // Input validation background color for error severity.\n("inputValidation.errorBorder"); // Input validation border color for error severity.\n("dropdown.background"); // Dropdown background.\n("dropdown.foreground"); // Dropdown foreground.\n("dropdown.border"); // Dropdown border.\n("list.focusBackground"); // List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n("list.focusForeground"); // List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n("list.activeSelectionBackground"); // List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n("list.activeSelectionForeground"); // List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\n("list.inactiveSelectionBackground"); // List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\n("list.inactiveSelectionForeground"); // List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\n("list.hoverBackground"); // List/Tree background when hovering over items using the mouse.\n("list.hoverForeground"); // List/Tree foreground when hovering over items using the mouse.\n("list.dropBackground"); // List/Tree drag and drop background when moving items around using the mouse.\n("list.highlightForeground"); // List/Tree foreground color of the match highlights when searching inside the list/tree.\n("pickerGroup.foreground"); // Quick picker color for grouping labels.\n("pickerGroup.border"); // Quick picker color for grouping borders.\n("button.foreground"); // Button foreground color.\n("button.background"); // Button background color.\n("button.hoverBackground"); // Button background color when hovering.\n("badge.background"); // Badge background color. Badges are small information labels, e.g. for search results count.\n("badge.foreground"); // Badge foreground color. Badges are small information labels, e.g. for search results count.\n("scrollbar.shadow"); // Scrollbar shadow to indicate that the view is scrolled.\n("scrollbarSlider.background"); // Slider background color.\n("scrollbarSlider.hoverBackground"); // Slider background color when hovering.\n("scrollbarSlider.activeBackground"); // Slider background color when active.\n("progressBar.background"); // Background color of the progress bar that can show for long running operations.\n("editor.background"); // Editor background color.\n("editor.foreground"); // Editor default foreground color.\n("editorWidget.background"); // Background color of editor widgets, such as find/replace.\n("editorWidget.border"); // Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.\n("editor.selectionBackground"); // Color of the editor selection.\n("editor.selectionForeground"); // Color of the selected text for high contrast.\n("editor.inactiveSelectionBackground"); // Color of the selection in an inactive editor.\n("editor.selectionHighlightBackground"); // Color for regions with the same content as the selection.\n("editor.findMatchBackground"); // Color of the current search match.\n("editor.findMatchHighlightBackground"); // Color of the other search matches.\n("editor.findRangeHighlightBackground"); // Color the range limiting the search.\n("editor.hoverHighlightBackground"); // Highlight below the word for which a hover is shown.\n("editorHoverWidget.background"); // Background color of the editor hover.\n("editorHoverWidget.border"); // Border color of the editor hover.\n("editorLink.activeForeground"); // Color of active links.\n("diffEditor.insertedTextBackground"); // Background color for text that got inserted.\n("diffEditor.removedTextBackground"); // Background color for text that got removed.\n("diffEditor.insertedTextBorder"); // Outline color for the text that got inserted.\n("diffEditor.removedTextBorder"); // Outline color for text that got removed.\n("editorOverviewRuler.currentContentForeground"); // Current overview ruler foreground for inline merge-conflicts.\n("editorOverviewRuler.incomingContentForeground"); // Incoming overview ruler foreground for inline merge-conflicts.\n("editorOverviewRuler.commonContentForeground"); // Common ancestor overview ruler foreground for inline merge-conflicts.\n("editor.lineHighlightBackground"); // Background color for the highlight of line at the cursor position.\n("editor.lineHighlightBorder"); // Background color for the border around the line at the cursor position.\n("editor.rangeHighlightBackground"); // Background color of highlighted ranges, like by quick open and find features.\n("editorCursor.foreground"); // Color of the editor cursor.\n("editorWhitespace.foreground"); // Color of whitespace characters in the editor.\n("editorIndentGuide.background"); // Color of the editor indentation guides.\n("editorLineNumber.foreground"); // Color of editor line numbers.\n("editorLineNumber.activeForeground"); // Color of editor active line number.\n("editorRuler.foreground"); // Color of the editor rulers.\n("editorCodeLens.foreground"); // Foreground color of editor code lenses\n("editorInlayHint.foreground"); // Foreground color of editor inlay hints\n("editorInlayHint.background"); // Background color of editor inlay hints\n("editorBracketMatch.background"); // Background color behind matching brackets\n("editorBracketMatch.border"); // Color for matching brackets boxes\n("editorOverviewRuler.border"); // Color of the overview ruler border.\n("editorGutter.background"); // Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.\n("editorError.foreground"); // Foreground color of error squigglies in the editor.\n("editorError.border"); // Border color of error squigglies in the editor.\n("editorWarning.foreground"); // Foreground color of warning squigglies in the editor.\n("editorWarning.border"); // Border color of warning squigglies in the editor.\n("editorMarkerNavigationError.background"); // Editor marker navigation widget error color.\n("editorMarkerNavigationWarning.background"); // Editor marker navigation widget warning color.\n("editorMarkerNavigation.background"); // Editor marker navigation widget background.\n("editorSuggestWidget.background"); // Background color of the suggest widget.\n("editorSuggestWidget.border"); // Border color of the suggest widget.\n("editorSuggestWidget.foreground"); // Foreground color of the suggest widget.\n("editorSuggestWidget.selectedBackground"); // Background color of the selected entry in the suggest widget.\n("editorSuggestWidget.highlightForeground"); // Color of the match highlights in the suggest widget.\n("editor.wordHighlightBackground"); // Background color of a symbol during read-access, like reading a variable.\n("editor.wordHighlightStrongBackground"); // Background color of a symbol during write-access, like writing to a variable.\n("peekViewTitle.background"); // Background color of the peek view title area.\n("peekViewTitleLabel.foreground"); // Color of the peek view title.\n("peekViewTitleDescription.foreground"); // Color of the peek view title info.\n("peekView.border"); // Color of the peek view borders and arrow.\n("peekViewResult.background"); // Background color of the peek view result list.\n("peekViewResult.lineForeground"); // Foreground color for line nodes in the peek view result list.\n("peekViewResult.fileForeground"); // Foreground color for file nodes in the peek view result list.\n("peekViewResult.selectionBackground"); // Background color of the selected entry in the peek view result list.\n("peekViewResult.selectionForeground"); // Foreground color of the selected entry in the peek view result list.\n("peekViewEditor.background"); // Background color of the peek view editor.\n("peekViewEditorGutter.background"); // Background color of the gutter in the peek view editor.\n("peekViewResult.matchHighlightBackground"); // Match highlight color in the peek view result list.\n("peekViewEditor.matchHighlightBackground"); // Match highlight color in the peek view editor.\n\n/*\nvar colors = require(\'vs/platform/registry/common/platform\').Registry.data.get(\'base.contributions.colors\').colorSchema.properties\nObject.keys(colors).forEach(function(key) {\n    var val = colors[key];\n    console.log( \'//\' + val.description + \'\\n\' + key);\n})\n*/\n'}}]);
//# sourceMappingURL=7440.js.map