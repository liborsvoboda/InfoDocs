{
  "index.html": {
    "href": "index.html",
    "title": "FTP Server | FTP Server documentation",
    "keywords": "FTP Server This FTP Server is a pure .NET implementation with the following goals: Easy to use Extensible Virtual file system support User-defined authentication Getting started There is a quickstart tutorial available. What does it look like? (2.x) Head over to the quickstart tutorial to see an example for the FTP server v3.0 (unreleased). // Setup dependency injection var services = new ServiceCollection(); // use %TEMP%/TestFtpServer as root folder services.Configure<DotNetFileSystemOptions>(opt => opt .RootPath = Path.Combine(Path.GetTempPath(), \"TestFtpServer\")); // Add FTP server services // DotNetFileSystemProvider = Use the .NET file system functionality // AnonymousMembershipProvider = allow only anonymous logins services.AddFtpServer(builder => builder .UseDotNetFileSystem() // Use the .NET file system functionality .EnableAnonymousAuthentication()); // allow anonymous logins // Configure the FTP server services.Configure<FtpServerOptions>(opt => opt.ServerAddress = \"127.0.0.1\"); // Build the service provider using (var serviceProvider = services.BuildServiceProvider()) { // Initialize the FTP server var ftpServerHost = serviceProvider.GetRequiredService<IFtpServer>(); // Start the FTP server ftpServerHost.Start(); Console.WriteLine(\"Press ENTER/RETURN to close the test application.\"); Console.ReadLine(); // Stop the FTP server ftpServerHost.Stop(); } Further Information You find more information on the articles overview ."
  },
  "articles/custom-file-system.html": {
    "href": "articles/custom-file-system.html",
    "title": "Custom File System Development | FTP Server documentation",
    "keywords": "Warning This guide is under construction! Overview This article will show you how to develop your own file system. Warning This is a very advanced topic requiring solid knowledge of .NET. Interfaces The following interfaces must be implemented: IFileSystemClassFactory is used to get user-specific file system access IUnixFileSystem provides the main file system operations IUnixDirectoryEntry represents a directory entry IUnixFileEntry represents a file entry"
  },
  "articles/google-drive.html": {
    "href": "articles/google-drive.html",
    "title": "Gooogle Drive-based virtual file system | FTP Server documentation",
    "keywords": "Introduction This is an example of a virtual file system that uses Google Drive as backend. Important It is a basic requirement that you know how to use the Google developer console to register your application and get the necessary credentials/information. The Google Drive support uses Googles .NET API which is an advantage for people already familiar with it. Adding the package to your project dotnet add package FubarDev.FtpServer.FileSystem.GoogleDrive Using a users drive This is what other applications do when they want to access your Google Drive and the easiest to configure/use. Getting the client secret Open the Google Developer Console Create a project Allow the project to use the Google Drive API Create an OAuth 2.0 client (Other) Download the client secrets file The client secrets file should look like this: { \"installed\": { \"client_id\": \"redacted.apps.googleusercontent.com\", \"project_id\": \"your-project-id-123456\", \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \"client_secret\": \"redacted\", \"redirect_uris\": [ \"urn:ietf:wg:oauth:2.0:oob\", \"http://localhost\" ] } } Configuring Google Drive as virtual file system // Configuration var userName = \"your-user-name@gmail.com\"; var clientSecretsFile = \"client_secret_redacted.apps.googleusercontent.com.json\"; // Loading the credentials UserCredential credential; using (var secretsSource = new System.IO.FileStream(clientSecretsFile, FileMode.Open)) { var secrets = GoogleClientSecrets.Load(secretsSource); credential = await GoogleWebAuthorizationBroker.AuthorizeAsync( secrets.Secrets, new[] { DriveService.Scope.DriveFile, DriveService.Scope.Drive }, userName, CancellationToken.None); } // Adding the FTP server using Google Drive services .AddFtpServer(sb => sb .UseGoogleDrive(credential) .EnableAnonymousAuthentication()); Starting the server Upon start, the FTP server loads the credentials and - if not already authenticated - opens the web page to authenticate your server to access the users Google Drive."
  },
  "articles/custom-authentication.html": {
    "href": "articles/custom-authentication.html",
    "title": "Custom Authentication Development | FTP Server documentation",
    "keywords": "Warning This guide is under construction! Overview This article will show you how to develop your own authentication. Warning This is a very advanced topic requiring solid knowledge of .NET. Interfaces The following interface must be implemented: IMembershipProvider is used to authenticate the user"
  },
  "articles/file-systems.html": {
    "href": "articles/file-systems.html",
    "title": "File Systems | FTP Server documentation",
    "keywords": "Overview The FTP server provides two file systems by default: System.IO -based file system Google Drive-based file system The System.IO -based file system is usually what you want and the Google Drive-based file system is a proof-of-concept. System.IO -based file system This file system just uses the operating systems underlying file system and serves it to the user. Configuration Here is an example of a configuration: services.Configure<DotNetFileSystemOptions>(cfg => { cfg.RootPath = \"/your/root/path\"; }); You can also configure the following: Usage of the user ID as subdirectory Is deletion of non-empty directories allowed? Google Drive-based file system This topic is explained in a separate article . Your own file system This topic is explained in a separate article ."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Install from NuGet.org | FTP Server documentation",
    "keywords": "Install from NuGet.org The project is split into multiple packages: Package Description FubarDev.FtpServer The FTP server implementation FubarDev.FtpServer.Abstractions The base classes/interfaces; Reference this to implement custom commands, file systems, authentication FubarDev.FtpServer.Commands The FTP commands implemented for this FTP server FubarDev.FtpServer.FileSystem.DotNet The System.IO-based file system access FubarDev.FtpServer.FileSystem.GoogleDrive Google Drive as virtual file system Getting Started Check out the tour of FluentMigrator in our Quickstart Basic topics Configuration Logging Authentication File Systems Advanced topics Logging FTPS Google Drive Custom File System Development Custom Authentication Development"
  },
  "articles/logging.html": {
    "href": "articles/logging.html",
    "title": "FTP Server logging | FTP Server documentation",
    "keywords": "Introduction The FTP server utilizes Microsoft.Extensions.Logging which provides an interface to many logging frameworks (e.g. NLog ). Example: Using SeriLog Adding SeriLog to the project Go to the quickstart project created during the Quickstart tutorial and add the following NuGet packages: # Serilog.Extensions.Logging dotnet add package Serilog.Extensions.Logging # Serilog.Sinks.Console dotnet add package Serilog.Sinks.Console Configure serilog in Program.cs Add the highlighted lines to your Program.cs: using System; using System.IO; using FubarDev.FtpServer; using FubarDev.FtpServer.FileSystem.DotNet; using Microsoft.Extensions.DependencyInjection; using Serilog; namespace QuickStart { class Program { static void Main(string[] args) { // Configure Serilog Log.Logger = new LoggerConfiguration() .MinimumLevel.Verbose() .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); // Setup dependency injection var services = new ServiceCollection(); // Add Serilog as logger provider services.AddLogging(lb => lb.AddSerilog()); // use %TEMP%/TestFtpServer as root folder services.Configure<DotNetFileSystemOptions>(opt => opt .RootPath = Path.Combine(Path.GetTempPath(), \"TestFtpServer\")); // Add FTP server services // DotNetFileSystemProvider = Use the .NET file system functionality // AnonymousMembershipProvider = allow only anonymous logins services.AddFtpServer(builder => builder .UseDotNetFileSystem() // Use the .NET file system functionality .EnableAnonymousAuthentication()); // allow anonymous logins // Configure the FTP server services.Configure<FtpServerOptions>(opt => opt.ServerAddress = \"127.0.0.1\"); // Build the service provider using (var serviceProvider = services.BuildServiceProvider()) { // Initialize the FTP server var ftpServerHost = serviceProvider.GetRequiredService<IFtpServerHost>(); // Start the FTP server ftpServerHost.StartAsync().Wait(); Console.WriteLine(\"Press ENTER/RETURN to close the test application.\"); Console.ReadLine(); // Stop the FTP server ftpServerHost.StopAsync().Wait(); } } } } Now you can see all the log messages from the FTP server. Example: Using NLog Adding NLog to the project Go to the quickstart project created during the Quickstart tutorial and add the following NuGet package: # Add NLog dotnet add package NLog.Extensions.Logging Add the NLog configuration Now add a file called nlog.config with the following contents: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd\" autoReload=\"true\" throwExceptions=\"false\"> <targets> <target xsi:type=\"ColoredConsole\" name=\"console\" layout=\"${longdate} ${uppercase:${level}} ${mdlc:item=RemoteAddress} ${message} ${exception:format=tostring}\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Trace\" writeTo=\"console\" /> </rules> </nlog> Add the configuration to the project Change the csproj file by adding the following lines: <Project Sdk=\"Microsoft.NET.Sdk\"> <ItemGroup> <ProjectReference Include=\"..\\..\\..\\src\\FubarDev.FtpServer\\FubarDev.FtpServer.csproj\" /> <ProjectReference Include=\"..\\..\\..\\src\\FubarDev.FtpServer.FileSystem.DotNet\\FubarDev.FtpServer.FileSystem.DotNet.csproj\" /> </ItemGroup> <ItemGroup> <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.1.0\" /> <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.1.0\" /> </ItemGroup> <ItemGroup> <Content Include=\"nlog.config\"> <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory> </Content> </ItemGroup> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>netcoreapp2.1</TargetFramework> <RootNamespace>QuickStart</RootNamespace> </PropertyGroup> </Project> This ensures that the nlog.config file gets copied into the build output folder and is available for the application. Registering NLog in Program.cs using System; using System.IO; using FubarDev.FtpServer; using FubarDev.FtpServer.FileSystem.DotNet; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using NLog.Extensions.Logging; namespace QuickStart { class Program { static void Main(string[] args) { // Setup dependency injection var services = new ServiceCollection(); // Add logging services.AddLogging(lb => lb.SetMinimumLevel(LogLevel.Trace)); // use %TEMP%/TestFtpServer as root folder services.Configure<DotNetFileSystemOptions>(opt => opt .RootPath = Path.Combine(Path.GetTempPath(), \"TestFtpServer\")); // Add FTP server services // DotNetFileSystemProvider = Use the .NET file system functionality // AnonymousMembershipProvider = allow only anonymous logins services.AddFtpServer(builder => builder .UseDotNetFileSystem() // Use the .NET file system functionality .EnableAnonymousAuthentication()); // allow anonymous logins // Configure the FTP server services.Configure<FtpServerOptions>(opt => opt.ServerAddress = \"127.0.0.1\"); // Build the service provider using (var serviceProvider = services.BuildServiceProvider()) { var loggerFactory = serviceProvider.GetRequiredService<ILoggerFactory>(); //configure NLog loggerFactory.AddNLog(new NLogProviderOptions { CaptureMessageTemplates = true, CaptureMessageProperties = true }); NLog.LogManager.LoadConfiguration(\"nlog.config\"); // Initialize the FTP server var ftpServerHost = serviceProvider.GetRequiredService<IFtpServerHost>(); // Start the FTP server ftpServerHost.StartAsync().Wait(); Console.WriteLine(\"Press ENTER/RETURN to close the test application.\"); Console.ReadLine(); // Stop the FTP server ftpServerHost.StopAsync().Wait(); } } } } Now you can see all the log messages from the FTP server."
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Your first FTP server | FTP Server documentation",
    "keywords": "Creating a project mkdir ftpserver cd ftpserver dotnet new console Adding the NuGet packages # For dependency injection support (required) dotnet add package Microsoft.Extensions.DependencyInjection # For the main FTP server dotnet add package FubarDev.FtpServer # For the System.IO-based file system access dotnet add package FubarDev.FtpServer.FileSystem.DotNet Using the FTP server Change your Program.cs to the following code: 3.0 2.x using System; using System.IO; using FubarDev.FtpServer; using FubarDev.FtpServer.FileSystem.DotNet; using Microsoft.Extensions.DependencyInjection; namespace QuickStart { class Program { static void Main(string[] args) { // Setup dependency injection var services = new ServiceCollection(); // use %TEMP%/TestFtpServer as root folder services.Configure<DotNetFileSystemOptions>(opt => opt .RootPath = Path.Combine(Path.GetTempPath(), \"TestFtpServer\")); // Add FTP server services // DotNetFileSystemProvider = Use the .NET file system functionality // AnonymousMembershipProvider = allow only anonymous logins services.AddFtpServer(builder => builder .UseDotNetFileSystem() // Use the .NET file system functionality .EnableAnonymousAuthentication()); // allow anonymous logins // Configure the FTP server services.Configure<FtpServerOptions>(opt => opt.ServerAddress = \"127.0.0.1\"); // Build the service provider using (var serviceProvider = services.BuildServiceProvider()) { // Initialize the FTP server var ftpServerHost = serviceProvider.GetRequiredService<IFtpServerHost>(); // Start the FTP server ftpServerHost.StartAsync().Wait(); Console.WriteLine(\"Press ENTER/RETURN to close the test application.\"); Console.ReadLine(); // Stop the FTP server ftpServerHost.StopAsync().Wait(); } } } } using System; using System.IO; using FubarDev.FtpServer; using FubarDev.FtpServer.FileSystem.DotNet; using Microsoft.Extensions.DependencyInjection; namespace QuickStart { class Program { static void Main(string[] args) { // Setup dependency injection var services = new ServiceCollection(); // use %TEMP%/TestFtpServer as root folder services.Configure<DotNetFileSystemOptions>(opt => opt .RootPath = Path.Combine(Path.GetTempPath(), \"TestFtpServer\")); // Add FTP server services // DotNetFileSystemProvider = Use the .NET file system functionality // AnonymousMembershipProvider = allow only anonymous logins services.AddFtpServer(builder => builder .UseDotNetFileSystem() // Use the .NET file system functionality .EnableAnonymousAuthentication()); // allow anonymous logins // Configure the FTP server services.Configure<FtpServerOptions>(opt => opt.ServerAddress = \"127.0.0.1\"); // Build the service provider using (var serviceProvider = services.BuildServiceProvider()) { // Initialize the FTP server var ftpServerHost = serviceProvider.GetRequiredService<IFtpServer>(); // Start the FTP server ftpServerHost.Start(); Console.WriteLine(\"Press ENTER/RETURN to close the test application.\"); Console.ReadLine(); // Stop the FTP server ftpServerHost.Stop(); } } } } Starting the FTP server dotnet run Now your FTP server should be accessible at 127.0.0.1:21 ."
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.ITemporaryDataFactory.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.ITemporaryDataFactory.html",
    "title": "Interface ITemporaryDataFactory | FTP Server documentation",
    "keywords": "Interface ITemporaryDataFactory Factory for temporary data objects. Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface ITemporaryDataFactory Methods | Improve this Doc View Source CreateAsync(Stream, Nullable<Int64>, CancellationToken) Creates a temporary data object for data with the expected size. Declaration Task<ITemporaryData> CreateAsync(Stream input, long? expectedSize, CancellationToken cancellationToken) Parameters Type Name Description Stream input The stream containing the data. Nullable < Int64 > expectedSize The expected data size. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ITemporaryData > The created temporary data object."
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.CreateFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.CreateFact.html",
    "title": "Class CreateFact | FTP Server documentation",
    "keywords": "Class CreateFact The create fact. Inheritance Object CreateFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class CreateFact : IFact Constructors | Improve this Doc View Source CreateFact(DateTimeOffset) Initializes a new instance of the CreateFact class. Declaration public CreateFact(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp The creation timestamp. Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Gets the creation time stamp. Declaration public DateTimeOffset Timestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixPermissions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixPermissions.html",
    "title": "Interface IUnixPermissions | FTP Server documentation",
    "keywords": "Interface IUnixPermissions Unix file system entry permissions. Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixPermissions Properties | Improve this Doc View Source Group Gets the group permissions. Declaration [NotNull] IAccessMode Group { get; } Property Value Type Description IAccessMode | Improve this Doc View Source Other Gets the other permissions. Declaration [NotNull] IAccessMode Other { get; } Property Value Type Description IAccessMode | Improve this Doc View Source User Gets the user permissions. Declaration [NotNull] IAccessMode User { get; } Property Value Type Description IAccessMode Extension Methods PermissionsExtensions.GetAccessModeFor(IUnixPermissions, IUnixOwner, IFtpUser)"
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileEntry.html",
    "title": "Class InMemoryFileEntry | FTP Server documentation",
    "keywords": "Class InMemoryFileEntry The in-memory file. Inheritance Object InMemoryFileSystemEntry InMemoryFileEntry Implements IUnixFileEntry IUnixFileSystemEntry IUnixOwner Inherited Members InMemoryFileSystemEntry.Name InMemoryFileSystemEntry.Owner InMemoryFileSystemEntry.Group InMemoryFileSystemEntry.Permissions InMemoryFileSystemEntry.LastWriteTime InMemoryFileSystemEntry.CreatedTime InMemoryFileSystemEntry.NumberOfLinks InMemoryFileSystemEntry.FileSystem InMemoryFileSystemEntry.Parent InMemoryFileSystemEntry.WithOwner(IFtpUser) InMemoryFileSystemEntry.SetLastWriteTime(DateTimeOffset) InMemoryFileSystemEntry.SetCreateTime(DateTimeOffset) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public class InMemoryFileEntry : InMemoryFileSystemEntry, IUnixFileEntry, IUnixFileSystemEntry, IUnixOwner Constructors | Improve this Doc View Source InMemoryFileEntry(IUnixFileSystem, InMemoryDirectoryEntry, String, Byte[]) Initializes a new instance of the InMemoryFileEntry class. Declaration public InMemoryFileEntry(IUnixFileSystem fileSystem, InMemoryDirectoryEntry parent, string name, byte[] data) Parameters Type Name Description IUnixFileSystem fileSystem The file system this entry belongs to. InMemoryDirectoryEntry parent The parent entry. String name The name of this entry. Byte [] data The file data. Properties | Improve this Doc View Source Data Gets or sets the data of this file entry. Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Size Gets the size of the file. Declaration public long Size { get; } Property Value Type Description Int64 Implements IUnixFileEntry IUnixFileSystemEntry IUnixOwner"
  },
  "api/FubarDev.FtpServer.FileSystem.FileSystemExtensions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.FileSystemExtensions.html",
    "title": "Class FileSystemExtensions | FTP Server documentation",
    "keywords": "Class FileSystemExtensions Extensions for the file system stuff. Inheritance Object FileSystemExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public static class FileSystemExtensions Methods | Improve this Doc View Source Clone(Stack<IUnixDirectoryEntry>) Clone the stack of directory entries. Declaration [NotNull] [ItemNotNull] public static Stack<IUnixDirectoryEntry> Clone([NotNull, ItemNotNull] this Stack<IUnixDirectoryEntry> path) Parameters Type Name Description Stack < IUnixDirectoryEntry > path The stack of directory entries to clone. Returns Type Description Stack < IUnixDirectoryEntry > the cloned path . | Improve this Doc View Source CombinePath(String, IEnumerable<String>) Appends parts to a path. Declaration [NotNull] public static string CombinePath([CanBeNull] string path, [NotNull, ItemNotNull] IEnumerable<string> parts) Parameters Type Name Description String path The path to append to. IEnumerable < String > parts The parts to append. Returns Type Description String The combined path. | Improve this Doc View Source CombinePath(String, String[]) Appends parts to a path. Declaration [NotNull] public static string CombinePath([CanBeNull] string path, [NotNull, ItemNotNull] params string[] parts) Parameters Type Name Description String path The path to append to. String [] parts The parts to append. Returns Type Description String The combined path. | Improve this Doc View Source GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) Get the directory for the given pathElements . Declaration [NotNull] [ItemCanBeNull] public static Task<IUnixDirectoryEntry> GetDirectoryAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [NotNull, ItemNotNull] IReadOnlyList<string> pathElements, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The file system to get the directory for. Stack < IUnixDirectoryEntry > currentPath The current path. IReadOnlyList < String > pathElements The (absolute or relative) path to get the directory for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The found IUnixDirectoryEntry or null . | Improve this Doc View Source GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) Get the directory for the given path . Declaration [NotNull] [ItemCanBeNull] public static Task<IUnixDirectoryEntry> GetDirectoryAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [CanBeNull] string path, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The file system to get the directory for. Stack < IUnixDirectoryEntry > currentPath The current path. String path The (absolute or relative) path to get the directory for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The found IUnixDirectoryEntry or null . | Improve this Doc View Source GetFullPath(Stack<IUnixDirectoryEntry>) Returns the path as string. Declaration [NotNull] public static string GetFullPath([NotNull, ItemNotNull] this Stack<IUnixDirectoryEntry> path) Parameters Type Name Description Stack < IUnixDirectoryEntry > path The path to convert to string. Returns Type Description String The path as string. | Improve this Doc View Source GetFullPath(Stack<IUnixDirectoryEntry>, String) Returns the path as string. Declaration [NotNull] public static string GetFullPath([NotNull, ItemNotNull] this Stack<IUnixDirectoryEntry> path, [CanBeNull] string fileName) Parameters Type Name Description Stack < IUnixDirectoryEntry > path The path to convert to string. String fileName The file name to append to the path . Returns Type Description String The combination of path and fileName as string. | Improve this Doc View Source GetParentPath(String) Returns the parent path of the path . Declaration [NotNull] public static string GetParentPath([NotNull] this string path) Parameters Type Name Description String path The path to get the parent path from. Returns Type Description String The parent path. | Improve this Doc View Source IsChildOfOrSameAs(Stack<IUnixDirectoryEntry>, Stack<IUnixDirectoryEntry>, IUnixFileSystem) Determines whether the pathToTestAsChild is a child or the same path as pathToTestAsParent . Declaration public static bool IsChildOfOrSameAs([NotNull, ItemNotNull] this Stack<IUnixDirectoryEntry> pathToTestAsChild, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> pathToTestAsParent, [NotNull] IUnixFileSystem fileSystem) Parameters Type Name Description Stack < IUnixDirectoryEntry > pathToTestAsChild The path to test as child. Stack < IUnixDirectoryEntry > pathToTestAsParent The path to test as parent. IUnixFileSystem fileSystem The file system to use to compare the file names. Returns Type Description Boolean true if the pathToTestAsChild is a child or the same path as pathToTestAsParent . | Improve this Doc View Source SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) Searches for a IUnixDirectoryEntry by using the currentPath and pathElements . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixDirectoryEntry>> SearchDirectoryAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [NotNull, ItemNotNull] IReadOnlyList<string> pathElements, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. IReadOnlyList < String > pathElements The relative path elements to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixDirectoryEntry >> The found IUnixDirectoryEntry . | Improve this Doc View Source SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) Searches for a IUnixDirectoryEntry by using the currentPath and path . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixDirectoryEntry>> SearchDirectoryAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [CanBeNull] string path, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. String path The relative path to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixDirectoryEntry >> The found IUnixDirectoryEntry . | Improve this Doc View Source SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) Searches for a IUnixFileSystemEntry by using the currentPath and pathElements . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixFileSystemEntry>> SearchEntryAsync(this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [NotNull, ItemNotNull] IReadOnlyList<string> pathElements, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. IReadOnlyList < String > pathElements The relative path elements to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixFileSystemEntry >> The found IUnixFileSystemEntry . | Improve this Doc View Source SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) Searches for a IUnixFileSystemEntry by using the currentPath and path . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixFileSystemEntry>> SearchEntryAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [CanBeNull] string path, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. String path The relative path to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixFileSystemEntry >> The found IUnixFileSystemEntry . | Improve this Doc View Source SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) Searches for a IUnixFileEntry by using the currentPath and pathElements . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixFileEntry>> SearchFileAsync(this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [NotNull, ItemNotNull] IReadOnlyList<string> pathElements, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. IReadOnlyList < String > pathElements The relative path elements to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixFileEntry >> The found IUnixDirectoryEntry . | Improve this Doc View Source SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) Searches for a IUnixFileEntry by using the currentPath and path . Declaration [NotNull] [ItemCanBeNull] public static Task<SearchResult<IUnixFileEntry>> SearchFileAsync([NotNull] this IUnixFileSystem fileSystem, [NotNull, ItemNotNull] Stack<IUnixDirectoryEntry> currentPath, [CanBeNull] string path, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystem fileSystem The underlying IUnixFileSystem . Stack < IUnixDirectoryEntry > currentPath The current path. String path The relative path to search for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < SearchResult < IUnixFileEntry >> The found IUnixDirectoryEntry . | Improve this Doc View Source SplitPath(String) Split the path into parts. Declaration [NotNull] [ItemNotNull] public static IReadOnlyList<string> SplitPath([CanBeNull] string path) Parameters Type Name Description String path The path to split. Returns Type Description IReadOnlyList < String > The parts of the path. | Improve this Doc View Source ToDisplayString(Stack<IUnixDirectoryEntry>) Returns the path as string like GetFullPath(Stack<IUnixDirectoryEntry>) , with the difference that it doesn't add the trailing / . Declaration [NotNull] public static string ToDisplayString([NotNull, ItemNotNull] this Stack<IUnixDirectoryEntry> path) Parameters Type Name Description Stack < IUnixDirectoryEntry > path The path to convert to string. Returns Type Description String The path as string."
  },
  "api/FubarDev.FtpServer.FtpCommandCollector.html": {
    "href": "api/FubarDev.FtpServer.FtpCommandCollector.html",
    "title": "Class FtpCommandCollector | FTP Server documentation",
    "keywords": "Class FtpCommandCollector Collects FTP commands using the current Encoding . Inheritance Object FtpCommandCollector Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public sealed class FtpCommandCollector Constructors | Improve this Doc View Source FtpCommandCollector(Func<Encoding>) Initializes a new instance of the FtpCommandCollector class. Declaration public FtpCommandCollector(Func<Encoding> getActiveEncodingFunc) Parameters Type Name Description Func < Encoding > getActiveEncodingFunc The delegate to get the current encoding for. Properties | Improve this Doc View Source Encoding Gets the currently active Encoding . Declaration public Encoding Encoding { get; } Property Value Type Description Encoding | Improve this Doc View Source IsEmpty Gets a value indicating whether this collector contains unused data. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Collect(ReadOnlySpan<Byte>) Collects the data from the buffer and tries to build FtpCommand objects from it. Declaration [NotNull] [ItemNotNull] public IEnumerable<FtpCommand> Collect(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan < Byte > buffer The buffer to collect the data from. Returns Type Description IEnumerable < FtpCommand > The found FtpCommand s."
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveOptions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveOptions.html",
    "title": "Class GoogleDriveOptions | FTP Server documentation",
    "keywords": "Class GoogleDriveOptions Options for the Google Drive-based file system. Inheritance Object GoogleDriveOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.GoogleDrive Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public class GoogleDriveOptions Properties | Improve this Doc View Source UseBackgroundUpload Gets or sets a value indicating whether a background upload should be used. Declaration public bool UseBackgroundUpload { get; set; } Property Value Type Description Boolean Remarks If this is set to false, then the direct upload is used."
  },
  "api/FubarDev.FtpServer.CommandHandlers.UserCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.UserCommandHandler.html",
    "title": "Class UserCommandHandler | FTP Server documentation",
    "keywords": "Class UserCommandHandler Implements the USER command. Inheritance Object FtpCommandHandler UserCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class UserCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source UserCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the UserCommandHandler class. Declaration public UserCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.DotNetFtpServerBuilderExtensions.html": {
    "href": "api/FubarDev.FtpServer.DotNetFtpServerBuilderExtensions.html",
    "title": "Class DotNetFtpServerBuilderExtensions | FTP Server documentation",
    "keywords": "Class DotNetFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . Inheritance Object DotNetFtpServerBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public static class DotNetFtpServerBuilderExtensions Methods | Improve this Doc View Source UseDotNetFileSystem(IFtpServerBuilder) Uses the .NET file system API. Declaration public static IFtpServerBuilder UseDotNetFileSystem(this IFtpServerBuilder builder) Parameters Type Name Description IFtpServerBuilder builder The server builder used to configure the FTP server. Returns Type Description IFtpServerBuilder the server builder used to configure the FTP server."
  },
  "api/FubarDev.FtpServer.html": {
    "href": "api/FubarDev.FtpServer.html",
    "title": "Namespace FubarDev.FtpServer | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer Classes Address Abstraction for an IP address. AuthTlsOptions Options for SSL/TLS connections. ConnectionEventArgs Event arguments for a connection event. ConnectionExtensions Extension methods for IFtpConnection . DotNetFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . FtpCommand FTP command with argument. FtpCommandCollector Collects FTP commands using the current Encoding . FtpConnection This class represents a FTP connection. FtpConnectionAccessor Accessor for the active FTP connection. FtpConnectionData Common data for a IFtpConnection . FtpConnectionOptions Options for the FTP connection. FtpResponse FTP response. FtpServer The portable FTP server. FtpServerBuilderExtensions Extension methods for IFtpServerBuilder . FtpServerHost Simple IFtpServerHost implementation. FtpServerOptions The FTP server options. FtpServerStatistics Statistics about the FTP server. FtpTransferMode FTP transfer mode (RFC 959, 3.4.). GenericFeatureInfo Generic feature information. GoogleDriveFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . InMemoryFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . MultiBindingTcpListener Allows binding to a host name, which in turn may resolve to multiple IP addresses. PasvListener The default implementation of the IPasvListener interface. PasvListenerFactory Creates TcpListeners for use with PASV commands. PermissionsExtensions Extension methods for IUnixPermissions . SystCommandOptions Options for the SYST command. TcpSocketClientAccessor Accessor to set/get the current TcpClient . TelnetInputParser<T> Filters the TELNET commands usually sent before an ABOR command. Interfaces IAccountInformation Information about the account associated to a connection. IBackgroundCommandHandler Interface for asynchronous processing of an FTP command. IFeatureInfo Defines a feature and its handler. IFtpCommandBase The base interface for command handlers and extensions. IFtpCommandHandler Interface that an FTP command handler has to implement. IFtpCommandHandlerExtension Interface for command handler extensions. IFtpConnection The interface for an FTP connection. IFtpConnectionAccessor Accessor to get/set the current (scoped) FTP connection. IFtpServer The interface that must be implemented by the FTP server. IFtpServerBuilder Base interface for FubarDev.FtpServer configuration. IFtpServerHost Interface for a simple FTP server host. IFtpServerStatistics Statistics about the FTP server. IFtpService Defines methods for services required to run the FTP server. IListFormatter Interface that provides the text to output for the LIST and NLST commands. IPasvListener Wraps a TCPListener so we can easily use it in our commands that require a passive data connection. IPasvListenerFactory Creates correctly configured IPasvListener . Enums FtpFileType FTP data type (3.1.1). FtpFileTypeInterpreterMode Format control (RFC 959 chapter 3.1.1.5). Delegates CreateEncryptedStreamDelegate A delegate that's used to create an encrypted stream ( CreateEncryptedStream ). FtpCommandHandlerProcessDelegate Processes the command."
  },
  "api/FubarDev.FtpServer.AccountManagement.AnonymousFtpUser.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.AnonymousFtpUser.html",
    "title": "Class AnonymousFtpUser | FTP Server documentation",
    "keywords": "Class AnonymousFtpUser An anonymous FTP user. Inheritance Object AnonymousFtpUser Implements IAnonymousFtpUser IFtpUser Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class AnonymousFtpUser : IAnonymousFtpUser, IFtpUser Constructors | Improve this Doc View Source AnonymousFtpUser(String) Initializes a new instance of the AnonymousFtpUser class. Declaration public AnonymousFtpUser([CanBeNull] string email) Parameters Type Name Description String email The anonymous users email address. Properties | Improve this Doc View Source Email Gets the anonymous users email address. Declaration public string Email { get; } Property Value Type Description String | Improve this Doc View Source Name Gets the name of the user. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source IsInGroup(String) Returns true when the user is in the given group. Declaration public bool IsInGroup(string groupName) Parameters Type Name Description String groupName The name of the group. Returns Type Description Boolean true when the user is in the queries groupName . Implements IAnonymousFtpUser IFtpUser"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.TypeFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.TypeFact.html",
    "title": "Class TypeFact | FTP Server documentation",
    "keywords": "Class TypeFact The type fact. Inheritance Object TypeFact CurrentDirectoryFact ParentDirectoryFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class TypeFact : IFact Constructors | Improve this Doc View Source TypeFact(IUnixFileSystemEntry) Initializes a new instance of the TypeFact class. Declaration public TypeFact(IUnixFileSystemEntry entry) Parameters Type Name Description IUnixFileSystemEntry entry The file system entry to get the type fact for. | Improve this Doc View Source TypeFact(String) Initializes a new instance of the TypeFact class. Declaration protected TypeFact(string type) Parameters Type Name Description String type The value of this fact (usually file or dir ). Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.IPasvListenerFactory.html": {
    "href": "api/FubarDev.FtpServer.IPasvListenerFactory.html",
    "title": "Interface IPasvListenerFactory | FTP Server documentation",
    "keywords": "Interface IPasvListenerFactory Creates correctly configured IPasvListener . Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IPasvListenerFactory Methods | Improve this Doc View Source CreateTcpListener(IFtpConnection, Int32) Create a new TcpListener for the given connection. Declaration Task<IPasvListener> CreateTcpListener(IFtpConnection connection, int port = 0) Parameters Type Name Description IFtpConnection connection connection on which to create the tcp listener. Int32 port listen on the given port, or 0 for any port. Returns Type Description Task < IPasvListener > A TcpListener. Exceptions Type Condition SocketException Network error, such as no free port. ArgumentOutOfRangeException The chosen port was not within the configured range of ports."
  },
  "api/FubarDev.FtpServer.GoogleDriveFtpServerBuilderExtensions.html": {
    "href": "api/FubarDev.FtpServer.GoogleDriveFtpServerBuilderExtensions.html",
    "title": "Class GoogleDriveFtpServerBuilderExtensions | FTP Server documentation",
    "keywords": "Class GoogleDriveFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . Inheritance Object GoogleDriveFtpServerBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public static class GoogleDriveFtpServerBuilderExtensions Methods | Improve this Doc View Source UseGoogleDrive(IFtpServerBuilder, IConfigurableHttpClientInitializer, String) Uses Google Drive as file system. Declaration public static IFtpServerBuilder UseGoogleDrive(this IFtpServerBuilder builder, IConfigurableHttpClientInitializer httpClientInitializer, string applicationName = \"FTP Server\") Parameters Type Name Description IFtpServerBuilder builder The server builder used to configure the FTP server. Google.Apis.Http.IConfigurableHttpClientInitializer httpClientInitializer The HTTP client initializer. String applicationName The application name. Returns Type Description IFtpServerBuilder the server builder used to configure the FTP server. | Improve this Doc View Source UseGoogleDrive(IFtpServerBuilder, Func<IServiceProvider, DriveService>) Uses Google Drive as file system. Declaration public static IFtpServerBuilder UseGoogleDrive(this IFtpServerBuilder builder, Func<IServiceProvider, DriveService> createDriveService) Parameters Type Name Description IFtpServerBuilder builder The server builder used to configure the FTP server. Func < IServiceProvider , Google.Apis.Drive.v3.DriveService > createDriveService Create the Google.Apis.Drive.v3.DriveService to be used to access the Google Drive API. Returns Type Description IFtpServerBuilder the server builder used to configure the FTP server."
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemEntry.html",
    "title": "Class InMemoryFileSystemEntry | FTP Server documentation",
    "keywords": "Class InMemoryFileSystemEntry The base class for all in-memory file system entries. Inheritance Object InMemoryFileSystemEntry InMemoryDirectoryEntry InMemoryFileEntry Implements IUnixFileSystemEntry IUnixOwner Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public abstract class InMemoryFileSystemEntry : IUnixFileSystemEntry, IUnixOwner Constructors | Improve this Doc View Source InMemoryFileSystemEntry(IUnixFileSystem, InMemoryDirectoryEntry, String, IUnixPermissions) Initializes a new instance of the InMemoryFileSystemEntry class. Declaration protected InMemoryFileSystemEntry(IUnixFileSystem fileSystem, InMemoryDirectoryEntry parent, string name, IUnixPermissions permissions) Parameters Type Name Description IUnixFileSystem fileSystem The file system this entry belongs to. InMemoryDirectoryEntry parent The parent entry. String name The name of this entry. IUnixPermissions permissions The permissions of this entry. Properties | Improve this Doc View Source CreatedTime Gets the time of creation. Declaration public DateTimeOffset? CreatedTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source FileSystem Gets the file system this entry belongs to. Declaration public IUnixFileSystem FileSystem { get; } Property Value Type Description IUnixFileSystem | Improve this Doc View Source Group Gets the group. Declaration public string Group { get; } Property Value Type Description String | Improve this Doc View Source LastWriteTime Gets the last write time. Declaration public DateTimeOffset? LastWriteTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Name Gets the name of the file system entry. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source NumberOfLinks Gets the number of links. Declaration public long NumberOfLinks { get; } Property Value Type Description Int64 | Improve this Doc View Source Owner Gets the owner. Declaration public string Owner { get; } Property Value Type Description String | Improve this Doc View Source Parent Gets or sets the parent entry. Declaration [CanBeNull] public InMemoryDirectoryEntry Parent { get; set; } Property Value Type Description InMemoryDirectoryEntry | Improve this Doc View Source Permissions Gets the file entry permissions. Declaration public IUnixPermissions Permissions { get; } Property Value Type Description IUnixPermissions Methods | Improve this Doc View Source SetCreateTime(DateTimeOffset) Sets the creation time. Declaration public InMemoryFileSystemEntry SetCreateTime(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp The new value of the creation time. Returns Type Description InMemoryFileSystemEntry The changed file system entry. | Improve this Doc View Source SetLastWriteTime(DateTimeOffset) Sets the last write time. Declaration public InMemoryFileSystemEntry SetLastWriteTime(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp The new value of the last write time. Returns Type Description InMemoryFileSystemEntry The changed file system entry. | Improve this Doc View Source WithOwner(IFtpUser) Configure directory entry as owned by given user . Declaration public InMemoryFileSystemEntry WithOwner(IFtpUser user) Parameters Type Name Description IFtpUser user The user that becomes the new owner of this directory entry. Returns Type Description InMemoryFileSystemEntry The changed file system entry. Implements IUnixFileSystemEntry IUnixOwner"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.StorageExceededException.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.StorageExceededException.html",
    "title": "Class StorageExceededException | FTP Server documentation",
    "keywords": "Class StorageExceededException Requested file action aborted. Exceeded storage allocation (for current directory or dataset). Inheritance Object Exception FileSystemException StorageExceededException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer.FileSystem.Error Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class StorageExceededException : FileSystemException, ISerializable Constructors | Improve this Doc View Source StorageExceededException() Initializes a new instance of the StorageExceededException class. Declaration public StorageExceededException() | Improve this Doc View Source StorageExceededException(String) Initializes a new instance of the StorageExceededException class. Declaration public StorageExceededException(string message) Parameters Type Name Description String message The error message. | Improve this Doc View Source StorageExceededException(String, Exception) Initializes a new instance of the StorageExceededException class. Declaration public StorageExceededException(string message, Exception innerException) Parameters Type Name Description String message The error message. Exception innerException The underlying exception. Properties | Improve this Doc View Source FtpErrorCode Gets the FTP error code. Declaration public override int FtpErrorCode { get; } Property Value Type Description Int32 Overrides FileSystemException.FtpErrorCode | Improve this Doc View Source FtpErrorName Gets a human-readable generic error description. Declaration public override string FtpErrorName { get; } Property Value Type Description String Overrides FileSystemException.FtpErrorName Implements System.Runtime.Serialization.ISerializable"
  },
  "api/FubarDev.FtpServer.CommandExtensions.OptsUtf8CommandExtension.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.OptsUtf8CommandExtension.html",
    "title": "Class OptsUtf8CommandExtension | FTP Server documentation",
    "keywords": "Class OptsUtf8CommandExtension The implementation of the OPTS UTF8 command. Inheritance Object FtpCommandHandlerExtension OptsUtf8CommandExtension Implements IFtpCommandHandlerExtension IFtpCommandBase Inherited Members FtpCommandHandlerExtension.Names FtpCommandHandlerExtension.IsLoginRequired FtpCommandHandlerExtension.ExtensionFor FtpCommandHandlerExtension.Connection FtpCommandHandlerExtension.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandExtensions Assembly : FubarDev.FtpServer.Commands.dll Syntax public class OptsUtf8CommandExtension : FtpCommandHandlerExtension, IFtpCommandHandlerExtension, IFtpCommandBase Constructors | Improve this Doc View Source OptsUtf8CommandExtension(IFtpConnectionAccessor) Initializes a new instance of the OptsUtf8CommandExtension class. Declaration public OptsUtf8CommandExtension([NotNull] IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration public override void InitializeConnectionData() Overrides FtpCommandHandlerExtension.InitializeConnectionData() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandlerExtension.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtension IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.Address.html": {
    "href": "api/FubarDev.FtpServer.Address.html",
    "title": "Class Address | FTP Server documentation",
    "keywords": "Class Address Abstraction for an IP address. Inheritance Object Address Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class Address Constructors | Improve this Doc View Source Address(Int32) Initializes a new instance of the Address class. Declaration public Address(int port) Parameters Type Name Description Int32 port The port. Remarks This constructor omits the address part. | Improve this Doc View Source Address(String, Int32) Initializes a new instance of the Address class. Declaration public Address(string address, int port) Parameters Type Name Description String address IPv4 address. Int32 port The port. Properties | Improve this Doc View Source AddressFamily Gets the IP address family. Declaration public AddressFamily? AddressFamily { get; } Property Value Type Description Nullable < AddressFamily > | Improve this Doc View Source IPAddress Gets the IP address. Declaration [CanBeNull] public IPAddress IPAddress { get; } Property Value Type Description IPAddress | Improve this Doc View Source Port Gets the port. Declaration public int Port { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Parse(String) Parses an IP address. Declaration public static Address Parse(string address) Parameters Type Name Description String address The IP address to parse. Returns Type Description Address The parsed IP address. | Improve this Doc View Source ToString() Converts the IP address to a string as required by the PASV command. Declaration public override string ToString() Returns Type Description String The IP address as string. Overrides Object.ToString() | Improve this Doc View Source ToString(Boolean) Converts the IP address into a string. Declaration public string ToString(bool logFormat) Parameters Type Name Description Boolean logFormat true when it should be converted to a loggable format, otherwise the FTP format is used. Returns Type Description String The IP address as string. | Improve this Doc View Source ToUri() Converts this address to an URI. Declaration public Uri ToUri() Returns Type Description Uri The newly created URI."
  },
  "api/FubarDev.FtpServer.IFtpConnection.html": {
    "href": "api/FubarDev.FtpServer.IFtpConnection.html",
    "title": "Interface IFtpConnection | FTP Server documentation",
    "keywords": "Interface IFtpConnection The interface for an FTP connection. Inherited Members IDisposable.Dispose() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpConnection : IDisposable Properties | Improve this Doc View Source CommandHandlers Gets the dictionary of all known command handlers. Declaration [NotNull] IReadOnlyDictionary<string, IFtpCommandHandler> CommandHandlers { get; } Property Value Type Description IReadOnlyDictionary < String , IFtpCommandHandler > | Improve this Doc View Source Data Gets the FTP connection data. Declaration [NotNull] FtpConnectionData Data { get; } Property Value Type Description FtpConnectionData | Improve this Doc View Source Encoding Gets or sets the encoding for the LIST/NLST commands. Declaration [NotNull] Encoding Encoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source IsSecure Gets a value indicating whether this is a secure connection. Declaration bool IsSecure { get; } Property Value Type Description Boolean | Improve this Doc View Source LocalEndPoint Gets the local end point. Declaration [NotNull] IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint | Improve this Doc View Source Log Gets the FTP connection logger. Declaration [CanBeNull] ILogger Log { get; } Property Value Type Description ILogger | Improve this Doc View Source OriginalStream Gets the control connection stream. Declaration [NotNull] Stream OriginalStream { get; } Property Value Type Description Stream | Improve this Doc View Source PromiscuousPasv Gets a value indicating whether to accept PASV connections from any source. If false (default), connections to a PASV port will only be accepted from the same IP that issued the respective PASV command. Declaration bool PromiscuousPasv { get; } Property Value Type Description Boolean | Improve this Doc View Source RemoteAddress Gets the remote address of the client. Declaration [NotNull] Address RemoteAddress { get; } Property Value Type Description Address | Improve this Doc View Source SocketStream Gets or sets the control connection stream. Declaration [NotNull] Stream SocketStream { get; set; } Property Value Type Description Stream Methods | Improve this Doc View Source Close() Closes the connection. Declaration void Close() | Improve this Doc View Source CreateEncryptedStream(Stream) Create an encrypted stream. Declaration [NotNull] [ItemNotNull] Task<Stream> CreateEncryptedStream([NotNull] Stream unencryptedStream) Parameters Type Name Description Stream unencryptedStream The stream to encrypt. Returns Type Description Task < Stream > The encrypted stream. | Improve this Doc View Source CreateResponseSocket() Creates a response socket for e.g. LIST/NLST. Declaration Task<TcpClient> CreateResponseSocket() Returns Type Description Task < TcpClient > The data connection. | Improve this Doc View Source Start() Starts processing of messages for this connection. Declaration void Start() | Improve this Doc View Source WriteAsync(FtpResponse, CancellationToken) Writes a FTP response to a client. Declaration Task WriteAsync([NotNull] FtpResponse response, CancellationToken cancellationToken) Parameters Type Name Description FtpResponse response The response to write to the client. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task. | Improve this Doc View Source WriteAsync(String, CancellationToken) Writes response to a client. Declaration Task WriteAsync([NotNull] string response, CancellationToken cancellationToken) Parameters Type Name Description String response The response to write to the client. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task. Events | Improve this Doc View Source Closed Gets or sets the event handler that is triggered when the connection is closed. Declaration event EventHandler Closed Event Type Type Description EventHandler Extension Methods ConnectionExtensions.SendResponseAsync(IFtpConnection, Func<TcpClient, Task<FtpResponse>>, Func<Exception, FtpResponse>)"
  },
  "api/FubarDev.FtpServer.IFtpCommandHandlerExtension.html": {
    "href": "api/FubarDev.FtpServer.IFtpCommandHandlerExtension.html",
    "title": "Interface IFtpCommandHandlerExtension | FTP Server documentation",
    "keywords": "Interface IFtpCommandHandlerExtension Interface for command handler extensions. Inherited Members IFtpCommandBase.Names IFtpCommandBase.Process(FtpCommand, CancellationToken) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpCommandHandlerExtension : IFtpCommandBase Properties | Improve this Doc View Source ExtensionFor Gets a name of the command this extension is for. Declaration [NotNull] string ExtensionFor { get; } Property Value Type Description String | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration bool? IsLoginRequired { get; } Property Value Type Description Nullable < Boolean > Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration void InitializeConnectionData()"
  },
  "api/FubarDev.FtpServer.AccountManagement.MemberValidationResult.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.MemberValidationResult.html",
    "title": "Class MemberValidationResult | FTP Server documentation",
    "keywords": "Class MemberValidationResult Result for a member validation. Inheritance Object MemberValidationResult Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class MemberValidationResult Constructors | Improve this Doc View Source MemberValidationResult(MemberValidationStatus) Initializes a new instance of the MemberValidationResult class. Declaration public MemberValidationResult(MemberValidationStatus status) Parameters Type Name Description MemberValidationStatus status The error status for the validation. | Improve this Doc View Source MemberValidationResult(MemberValidationStatus, IFtpUser) Initializes a new instance of the MemberValidationResult class. Declaration public MemberValidationResult(MemberValidationStatus status, IFtpUser user) Parameters Type Name Description MemberValidationStatus status The success status for the validation. IFtpUser user The validated user. Properties | Improve this Doc View Source IsSuccess Gets a value indicating whether the user login succeeded. Declaration public bool IsSuccess { get; } Property Value Type Description Boolean | Improve this Doc View Source Status Gets the status of the validation. Declaration public MemberValidationStatus Status { get; } Property Value Type Description MemberValidationStatus | Improve this Doc View Source User Gets the authenticated user. Declaration public IFtpUser User { get; } Property Value Type Description IFtpUser"
  },
  "api/FubarDev.FtpServer.AuthTlsOptions.html": {
    "href": "api/FubarDev.FtpServer.AuthTlsOptions.html",
    "title": "Class AuthTlsOptions | FTP Server documentation",
    "keywords": "Class AuthTlsOptions Options for SSL/TLS connections. Inheritance Object AuthTlsOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Commands.dll Syntax public class AuthTlsOptions Properties | Improve this Doc View Source ServerCertificate Gets or sets the server certificate. Declaration public X509Certificate2 ServerCertificate { get; set; } Property Value Type Description X509Certificate2"
  },
  "api/FubarDev.FtpServer.ListFormatters.ShortListFormatter.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.ShortListFormatter.html",
    "title": "Class ShortListFormatter | FTP Server documentation",
    "keywords": "Class ShortListFormatter The IListFormatter for the short directory listing format (name only). Inheritance Object ShortListFormatter Implements IListFormatter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class ShortListFormatter : IListFormatter Methods | Improve this Doc View Source Format(IUnixFileSystemEntry, String) Gets the output line to write for the given IUnixFileSystemEntry . Declaration public string Format(IUnixFileSystemEntry entry, string name) Parameters Type Name Description IUnixFileSystemEntry entry The entry to create the output line for. String name Returns Type Description String The text to write to the client. Implements IListFormatter"
  },
  "api/FubarDev.FtpServer.ListFormatters.LongListFormatter.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.LongListFormatter.html",
    "title": "Class LongListFormatter | FTP Server documentation",
    "keywords": "Class LongListFormatter The IListFormatter for the long directory listing format. Inheritance Object LongListFormatter Implements IListFormatter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class LongListFormatter : IListFormatter Methods | Improve this Doc View Source Format(IUnixFileSystemEntry, String) Gets the output line to write for the given IUnixFileSystemEntry . Declaration public string Format(IUnixFileSystemEntry entry, string name) Parameters Type Name Description IUnixFileSystemEntry entry The entry to create the output line for. String name Returns Type Description String The text to write to the client. Implements IListFormatter"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.TemporaryDataFactory.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.TemporaryDataFactory.html",
    "title": "Class TemporaryDataFactory | FTP Server documentation",
    "keywords": "Class TemporaryDataFactory Factory to create ITemporaryData objects. Inheritance Object TemporaryDataFactory Implements ITemporaryDataFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class TemporaryDataFactory : ITemporaryDataFactory Constructors | Improve this Doc View Source TemporaryDataFactory() Initializes a new instance of the TemporaryDataFactory class. Declaration public TemporaryDataFactory() Methods | Improve this Doc View Source AddCreator(Int64, TemporaryDataFactory.CreateAsyncDelegate) Adds a creator for the given minimum size. Declaration protected void AddCreator(long minimumSize, TemporaryDataFactory.CreateAsyncDelegate createAsyncDelegate) Parameters Type Name Description Int64 minimumSize The minimum size required to use the passed creation function. TemporaryDataFactory.CreateAsyncDelegate createAsyncDelegate The creation function when the expected size exceeds the minimum size. | Improve this Doc View Source CreateAsync(Stream, Nullable<Int64>, CancellationToken) Creates a temporary data object for data with the expected size. Declaration public Task<ITemporaryData> CreateAsync(Stream input, long? expectedSize, CancellationToken cancellationToken) Parameters Type Name Description Stream input The stream containing the data. Nullable < Int64 > expectedSize The expected data size. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ITemporaryData > The created temporary data object. Implements ITemporaryDataFactory"
  },
  "api/FubarDev.FtpServer.AccountManagement.IFtpUser.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.IFtpUser.html",
    "title": "Interface IFtpUser | FTP Server documentation",
    "keywords": "Interface IFtpUser A basic FTP user interface. Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpUser Properties | Improve this Doc View Source Name Gets the name of the user. Declaration [NotNull] string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source IsInGroup(String) Returns true when the user is in the given group. Declaration bool IsInGroup([NotNull] string groupName) Parameters Type Name Description String groupName The name of the group. Returns Type Description Boolean true when the user is in the queries groupName ."
  },
  "api/FubarDev.FtpServer.PermissionsExtensions.html": {
    "href": "api/FubarDev.FtpServer.PermissionsExtensions.html",
    "title": "Class PermissionsExtensions | FTP Server documentation",
    "keywords": "Class PermissionsExtensions Extension methods for IUnixPermissions . Inheritance Object PermissionsExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public static class PermissionsExtensions Methods | Improve this Doc View Source GetAccessModeFor(IUnixPermissions, IUnixOwner, IFtpUser) Gets the effective access mode for an entity for the given user . Declaration [NotNull] public static IAccessMode GetAccessModeFor([NotNull] this IUnixPermissions permissions, [NotNull] IUnixOwner entity, [NotNull] IFtpUser user) Parameters Type Name Description IUnixPermissions permissions The permissions used to build the access mode. IUnixOwner entity The entity owner information. IFtpUser user The FTP user to determine the access mode for. Returns Type Description IAccessMode The effective access mode for the user ."
  },
  "api/FubarDev.FtpServer.PasvListenerFactory.html": {
    "href": "api/FubarDev.FtpServer.PasvListenerFactory.html",
    "title": "Class PasvListenerFactory | FTP Server documentation",
    "keywords": "Class PasvListenerFactory Creates TcpListeners for use with PASV commands. Inheritance Object PasvListenerFactory Implements IPasvListenerFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class PasvListenerFactory : IPasvListenerFactory Constructors | Improve this Doc View Source PasvListenerFactory(IOptions<FtpServerOptions>, ILogger<PasvListenerFactory>) Initializes a new instance of the PasvListenerFactory class. Declaration public PasvListenerFactory(IOptions<FtpServerOptions> serverOptions, ILogger<PasvListenerFactory> logger) Parameters Type Name Description IOptions < FtpServerOptions > serverOptions FTPServer options. ILogger < PasvListenerFactory > logger Logger instance. Properties | Improve this Doc View Source PasvExternalAddress Gets the IP address where clients should direct PASV connection attempts. If null, the control connection interface's IP is used. Declaration protected IPAddress PasvExternalAddress { get; } Property Value Type Description IPAddress Methods | Improve this Doc View Source CreateTcpListener(IFtpConnection, Int32) Create a new TcpListener for the given connection. Declaration public Task<IPasvListener> CreateTcpListener(IFtpConnection connection, int port) Parameters Type Name Description IFtpConnection connection connection on which to create the tcp listener. Int32 port listen on the given port, or 0 for any port. Returns Type Description Task < IPasvListener > A TcpListener. Exceptions Type Condition SocketException Network error, such as no free port. ArgumentOutOfRangeException The chosen port was not within the configured range of ports. Implements IPasvListenerFactory"
  },
  "api/FubarDev.FtpServer.MultiBindingTcpListener.html": {
    "href": "api/FubarDev.FtpServer.MultiBindingTcpListener.html",
    "title": "Class MultiBindingTcpListener | FTP Server documentation",
    "keywords": "Class MultiBindingTcpListener Allows binding to a host name, which in turn may resolve to multiple IP addresses. Inheritance Object MultiBindingTcpListener Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class MultiBindingTcpListener Constructors | Improve this Doc View Source MultiBindingTcpListener(String, Int32, ILogger) Initializes a new instance of the MultiBindingTcpListener class. Declaration public MultiBindingTcpListener(string address, int port, [CanBeNull] ILogger logger) Parameters Type Name Description String address The address/host name to bind to. Int32 port The listener port. ILogger logger The logger. Properties | Improve this Doc View Source Port Gets the port this listener is bound to. Declaration public int? Port { get; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source StartAccepting() Start the asynchronous acception for all listeners. Declaration public void StartAccepting() | Improve this Doc View Source StartAsync() Start all listeners. Declaration public Task StartAsync() Returns Type Description Task the task. | Improve this Doc View Source Stop() Stops all listeners. Declaration public void Stop() | Improve this Doc View Source TryGetPending(out TcpListener) Tries to get a listener that has pending client connections. Declaration public bool TryGetPending(out TcpListener listener) Parameters Type Name Description TcpListener listener The listener that has pending client connections. Returns Type Description Boolean true when a listener with pending client connections could be found. | Improve this Doc View Source WaitAnyTcpClientAsync(CancellationToken) Wait for any client on all listeners. Declaration public Task<TcpClient> WaitAnyTcpClientAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Cancellation token. Returns Type Description Task < TcpClient > The new TCP client."
  },
  "api/FubarDev.FtpServer.IListFormatter.html": {
    "href": "api/FubarDev.FtpServer.IListFormatter.html",
    "title": "Interface IListFormatter | FTP Server documentation",
    "keywords": "Interface IListFormatter Interface that provides the text to output for the LIST and NLST commands. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IListFormatter Methods | Improve this Doc View Source Format(IUnixFileSystemEntry, String) Gets the output line to write for the given IUnixFileSystemEntry . Declaration [NotNull] string Format([NotNull] IUnixFileSystemEntry entry, [CanBeNull] string entryName = null) Parameters Type Name Description IUnixFileSystemEntry entry The entry to create the output line for. String entryName The name of the entry (can be null if the original entry name should be used). Returns Type Description String The text to write to the client."
  },
  "api/FubarDev.FtpServer.FileSystem.IFileSystemClassFactory.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IFileSystemClassFactory.html",
    "title": "Interface IFileSystemClassFactory | FTP Server documentation",
    "keywords": "Interface IFileSystemClassFactory This factory interface is used to create a IUnixFileSystem implementation for a given user ID. Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFileSystemClassFactory Methods | Improve this Doc View Source Create(IAccountInformation) Creates a IUnixFileSystem implementation for a given accountInformation . Declaration Task<IUnixFileSystem> Create([NotNull] IAccountInformation accountInformation) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. Returns Type Description Task < IUnixFileSystem > The new IUnixFileSystem for the accountInformation . Remarks When the login is anonymous, the User must be of type IAnonymousFtpUser ."
  },
  "api/FubarDev.FtpServer.CommandHandlers.PortCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.PortCommandHandler.html",
    "title": "Class PortCommandHandler | FTP Server documentation",
    "keywords": "Class PortCommandHandler Implements the PORT and EPRT commands. Inheritance Object FtpCommandHandler PortCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class PortCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source PortCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the PortCommandHandler class. Declaration public PortCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.IFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.IFact.html",
    "title": "Interface IFact | FTP Server documentation",
    "keywords": "Interface IFact The basic interface for a fact ( MLST ). Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFact Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the fact. Declaration string Value { get; } Property Value Type Description String"
  },
  "api/FubarDev.FtpServer.CommandHandlers.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.html",
    "title": "Namespace FubarDev.FtpServer.CommandHandlers | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.CommandHandlers Classes AborCommandHandler Implements the ABOR command. AlloCommandHandler Implements the ALLO command. AppeCommandHandler Implements the APPE command. AuthTlsCommandHandler The AUTH TLS command handler. CdUpCommandHandler Implements the CDUP command. CwdCommandHandler Implements the CWD command. DeleCommandHandler Implements the DELE command. FeatCommandHandler Implements the FEAT command. FtpCommandHandler The base class for all FTP command handlers. HelpCommandHandler The HELP command handler. ListCommandHandler Implements the LIST and NLST commands. MdtmCommandHandler Implements the MDTM command. MfctCommandHandler Implements the MFCT command. MffCommandHandler Implements the MFF command. MfmtCommandHandler Implements the MFMT command. MkdCommandHandler Implements the MKD command. MlstCommandHandler The implementation of the MLST command. ModeCommandHandler Implements the MODE command. NoOpCommandHandler Implements the NOOP command. OptsCommandHandler Implements the OPTS command. PassCommandHandler Implements the PASS command. PasvCommandHandler The command handler for the PASV (4.1.2.) and EPSV commands. PbszCommandHandler The PBSZ command handler. PortCommandHandler Implements the PORT and EPRT commands. ProtCommandHandler The PROT command handler. PwdCommandHandler Implements the PWD command. QuitCommandHandler Implements the QUIT command. RestCommandHandler Implements the REST command. RetrCommandHandler Implements the RETR command. RmdCommandHandler Implements the RMD command. RnfrCommandHandler Implements the RNFR command. RntoCommandHandler Implements the RNTO command. SiteCommandHandler The SITE command handler. SizeCommandHandler Implements the SIZE command. StatCommandHandler The STAT command handler. StorCommandHandler This class implements the STOR command (4.1.3.). StruCommandHandler Implements the STRU command. SystCommandHandler Implements the SYST command. TypeCommandHandler Implements the TYPE command. UserCommandHandler Implements the USER command. XcwdCommandHandler Implements the XCWD command. XmkdCommandHandler Implements the XMKD command. XrmdCommandHandler Implements the XRMD command. Interfaces IFtpCommandHandlerExtensionHost Interface indicating that a command handler can act as an extension host."
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetDirectoryEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetDirectoryEntry.html",
    "title": "Class DotNetDirectoryEntry | FTP Server documentation",
    "keywords": "Class DotNetDirectoryEntry A IUnixDirectoryEntry implementation for the standard .NET file system functionality. Inheritance Object DotNetDirectoryEntry Implements IUnixDirectoryEntry IUnixFileSystemEntry IUnixOwner Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.DotNet Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public class DotNetDirectoryEntry : IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixOwner Constructors | Improve this Doc View Source DotNetDirectoryEntry(DotNetFileSystem, DirectoryInfo, Boolean) Initializes a new instance of the DotNetDirectoryEntry class. Declaration public DotNetDirectoryEntry([NotNull] DotNetFileSystem fileSystem, [NotNull] DirectoryInfo dirInfo, bool isRoot) Parameters Type Name Description DotNetFileSystem fileSystem The file system this entry belongs to. DirectoryInfo dirInfo The DirectoryInfo to extract the information from. Boolean isRoot Defines whether this the root directory. Properties | Improve this Doc View Source CreatedTime Gets the time of creation. Declaration public DateTimeOffset? CreatedTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source FileSystem Gets the file system this entry belongs to. Declaration public IUnixFileSystem FileSystem { get; } Property Value Type Description IUnixFileSystem | Improve this Doc View Source Group Gets the group. Declaration public string Group { get; } Property Value Type Description String | Improve this Doc View Source Info Gets the underlying DirectoryInfo . Declaration public DirectoryInfo Info { get; } Property Value Type Description DirectoryInfo | Improve this Doc View Source IsDeletable Gets a value indicating whether this directory can be deleted. Declaration public bool IsDeletable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRoot Gets a value indicating whether this is the root directory. Declaration public bool IsRoot { get; } Property Value Type Description Boolean | Improve this Doc View Source LastWriteTime Gets the last write time. Declaration public DateTimeOffset? LastWriteTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Name Gets the name of the file system entry. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source NumberOfLinks Gets the number of links. Declaration public long NumberOfLinks { get; } Property Value Type Description Int64 | Improve this Doc View Source Owner Gets the owner. Declaration public string Owner { get; } Property Value Type Description String | Improve this Doc View Source Permissions Gets the file entry permissions. Declaration public IUnixPermissions Permissions { get; } Property Value Type Description IUnixPermissions Implements IUnixDirectoryEntry IUnixFileSystemEntry IUnixOwner"
  },
  "api/FubarDev.FtpServer.CommandHandlers.TypeCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.TypeCommandHandler.html",
    "title": "Class TypeCommandHandler | FTP Server documentation",
    "keywords": "Class TypeCommandHandler Implements the TYPE command. Inheritance Object FtpCommandHandler TypeCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class TypeCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source TypeCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the TypeCommandHandler class. Declaration public TypeCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.QuitCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.QuitCommandHandler.html",
    "title": "Class QuitCommandHandler | FTP Server documentation",
    "keywords": "Class QuitCommandHandler Implements the QUIT command. Inheritance Object FtpCommandHandler QuitCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class QuitCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source QuitCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the QuitCommandHandler class. Declaration public QuitCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.MlstCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MlstCommandHandler.html",
    "title": "Class MlstCommandHandler | FTP Server documentation",
    "keywords": "Class MlstCommandHandler The implementation of the MLST command. Inheritance Object FtpCommandHandler MlstCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MlstCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MlstCommandHandler(IFtpConnectionAccessor, ILogger<MlstCommandHandler>) Initializes a new instance of the MlstCommandHandler class. Declaration public MlstCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [CanBeNull] ILogger<MlstCommandHandler> logger = null) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. ILogger < MlstCommandHandler > logger The logger. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.NoOpCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.NoOpCommandHandler.html",
    "title": "Class NoOpCommandHandler | FTP Server documentation",
    "keywords": "Class NoOpCommandHandler Implements the NOOP command. Inheritance Object FtpCommandHandler NoOpCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class NoOpCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source NoOpCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the NoOpCommandHandler class. Declaration public NoOpCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.AuthTlsCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.AuthTlsCommandHandler.html",
    "title": "Class AuthTlsCommandHandler | FTP Server documentation",
    "keywords": "Class AuthTlsCommandHandler The AUTH TLS command handler. Inheritance Object FtpCommandHandler AuthTlsCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class AuthTlsCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source AuthTlsCommandHandler(IFtpConnectionAccessor, IOptions<AuthTlsOptions>) Initializes a new instance of the AuthTlsCommandHandler class. Declaration public AuthTlsCommandHandler(IFtpConnectionAccessor connectionAccessor, IOptions<AuthTlsOptions> options) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IOptions < AuthTlsOptions > options The SSL/TLS connection options. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.PasvCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.PasvCommandHandler.html",
    "title": "Class PasvCommandHandler | FTP Server documentation",
    "keywords": "Class PasvCommandHandler The command handler for the PASV (4.1.2.) and EPSV commands. Inheritance Object FtpCommandHandler PasvCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class PasvCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source PasvCommandHandler(IFtpConnectionAccessor, IPasvListenerFactory) Initializes a new instance of the PasvCommandHandler class. Declaration public PasvCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, IPasvListenerFactory pasvListenerFactory) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IPasvListenerFactory pasvListenerFactory The provider for passive ports. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.RmdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.RmdCommandHandler.html",
    "title": "Class RmdCommandHandler | FTP Server documentation",
    "keywords": "Class RmdCommandHandler Implements the RMD command. Inheritance Object FtpCommandHandler RmdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class RmdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source RmdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the RmdCommandHandler class. Declaration public RmdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.Generic.GenericAccessMode.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Generic.GenericAccessMode.html",
    "title": "Class GenericAccessMode | FTP Server documentation",
    "keywords": "Class GenericAccessMode Generic implementation of the IAccessMode interface. Inheritance Object GenericAccessMode Implements IAccessMode Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.Generic Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class GenericAccessMode : IAccessMode Constructors | Improve this Doc View Source GenericAccessMode(Boolean, Boolean, Boolean) Initializes a new instance of the GenericAccessMode class. Declaration public GenericAccessMode(bool read, bool write, bool execute) Parameters Type Name Description Boolean read Determines whether reading is allowed. Boolean write Determines whether writing is allowed. Boolean execute Determines whether execution is allowed. Properties | Improve this Doc View Source Execute Gets a value indicating whether an execute is allowed. Declaration public bool Execute { get; } Property Value Type Description Boolean | Improve this Doc View Source Read Gets a value indicating whether a read is allowed. Declaration public bool Read { get; } Property Value Type Description Boolean | Improve this Doc View Source Write Gets a value indicating whether a write is allowed. Declaration public bool Write { get; } Property Value Type Description Boolean Implements IAccessMode"
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixFileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixFileSystem.html",
    "title": "Interface IUnixFileSystem | FTP Server documentation",
    "keywords": "Interface IUnixFileSystem The unix file system abstraction used by the FTP server. Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixFileSystem Properties | Improve this Doc View Source FileSystemEntryComparer Gets a string comparer for file system entry names. Declaration [NotNull] StringComparer FileSystemEntryComparer { get; } Property Value Type Description StringComparer Remarks Required to support case insensitive file systems. | Improve this Doc View Source Root Gets the root directory entry. Declaration [NotNull] IUnixDirectoryEntry Root { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source SupportsAppend Gets a value indicating whether this file system supports appending to a file. Declaration bool SupportsAppend { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsNonEmptyDirectoryDelete Gets a value indicating whether this file system supports deletion of non-empty directories. Declaration bool SupportsNonEmptyDirectoryDelete { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AppendAsync(IUnixFileEntry, Nullable<Int64>, Stream, CancellationToken) Appends data to a file. Declaration [NotNull] [ItemCanBeNull] Task<IBackgroundTransfer> AppendAsync([NotNull] IUnixFileEntry fileEntry, long? startPosition, [NotNull] Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to append data to. Nullable < Int64 > startPosition The start position - when it is null, the data is appended. Stream data The data stream to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateAsync(IUnixDirectoryEntry, String, Stream, CancellationToken) Creates a file with the given fileName and data . Declaration [NotNull] [ItemCanBeNull] Task<IBackgroundTransfer> CreateAsync([NotNull] IUnixDirectoryEntry targetDirectory, [NotNull] string fileName, [NotNull] Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the file in. String fileName The name of the new file. Stream data The Stream used to read the data for the new file. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateDirectoryAsync(IUnixDirectoryEntry, String, CancellationToken) Creates a sub directory with the name directoryName in targetDirectory . Declaration [NotNull] Task<IUnixDirectoryEntry> CreateDirectoryAsync([NotNull] IUnixDirectoryEntry targetDirectory, [NotNull] string directoryName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the sub directory in. String directoryName The name of the new sub directory. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The new IUnixDirectoryEntry . | Improve this Doc View Source GetEntriesAsync(IUnixDirectoryEntry, CancellationToken) Gets a list of IUnixFileSystemEntry objects for a given directoryEntry . Declaration [NotNull] [ItemNotNull] Task<IReadOnlyList<IUnixFileSystemEntry>> GetEntriesAsync([NotNull] IUnixDirectoryEntry directoryEntry, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entries for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IReadOnlyList < IUnixFileSystemEntry >> The list of IUnixFileSystemEntry objects for a given directoryEntry . | Improve this Doc View Source GetEntryByNameAsync(IUnixDirectoryEntry, String, CancellationToken) Gets a file system entry by name. Declaration [NotNull] [ItemCanBeNull] Task<IUnixFileSystemEntry> GetEntryByNameAsync([NotNull] IUnixDirectoryEntry directoryEntry, [NotNull] string name, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entry for. String name The name of the file system entry to search. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the found IUnixFileSystemEntry . | Improve this Doc View Source MoveAsync(IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixDirectoryEntry, String, CancellationToken) Moves a file system entry from parent to target . Declaration [NotNull] Task<IUnixFileSystemEntry> MoveAsync([NotNull] IUnixDirectoryEntry parent, [NotNull] IUnixFileSystemEntry source, [NotNull] IUnixDirectoryEntry target, [NotNull] string fileName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry parent The IUnixDirectoryEntry of source . IUnixFileSystemEntry source The IUnixFileSystemEntry to move. IUnixDirectoryEntry target The destination IUnixDirectoryEntry where source gets moved to. String fileName The new name of source . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the new IUnixFileSystemEntry . | Improve this Doc View Source OpenReadAsync(IUnixFileEntry, Int64, CancellationToken) Opens a file for reading. Declaration [NotNull] Task<Stream> OpenReadAsync([NotNull] IUnixFileEntry fileEntry, long startPosition, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to read from. Int64 startPosition The start position to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Stream > The Stream to be used for reading. | Improve this Doc View Source ReplaceAsync(IUnixFileEntry, Stream, CancellationToken) Replaces the contents of a file. Declaration [NotNull] [ItemCanBeNull] Task<IBackgroundTransfer> ReplaceAsync([NotNull] IUnixFileEntry fileEntry, [NotNull] Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to replace the data for. Stream data The data to be written to the given fileEntry . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source SetMacTimeAsync(IUnixFileSystemEntry, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, CancellationToken) Sets the modify/access/create timestamp of a file system item. Declaration [NotNull] [ItemNotNull] Task<IUnixFileSystemEntry> SetMacTimeAsync([NotNull] IUnixFileSystemEntry entry, DateTimeOffset? modify, DateTimeOffset? access, DateTimeOffset? create, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to change the timestamp for. Nullable < DateTimeOffset > modify The modification timestamp. Nullable < DateTimeOffset > access The access timestamp. Nullable < DateTimeOffset > create The creation timestamp. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > The modified IUnixFileSystemEntry . | Improve this Doc View Source UnlinkAsync(IUnixFileSystemEntry, CancellationToken) Deletes a IUnixFileSystemEntry . Declaration [NotNull] Task UnlinkAsync([NotNull] IUnixFileSystemEntry entry, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to delete. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task where the underlying action is performed on. Remarks An implementation might decide to move the entry into the trash instead of deleting it. Extension Methods FileSystemExtensions.GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken)"
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixFileEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixFileEntry.html",
    "title": "Interface IUnixFileEntry | FTP Server documentation",
    "keywords": "Interface IUnixFileEntry A unix file entry. Inherited Members IUnixFileSystemEntry.Name IUnixFileSystemEntry.Permissions IUnixFileSystemEntry.LastWriteTime IUnixFileSystemEntry.CreatedTime IUnixFileSystemEntry.NumberOfLinks IUnixFileSystemEntry.FileSystem IUnixOwner.Owner IUnixOwner.Group Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixFileEntry : IUnixFileSystemEntry, IUnixOwner Properties | Improve this Doc View Source Size Gets the size of the file. Declaration long Size { get; } Property Value Type Description Int64"
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.BlockAnonymousValidation.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.BlockAnonymousValidation.html",
    "title": "Class BlockAnonymousValidation | FTP Server documentation",
    "keywords": "Class BlockAnonymousValidation Disallow anonymous logins. Inheritance Object BlockAnonymousValidation Implements IAnonymousPasswordValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement.Anonymous Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class BlockAnonymousValidation : IAnonymousPasswordValidator Methods | Improve this Doc View Source IsValid(String) Determines whether this password is valid for an anonymous login. Declaration public bool IsValid(string password) Parameters Type Name Description String password The password to validate. Returns Type Description Boolean true when the password is valid for this kind of anonymous authentication. Implements IAnonymousPasswordValidator"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.CurrentDirectoryFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.CurrentDirectoryFact.html",
    "title": "Class CurrentDirectoryFact | FTP Server documentation",
    "keywords": "Class CurrentDirectoryFact The cdir fact. Inheritance Object TypeFact CurrentDirectoryFact Implements IFact Inherited Members TypeFact.Name TypeFact.Value Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class CurrentDirectoryFact : TypeFact, IFact Constructors | Improve this Doc View Source CurrentDirectoryFact() Initializes a new instance of the CurrentDirectoryFact class. Declaration public CurrentDirectoryFact() Implements IFact"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.IBackgroundTransfer.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.IBackgroundTransfer.html",
    "title": "Interface IBackgroundTransfer | FTP Server documentation",
    "keywords": "Interface IBackgroundTransfer Interface for background data transfers. Inherited Members IDisposable.Dispose() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IBackgroundTransfer : IDisposable Properties | Improve this Doc View Source TransferId Gets the ID of the background data transfer. Declaration string TransferId { get; } Property Value Type Description String Methods | Improve this Doc View Source Start(IProgress<Int64>, CancellationToken) Starts the background data transfer. Declaration Task Start(IProgress<long> progress, CancellationToken cancellationToken) Parameters Type Name Description IProgress < Int64 > progress Used to send the progress to the caller. CancellationToken cancellationToken The cancellation token used to abort the background data transfer. Returns Type Description Task The task used to transfer the data in the background."
  },
  "api/FubarDev.FtpServer.FtpConnectionData.html": {
    "href": "api/FubarDev.FtpServer.FtpConnectionData.html",
    "title": "Class FtpConnectionData | FTP Server documentation",
    "keywords": "Class FtpConnectionData Common data for a IFtpConnection . Inheritance Object FtpConnectionData Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public sealed class FtpConnectionData : IDisposable Constructors | Improve this Doc View Source FtpConnectionData(IBackgroundCommandHandler) Initializes a new instance of the FtpConnectionData class. Declaration public FtpConnectionData([NotNull] IBackgroundCommandHandler backgroundCommandHandler) Parameters Type Name Description IBackgroundCommandHandler backgroundCommandHandler Utility module that allows background execution of an FTP command. Properties | Improve this Doc View Source ActiveMlstFacts Gets the active IFact sent by MLST and MLSD . Declaration [NotNull] [ItemNotNull] public ISet<string> ActiveMlstFacts { get; } Property Value Type Description ISet < String > | Improve this Doc View Source AuthenticatedBy Gets or sets the membership provider that was used to authenticate the user. Declaration [CanBeNull] public IMembershipProvider AuthenticatedBy { get; set; } Property Value Type Description IMembershipProvider | Improve this Doc View Source BackgroundCommandHandler Gets the BackgroundCommandHandler that's required for the ABOR command. Declaration [NotNull] public IBackgroundCommandHandler BackgroundCommandHandler { get; } Property Value Type Description IBackgroundCommandHandler | Improve this Doc View Source CreateEncryptedStream Gets or sets a delegate that allows the creation of an encrypted stream. Declaration [CanBeNull] public CreateEncryptedStreamDelegate CreateEncryptedStream { get; set; } Property Value Type Description CreateEncryptedStreamDelegate | Improve this Doc View Source CurrentDirectory Gets the current IUnixDirectoryEntry of the current Path . Declaration [NotNull] public IUnixDirectoryEntry CurrentDirectory { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source FileSystem Gets or sets the IUnixFileSystem to use for the user. Declaration [NotNull] public IUnixFileSystem FileSystem { get; set; } Property Value Type Description IUnixFileSystem | Improve this Doc View Source IsAnonymous Gets or sets a value indicating whether the current user is anonymous. Declaration [Obsolete(\"An anonymous user object now implements IAnonymousFtpUser.\")] public bool IsAnonymous { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsLoggedIn Gets or sets a value indicating whether the user with the User . is logged in. Declaration public bool IsLoggedIn { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NlstEncoding Gets or sets the Encoding for the NLST command. Declaration [CanBeNull] public Encoding NlstEncoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source PassiveSocketClient Gets or sets the data connection for a passive data transfer. Declaration [CanBeNull] public TcpClient PassiveSocketClient { get; set; } Property Value Type Description TcpClient | Improve this Doc View Source Path Gets or sets the current path into the FileSystem . Declaration [NotNull] [ItemNotNull] public Stack<IUnixDirectoryEntry> Path { get; set; } Property Value Type Description Stack < IUnixDirectoryEntry > | Improve this Doc View Source PortAddress Gets or sets the address to use for an active data connection. Declaration [CanBeNull] public Address PortAddress { get; set; } Property Value Type Description Address | Improve this Doc View Source RenameFrom Gets or sets the IUnixFileEntry to use for a RNTO operation. Declaration [CanBeNull] public SearchResult<IUnixFileSystemEntry> RenameFrom { get; set; } Property Value Type Description SearchResult < IUnixFileSystemEntry > | Improve this Doc View Source RestartPosition Gets or sets the restart position for appending data to a file. Declaration public long? RestartPosition { get; set; } Property Value Type Description Nullable < Int64 > | Improve this Doc View Source TransferMode Gets or sets the FtpTransferMode . Declaration [NotNull] public FtpTransferMode TransferMode { get; set; } Property Value Type Description FtpTransferMode | Improve this Doc View Source TransferTypeCommandUsed Gets or sets the last used transfer type command. Declaration [CanBeNull] public string TransferTypeCommandUsed { get; set; } Property Value Type Description String Remarks It's not allowed to use PASV when PORT was used previously - and vice versa. | Improve this Doc View Source User Gets or sets the current user name. Declaration [CanBeNull] public IFtpUser User { get; set; } Property Value Type Description IFtpUser | Improve this Doc View Source UserData Gets or sets user data as dynamic object. Declaration public dynamic UserData { get; set; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/FubarDev.FtpServer.FtpConnectionAccessor.html": {
    "href": "api/FubarDev.FtpServer.FtpConnectionAccessor.html",
    "title": "Class FtpConnectionAccessor | FTP Server documentation",
    "keywords": "Class FtpConnectionAccessor Accessor for the active FTP connection. Inheritance Object FtpConnectionAccessor Implements IFtpConnectionAccessor Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class FtpConnectionAccessor : IFtpConnectionAccessor Properties | Improve this Doc View Source FtpConnection Gets or sets the current FTP connection. Declaration public IFtpConnection FtpConnection { get; set; } Property Value Type Description IFtpConnection Implements IFtpConnectionAccessor"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.ITemporaryData.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.ITemporaryData.html",
    "title": "Interface ITemporaryData | FTP Server documentation",
    "keywords": "Interface ITemporaryData Temporary data holder. Inherited Members IDisposable.Dispose() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface ITemporaryData : IDisposable Remarks Temporary data gets removed from the system when it's disposed. Properties | Improve this Doc View Source Size Gets the size of the temporary data. Declaration long Size { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source OpenAsync() Opens the temporary data and returns a stream. Declaration [NotNull] [ItemNotNull] Task<Stream> OpenAsync() Returns Type Description Task < Stream > The stream containig the temporary data."
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.NoTopLevelDomainValidation.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.NoTopLevelDomainValidation.html",
    "title": "Class NoTopLevelDomainValidation | FTP Server documentation",
    "keywords": "Class NoTopLevelDomainValidation Allows a server address for anonymous authentication without top level domain. Inheritance Object NoTopLevelDomainValidation Implements IAnonymousPasswordValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement.Anonymous Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class NoTopLevelDomainValidation : IAnonymousPasswordValidator Remarks In other words: No dot required after @ . Methods | Improve this Doc View Source IsValid(String) Determines whether this password is valid for an anonymous login. Declaration public bool IsValid(string password) Parameters Type Name Description String password The password to validate. Returns Type Description Boolean true when the password is valid for this kind of anonymous authentication. Implements IAnonymousPasswordValidator"
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.SimpleMailAddressValidation.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.SimpleMailAddressValidation.html",
    "title": "Class SimpleMailAddressValidation | FTP Server documentation",
    "keywords": "Class SimpleMailAddressValidation The password must have the form of a valid email address. Inheritance Object SimpleMailAddressValidation Implements IAnonymousPasswordValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement.Anonymous Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class SimpleMailAddressValidation : IAnonymousPasswordValidator Remarks A @ is required and the host name must contain a dot. Methods | Improve this Doc View Source IsValid(String) Determines whether this password is valid for an anonymous login. Declaration public bool IsValid(string password) Parameters Type Name Description String password The password to validate. Returns Type Description Boolean true when the password is valid for this kind of anonymous authentication. Implements IAnonymousPasswordValidator"
  },
  "api/FubarDev.FtpServer.CommandHandlers.DeleCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.DeleCommandHandler.html",
    "title": "Class DeleCommandHandler | FTP Server documentation",
    "keywords": "Class DeleCommandHandler Implements the DELE command. Inheritance Object FtpCommandHandler DeleCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class DeleCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source DeleCommandHandler(IFtpConnectionAccessor, ILogger<DeleCommandHandler>) Initializes a new instance of the DeleCommandHandler class. Declaration public DeleCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [CanBeNull] ILogger<DeleCommandHandler> logger = null) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. ILogger < DeleCommandHandler > logger The logger. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.AlloCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.AlloCommandHandler.html",
    "title": "Class AlloCommandHandler | FTP Server documentation",
    "keywords": "Class AlloCommandHandler Implements the ALLO command. Inheritance Object FtpCommandHandler AlloCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class AlloCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source AlloCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the AlloCommandHandler class. Declaration public AlloCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.FileNameNotAllowedException.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.FileNameNotAllowedException.html",
    "title": "Class FileNameNotAllowedException | FTP Server documentation",
    "keywords": "Class FileNameNotAllowedException Requested action not taken. File name not allowed. Inheritance Object Exception FileSystemException FileNameNotAllowedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer.FileSystem.Error Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class FileNameNotAllowedException : FileSystemException, ISerializable Constructors | Improve this Doc View Source FileNameNotAllowedException() Initializes a new instance of the FileNameNotAllowedException class. Declaration public FileNameNotAllowedException() | Improve this Doc View Source FileNameNotAllowedException(String) Initializes a new instance of the FileNameNotAllowedException class. Declaration public FileNameNotAllowedException(string message) Parameters Type Name Description String message The error message. | Improve this Doc View Source FileNameNotAllowedException(String, Exception) Initializes a new instance of the FileNameNotAllowedException class. Declaration public FileNameNotAllowedException(string message, Exception innerException) Parameters Type Name Description String message The error message. Exception innerException The underlying exception. Properties | Improve this Doc View Source FtpErrorCode Gets the FTP error code. Declaration public override int FtpErrorCode { get; } Property Value Type Description Int32 Overrides FileSystemException.FtpErrorCode | Improve this Doc View Source FtpErrorName Gets a human-readable generic error description. Declaration public override string FtpErrorName { get; } Property Value Type Description String Overrides FileSystemException.FtpErrorName Implements System.Runtime.Serialization.ISerializable"
  },
  "api/FubarDev.FtpServer.ConnectionEventArgs.html": {
    "href": "api/FubarDev.FtpServer.ConnectionEventArgs.html",
    "title": "Class ConnectionEventArgs | FTP Server documentation",
    "keywords": "Class ConnectionEventArgs Event arguments for a connection event. Inheritance Object EventArgs ConnectionEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class ConnectionEventArgs : EventArgs Constructors | Improve this Doc View Source ConnectionEventArgs(IFtpConnection) Initializes a new instance of the ConnectionEventArgs class. Declaration public ConnectionEventArgs([NotNull] IFtpConnection connection) Parameters Type Name Description IFtpConnection connection The connection of the event. Properties | Improve this Doc View Source Connection Gets the connection for this event. Declaration [NotNull] public IFtpConnection Connection { get; } Property Value Type Description IFtpConnection"
  },
  "api/FubarDev.FtpServer.CommandHandlers.ModeCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.ModeCommandHandler.html",
    "title": "Class ModeCommandHandler | FTP Server documentation",
    "keywords": "Class ModeCommandHandler Implements the MODE command. Inheritance Object FtpCommandHandler ModeCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class ModeCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source ModeCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the ModeCommandHandler class. Declaration public ModeCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.FeatCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.FeatCommandHandler.html",
    "title": "Class FeatCommandHandler | FTP Server documentation",
    "keywords": "Class FeatCommandHandler Implements the FEAT command. Inheritance Object FtpCommandHandler FeatCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class FeatCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source FeatCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the FeatCommandHandler class. Declaration public FeatCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemProvider.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemProvider.html",
    "title": "Class InMemoryFileSystemProvider | FTP Server documentation",
    "keywords": "Class InMemoryFileSystemProvider An implementation of an in-memory file system. Inheritance Object InMemoryFileSystemProvider Implements IFileSystemClassFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public class InMemoryFileSystemProvider : IFileSystemClassFactory Constructors | Improve this Doc View Source InMemoryFileSystemProvider(IOptions<InMemoryFileSystemOptions>) Initializes a new instance of the InMemoryFileSystemProvider class. Declaration public InMemoryFileSystemProvider(IOptions<InMemoryFileSystemOptions> options) Parameters Type Name Description IOptions < InMemoryFileSystemOptions > options The provider options. Methods | Improve this Doc View Source Create(IAccountInformation) Creates a IUnixFileSystem implementation for a given accountInformation . Declaration public Task<IUnixFileSystem> Create(IAccountInformation accountInformation) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. Returns Type Description Task < IUnixFileSystem > The new IUnixFileSystem for the accountInformation . Remarks When the login is anonymous, the User must be of type IAnonymousFtpUser . Implements IFileSystemClassFactory"
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemOptions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystemOptions.html",
    "title": "Class InMemoryFileSystemOptions | FTP Server documentation",
    "keywords": "Class InMemoryFileSystemOptions In-memory file system options. Inheritance Object InMemoryFileSystemOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public class InMemoryFileSystemOptions Properties | Improve this Doc View Source AnonymousComparer Gets or sets the comparer for anonymous user e-mails. Declaration public StringComparer AnonymousComparer { get; set; } Property Value Type Description StringComparer | Improve this Doc View Source FileSystemComparer Gets or sets the comparer for file system names. Declaration public StringComparer FileSystemComparer { get; set; } Property Value Type Description StringComparer | Improve this Doc View Source KeepAnonymousFileSystem Gets or sets a value indicating whether the file system for an anonymous user should be kept. Declaration public bool KeepAnonymousFileSystem { get; set; } Property Value Type Description Boolean | Improve this Doc View Source KeepAuthenticatedUserFileSystem Gets or sets a value indicating whether the file system for an authenticated user should be kept. Declaration public bool KeepAuthenticatedUserFileSystem { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UserNameComparer Gets or sets the comparer for authenticated user names. Declaration public StringComparer UserNameComparer { get; set; } Property Value Type Description StringComparer"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.SizeFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.SizeFact.html",
    "title": "Class SizeFact | FTP Server documentation",
    "keywords": "Class SizeFact The size fact. Inheritance Object SizeFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class SizeFact : IFact Constructors | Improve this Doc View Source SizeFact(Int64) Initializes a new instance of the SizeFact class. Declaration public SizeFact(long size) Parameters Type Name Description Int64 size The file system entry size. Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.IFtpServerBuilder.html": {
    "href": "api/FubarDev.FtpServer.IFtpServerBuilder.html",
    "title": "Interface IFtpServerBuilder | FTP Server documentation",
    "keywords": "Interface IFtpServerBuilder Base interface for FubarDev.FtpServer configuration. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpServerBuilder Properties | Improve this Doc View Source Services Gets the service collection. Declaration IServiceCollection Services { get; } Property Value Type Description IServiceCollection Extension Methods DotNetFtpServerBuilderExtensions.UseDotNetFileSystem(IFtpServerBuilder) GoogleDriveFtpServerBuilderExtensions.UseGoogleDrive(IFtpServerBuilder, Func<IServiceProvider, DriveService>) GoogleDriveFtpServerBuilderExtensions.UseGoogleDrive(IFtpServerBuilder, IConfigurableHttpClientInitializer, String) FtpServerBuilderExtensions.EnableAnonymousAuthentication(IFtpServerBuilder) InMemoryFtpServerBuilderExtensions.UseInMemoryFileSystem(IFtpServerBuilder)"
  },
  "api/FubarDev.FtpServer.CommandHandlers.MdtmCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MdtmCommandHandler.html",
    "title": "Class MdtmCommandHandler | FTP Server documentation",
    "keywords": "Class MdtmCommandHandler Implements the MDTM command. Inheritance Object FtpCommandHandler MdtmCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MdtmCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MdtmCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the MdtmCommandHandler class. Declaration public MdtmCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystemOptions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystemOptions.html",
    "title": "Class DotNetFileSystemOptions | FTP Server documentation",
    "keywords": "Class DotNetFileSystemOptions Options for the .NET API based file system access. Inheritance Object DotNetFileSystemOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.DotNet Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public class DotNetFileSystemOptions Properties | Improve this Doc View Source AllowNonEmptyDirectoryDelete Gets or sets a value indicating whether deletion of non-empty directories is allowed. Declaration public bool AllowNonEmptyDirectoryDelete { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RootPath Gets or sets the root path for all users. Declaration public string RootPath { get; set; } Property Value Type Description String | Improve this Doc View Source StreamBufferSize Gets or sets the buffer size to be used in async IO methods. Declaration public int? StreamBufferSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source UseUserIdAsSubFolder Gets or sets a value indicating whether the user ID should be used as sub directory. Declaration public bool UseUserIdAsSubFolder { get; set; } Property Value Type Description Boolean"
  },
  "api/FubarDev.FtpServer.InMemoryFtpServerBuilderExtensions.html": {
    "href": "api/FubarDev.FtpServer.InMemoryFtpServerBuilderExtensions.html",
    "title": "Class InMemoryFtpServerBuilderExtensions | FTP Server documentation",
    "keywords": "Class InMemoryFtpServerBuilderExtensions Extension methods for IFtpServerBuilder . Inheritance Object InMemoryFtpServerBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public static class InMemoryFtpServerBuilderExtensions Methods | Improve this Doc View Source UseInMemoryFileSystem(IFtpServerBuilder) Uses the in-memory file system API. Declaration public static IFtpServerBuilder UseInMemoryFileSystem(this IFtpServerBuilder builder) Parameters Type Name Description IFtpServerBuilder builder The server builder used to configure the FTP server. Returns Type Description IFtpServerBuilder the server builder used to configure the FTP server."
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveFileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveFileSystem.html",
    "title": "Class GoogleDriveFileSystem | FTP Server documentation",
    "keywords": "Class GoogleDriveFileSystem The IUnixFileSystem implementation that uses Google Drive. Inheritance Object GoogleDriveFileSystem Implements IUnixFileSystem IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.GoogleDrive Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public sealed class GoogleDriveFileSystem : IGoogleDriveFileSystem, IUnixFileSystem, IDisposable Constructors | Improve this Doc View Source GoogleDriveFileSystem(DriveService, File, ITemporaryDataFactory, Boolean) Initializes a new instance of the GoogleDriveFileSystem class. Declaration public GoogleDriveFileSystem([NotNull] DriveService service, [NotNull] File rootFolderInfo, [NotNull] ITemporaryDataFactory temporaryDataFactory, bool useBackgroundUpload) Parameters Type Name Description Google.Apis.Drive.v3.DriveService service The Google.Apis.Drive.v3.DriveService instance to use to access the Google Drive. Google.Apis.Drive.v3.Data.File rootFolderInfo The Google.Apis.Drive.v3.Data.File to use as root folder. ITemporaryDataFactory temporaryDataFactory The factory to create temporary data objects. Boolean useBackgroundUpload Use the Google Drive uploader instead of the background uploader. Properties | Improve this Doc View Source FileSystemEntryComparer Gets a string comparer for file system entry names. Declaration public StringComparer FileSystemEntryComparer { get; } Property Value Type Description StringComparer Remarks Required to support case insensitive file systems. | Improve this Doc View Source Root Gets the root directory entry. Declaration public IUnixDirectoryEntry Root { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source Service Declaration public DriveService Service { get; } Property Value Type Description Google.Apis.Drive.v3.DriveService | Improve this Doc View Source SupportsAppend Gets a value indicating whether this file system supports appending to a file. Declaration public bool SupportsAppend { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsNonEmptyDirectoryDelete Gets a value indicating whether this file system supports deletion of non-empty directories. Declaration public bool SupportsNonEmptyDirectoryDelete { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AppendAsync(IUnixFileEntry, Nullable<Int64>, Stream, CancellationToken) Appends data to a file. Declaration public Task<IBackgroundTransfer> AppendAsync(IUnixFileEntry fileEntry, long? startPosition, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to append data to. Nullable < Int64 > startPosition The start position - when it is null, the data is appended. Stream data The data stream to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateAsync(IUnixDirectoryEntry, String, Stream, CancellationToken) Creates a file with the given fileName and data . Declaration public Task<IBackgroundTransfer> CreateAsync(IUnixDirectoryEntry targetDirectory, string fileName, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the file in. String fileName The name of the new file. Stream data The Stream used to read the data for the new file. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateDirectoryAsync(IUnixDirectoryEntry, String, CancellationToken) Creates a sub directory with the name directoryName in targetDirectory . Declaration public Task<IUnixDirectoryEntry> CreateDirectoryAsync(IUnixDirectoryEntry targetDirectory, string directoryName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the sub directory in. String directoryName The name of the new sub directory. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The new IUnixDirectoryEntry . | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEntriesAsync(IUnixDirectoryEntry, CancellationToken) Gets a list of IUnixFileSystemEntry objects for a given directoryEntry . Declaration public Task<IReadOnlyList<IUnixFileSystemEntry>> GetEntriesAsync(IUnixDirectoryEntry directoryEntry, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entries for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IReadOnlyList < IUnixFileSystemEntry >> The list of IUnixFileSystemEntry objects for a given directoryEntry . | Improve this Doc View Source GetEntryByNameAsync(IUnixDirectoryEntry, String, CancellationToken) Gets a file system entry by name. Declaration public Task<IUnixFileSystemEntry> GetEntryByNameAsync(IUnixDirectoryEntry directoryEntry, string name, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entry for. String name The name of the file system entry to search. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the found IUnixFileSystemEntry . | Improve this Doc View Source MoveAsync(IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixDirectoryEntry, String, CancellationToken) Moves a file system entry from parent to target . Declaration public Task<IUnixFileSystemEntry> MoveAsync(IUnixDirectoryEntry parent, IUnixFileSystemEntry source, IUnixDirectoryEntry target, string fileName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry parent The IUnixDirectoryEntry of source . IUnixFileSystemEntry source The IUnixFileSystemEntry to move. IUnixDirectoryEntry target The destination IUnixDirectoryEntry where source gets moved to. String fileName The new name of source . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the new IUnixFileSystemEntry . | Improve this Doc View Source OpenReadAsync(IUnixFileEntry, Int64, CancellationToken) Opens a file for reading. Declaration public Task<Stream> OpenReadAsync(IUnixFileEntry fileEntry, long startPosition, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to read from. Int64 startPosition The start position to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Stream > The Stream to be used for reading. | Improve this Doc View Source ReplaceAsync(IUnixFileEntry, Stream, CancellationToken) Replaces the contents of a file. Declaration public Task<IBackgroundTransfer> ReplaceAsync(IUnixFileEntry fileEntry, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to replace the data for. Stream data The data to be written to the given fileEntry . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source SetMacTimeAsync(IUnixFileSystemEntry, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, CancellationToken) Sets the modify/access/create timestamp of a file system item. Declaration public Task<IUnixFileSystemEntry> SetMacTimeAsync(IUnixFileSystemEntry entry, DateTimeOffset? modify, DateTimeOffset? access, DateTimeOffset? create, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to change the timestamp for. Nullable < DateTimeOffset > modify The modification timestamp. Nullable < DateTimeOffset > access The access timestamp. Nullable < DateTimeOffset > create The creation timestamp. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > The modified IUnixFileSystemEntry . | Improve this Doc View Source UnlinkAsync(IUnixFileSystemEntry, CancellationToken) Deletes a IUnixFileSystemEntry . Declaration public Task UnlinkAsync(IUnixFileSystemEntry entry, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to delete. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task where the underlying action is performed on. Remarks An implementation might decide to move the entry into the trash instead of deleting it. Implements IUnixFileSystem System.IDisposable"
  },
  "api/FubarDev.FtpServer.CreateEncryptedStreamDelegate.html": {
    "href": "api/FubarDev.FtpServer.CreateEncryptedStreamDelegate.html",
    "title": "Delegate CreateEncryptedStreamDelegate | FTP Server documentation",
    "keywords": "Delegate CreateEncryptedStreamDelegate A delegate that's used to create an encrypted stream ( CreateEncryptedStream ). Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax [NotNull] public delegate Task<Stream> CreateEncryptedStreamDelegate([NotNull] Stream unencryptedStream); Parameters Type Name Description Stream unencryptedStream The unencrypted stream. Returns Type Description Task < Stream > The encrypted stream."
  },
  "api/FubarDev.FtpServer.CommandExtensions.OptsMlstCommandExtension.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.OptsMlstCommandExtension.html",
    "title": "Class OptsMlstCommandExtension | FTP Server documentation",
    "keywords": "Class OptsMlstCommandExtension MLST extension for the OPTS command. Inheritance Object FtpCommandHandlerExtension OptsMlstCommandExtension Implements IFtpCommandHandlerExtension IFtpCommandBase Inherited Members FtpCommandHandlerExtension.Names FtpCommandHandlerExtension.IsLoginRequired FtpCommandHandlerExtension.ExtensionFor FtpCommandHandlerExtension.Connection FtpCommandHandlerExtension.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandExtensions Assembly : FubarDev.FtpServer.Commands.dll Syntax public class OptsMlstCommandExtension : FtpCommandHandlerExtension, IFtpCommandHandlerExtension, IFtpCommandBase Constructors | Improve this Doc View Source OptsMlstCommandExtension(IFtpConnectionAccessor) Initializes a new instance of the OptsMlstCommandExtension class. Declaration public OptsMlstCommandExtension([NotNull] IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration public override void InitializeConnectionData() Overrides FtpCommandHandlerExtension.InitializeConnectionData() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandlerExtension.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtension IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.Generic.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Generic.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem.Generic | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem.Generic Classes GenericAccessMode Generic implementation of the IAccessMode interface. GenericUnixPermissions Generic implementation of IUnixPermissions ."
  },
  "api/FubarDev.FtpServer.FileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem Classes EmptyUnixFileSystem An empty file system to be used when the user isn't logged in yet. FileSystemExtensions Extensions for the file system stuff. MemoryTemporaryData Stores the temporary data in a memory stream. SearchResult<T> The result of a file system search operation. Interfaces IAccessMode A unix style access mode interface. IFileSystemClassFactory This factory interface is used to create a IUnixFileSystem implementation for a given user ID. IUnixDirectoryEntry A unix directory entry. IUnixFileEntry A unix file entry. IUnixFileSystem The unix file system abstraction used by the FTP server. IUnixFileSystemEntry The file system entry information that is shared between a IUnixDirectoryEntry and a IUnixFileEntry . IUnixOwner Defines the owning user and group of an item. IUnixPermissions Unix file system entry permissions."
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem.GoogleDrive | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem.GoogleDrive Classes GoogleDriveFileSystem The IUnixFileSystem implementation that uses Google Drive. GoogleDriveFileSystemProvider A file system provider for Google Drive. GoogleDriveOptions Options for the Google Drive-based file system. GoogleDriveServiceProvider The default implementation of the IGoogleDriveServiceProvider interface. Interfaces IGoogleDriveServiceProvider An interface to get the Google Drive service for the given user."
  },
  "api/FubarDev.FtpServer.Utilities.html": {
    "href": "api/FubarDev.FtpServer.Utilities.html",
    "title": "Namespace FubarDev.FtpServer.Utilities | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.Utilities Classes DirectoryListingEnumerator Helps to enumerate a directory with virtual . and .. entries."
  },
  "articles/authentication.html": {
    "href": "articles/authentication.html",
    "title": "Authentication | FTP Server documentation",
    "keywords": "Introduction The FTP server only supports anonymous authentication, because .NET Standard doesn't provide a cross-platform way to authenticate a user against the operating system. How it works The FTP server queries all services implementing the IMembershipProvider interface and tries to authenticate the given login/password against all registered providers. The first provider that was able to authenticate the user is stored in the FTP connection data. Warning The order of the registration of the membership providers is important. Anonymous authentication The anonymous authentiation is implemented by the AnonymousMembershipProvider class and can be configured by adding a service for an IAnonymousPasswordValidator . Default anonymous password validators NoValidation : Take the password without validation NoTopLevelDomainValidation : The E-Mail-Address doesn't need to have a TLD SimpleMailAddressValidation : Simple E-Mail validation BlockAnonymousValidation : Block anonymous logins The SimpleMailAddressValidation is the default password validator."
  },
  "articles/configuration.html": {
    "href": "articles/configuration.html",
    "title": "FTP Server Configuration | FTP Server documentation",
    "keywords": "Introduction The configuration is split into several parts: Services IFtpServerBuilder is the FTP Server configuration builder FtpServerOptions for the FTP server transport configuration FtpConnectionOptions to configure the default control connection text encoding AuthTlsOptions for the FTPS configuration DotNetFileSystemOptions to configure the file system access SystCommandOptions to specify the behavior of the SYST command Services You use a ServiceCollection and add your services to, e.g.: var services = new ServiceCollection() .AddFtpServer(builder => builder .EnableAnonymousAuthentication() .UseDotNetFileSystem()); This is also the absolute minimum configuration for the FTP server. IFtpServerBuilder This is the place where other services are configured that will be used by the FTP server. This are the options currently available: builder.EnableAnonymousAuthentication() : Enables anonymous authentication builder.UseDotNetFileSystem() : Uses a System.IO-based file systme builder.UseGoogleDrive(...) : Uses Google Drive as virtual file system FtpServerOptions This configures the address/host/port used by the server to listen for connections. The default value is localhost as address (IPv4 and IPv6 - if available) and 21 as port. FtpConnectionOptions This may be used to configure a different default character encoding. The default value is ASCII. AuthTlsOptions This configuration option allows the specification of an X509Certificate2 (with private key) that will be used to initiate encrypted connections. DotNetFileSystemOptions Used to configure the behavior of the System.IO-based file system access, like: The path to the root directory Usage of the user ID as subdirectory Is deletion of non-empty directories allowed? SystCommandOptions Here you can specify the operating system to be returned by the SYST command."
  },
  "articles/ftps.html": {
    "href": "articles/ftps.html",
    "title": "FTP over SSL/TLS | FTP Server documentation",
    "keywords": "Introduction The FTPS support enables encrypted communication with the server. How to use FTPS FTPS is automatically enabled as soon as you have set an X509 certificate with private key (read: the X509Certificate2 from a .pfx / .pkcs12 file) in the AuthTlsOptions . Example var cert = new X509Certificate2(\"my.pfx\", \"my-super-strong-password-that-nobody-knows\"); services.Configure<AuthTlsOptions>(cfg => cfg.ServerCertificate = cert); Epilogue You can test this - like many other things - using the sample application in the repository."
  },
  "articles/upgrade-3.0.html": {
    "href": "articles/upgrade-3.0.html",
    "title": "Upgrade from 2.x to 3.0 | FTP Server documentation",
    "keywords": "Overview File system changes Membership provider changes FTP command extensions changes Connection data changes FTP command collection changes Changelog What's new? What's changed? What's fixed? A look into the future Overview After the upgrade 3.0, you'll see that the IFtpServer.Start and IFtpServer.Stop functions are deprecated. Please query the IFtpServerHost instead and use the StartAsync and StopAsync functions instead. You will notice breaking changes in the following areas: File system Membership provider FTP command extensions Connection data FTP command collection File system changes The only change for file systems is that IFileSystemClassFactory.Create now requires an IAccountInformation parameter. This parameter provides more information in case a file system implementation needs it. Membership provider changes The membership provider is now asynchronous which means that the ValidateUser function was renamed to ValidateUserAsync . Everything else is the same. FTP command extensions changes The command extensions cannot be returned by IFtpCommandHandler.GetExtensions() anymore. The extensions were moved to their own file and the default extensions are automatically registered as service. Connection data changes The connection datas IsAnonymous property is obsolete. An anonymous user is now detected by testing if the FtpConnectionData.User implements IAnonymousFtpUser . FTP command collection changes We're now using ReadOnlySpan for both TelnetInputParser and FtpCommandCollector . Changelog What's new? In-memory file system Passive data connection port range (contribution from 40three GmbH) New IFtpServerHost interface New IFtpService interface which allows easy integration into ASP.NET Core New IAccountInformation interface New IAnonymousFtpUser interface What's changed? Google drive upload without background uploader BREAKING: The FTP commands are now registered as singletons to improve performance BREAKING: Usage of ReadOnlySpan in the FTP command collector BREAKING: IFileSystemClassFactory.Create takes an IAccountInformation BREAKING: The IMembershipProvider is now asynchronous BREAKING: FtpConnectionData.IsAnonymous is obsolete, the anonymous user is now of type IAnonymousFtpUser The IFtpCommandHandler.GetExtensions() is now deprecated as all extensions that were previously returned here have their own implementation now What's fixed? AUTH TLS fails gracefully when no SSL certificate is configured SITE BLST works again A look into the future The 4.x version will drop support for .NET Standard 1.3 and - eventually - .NET 4.6.1 as the FTP Server will be reimplemented as ConnectionHandler which will result into the following improvements: Easy hosting in an ASP.NET Core application Usage of pipelines when possible ( AUTH TLS might cause problems) Using the ASP.NET Core connection state management"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API documentation | FTP Server documentation",
    "keywords": "API documentation This is the documentation for the current version of the FTP server. The most important parts of the API are: IFtpServer the FTP server itself FtpServerOptions for the FTP server transport configuration FtpConnectionOptions to configure the default control connection text encoding AuthTlsOptions for the FTPS configuration DotNetFileSystemOptions to configure the file system access"
  },
  "api/FubarDev.FtpServer.SystCommandOptions.html": {
    "href": "api/FubarDev.FtpServer.SystCommandOptions.html",
    "title": "Class SystCommandOptions | FTP Server documentation",
    "keywords": "Class SystCommandOptions Options for the SYST command. Inheritance Object SystCommandOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SystCommandOptions Properties | Improve this Doc View Source OperatingSystem Gets or sets the operating system returned by the SYST command. Declaration public string OperatingSystem { get; set; } Property Value Type Description String"
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.IAnonymousPasswordValidator.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.IAnonymousPasswordValidator.html",
    "title": "Interface IAnonymousPasswordValidator | FTP Server documentation",
    "keywords": "Interface IAnonymousPasswordValidator This interface validates the password for an anonymous login. Namespace : FubarDev.FtpServer.AccountManagement.Anonymous Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IAnonymousPasswordValidator Methods | Improve this Doc View Source IsValid(String) Determines whether this password is valid for an anonymous login. Declaration bool IsValid(string password) Parameters Type Name Description String password The password to validate. Returns Type Description Boolean true when the password is valid for this kind of anonymous authentication."
  },
  "api/FubarDev.FtpServer.CommandHandlers.RntoCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.RntoCommandHandler.html",
    "title": "Class RntoCommandHandler | FTP Server documentation",
    "keywords": "Class RntoCommandHandler Implements the RNTO command. Inheritance Object FtpCommandHandler RntoCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class RntoCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source RntoCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the RntoCommandHandler class. Declaration public RntoCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public override bool IsAbortable { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsAbortable Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.PbszCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.PbszCommandHandler.html",
    "title": "Class PbszCommandHandler | FTP Server documentation",
    "keywords": "Class PbszCommandHandler The PBSZ command handler. Inheritance Object FtpCommandHandler PbszCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class PbszCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source PbszCommandHandler(IFtpConnectionAccessor, IOptions<AuthTlsOptions>) Initializes a new instance of the PbszCommandHandler class. Declaration public PbszCommandHandler(IFtpConnectionAccessor connectionAccessor, IOptions<AuthTlsOptions> options) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IOptions < AuthTlsOptions > options The SSL/TLS connection options. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.MfctCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MfctCommandHandler.html",
    "title": "Class MfctCommandHandler | FTP Server documentation",
    "keywords": "Class MfctCommandHandler Implements the MFCT command. Inheritance Object FtpCommandHandler MfctCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MfctCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MfctCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the MfctCommandHandler class. Declaration public MfctCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferInfo.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferInfo.html",
    "title": "Class BackgroundTransferInfo | FTP Server documentation",
    "keywords": "Class BackgroundTransferInfo Information about a background transfer. Inheritance Object BackgroundTransferInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public sealed class BackgroundTransferInfo Constructors | Improve this Doc View Source BackgroundTransferInfo(BackgroundTransferStatus, String, Nullable<Int64>) Initializes a new instance of the BackgroundTransferInfo class. Declaration public BackgroundTransferInfo(BackgroundTransferStatus status, string fileName, long? transferred) Parameters Type Name Description BackgroundTransferStatus status The status of the transfer. String fileName The full target file name. Nullable < Int64 > transferred The number of transferred bytes. Properties | Improve this Doc View Source FileName Gets the target file name (with path). Declaration public string FileName { get; } Property Value Type Description String | Improve this Doc View Source Status Gets the status of the transfer. Declaration public BackgroundTransferStatus Status { get; } Property Value Type Description BackgroundTransferStatus | Improve this Doc View Source Transferred Gets the number of transferred bytes. Declaration public long? Transferred { get; } Property Value Type Description Nullable < Int64 >"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.ModifyFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.ModifyFact.html",
    "title": "Class ModifyFact | FTP Server documentation",
    "keywords": "Class ModifyFact The modify fact. Inheritance Object ModifyFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class ModifyFact : IFact Constructors | Improve this Doc View Source ModifyFact(DateTimeOffset) Initializes a new instance of the ModifyFact class. Declaration public ModifyFact(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp The modification time stamp. Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Gets the modification time stamp. Declaration public DateTimeOffset Timestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.GenericFeatureInfo.html": {
    "href": "api/FubarDev.FtpServer.GenericFeatureInfo.html",
    "title": "Class GenericFeatureInfo | FTP Server documentation",
    "keywords": "Class GenericFeatureInfo Generic feature information. Inheritance Object GenericFeatureInfo Implements IFeatureInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class GenericFeatureInfo : IFeatureInfo Constructors | Improve this Doc View Source GenericFeatureInfo(String, Boolean, String[]) Initializes a new instance of the GenericFeatureInfo class. Declaration public GenericFeatureInfo([NotNull] string name, bool requiresAuthentication, [NotNull, ItemNotNull] params string[] additionalNames) Parameters Type Name Description String name The feature name. Boolean requiresAuthentication Indicates whether this extension requires an authenticated user. String [] additionalNames The additional feature names. | Improve this Doc View Source GenericFeatureInfo(String, Func<IFtpConnection, String>, Boolean, String[]) Initializes a new instance of the GenericFeatureInfo class. Declaration public GenericFeatureInfo([NotNull] string name, [CanBeNull] Func<IFtpConnection, string> toString, bool requiresAuthentication, [NotNull, ItemNotNull] params string[] additionalNames) Parameters Type Name Description String name The feature name. Func < IFtpConnection , String > toString The function to use to create a FEAT string. Boolean requiresAuthentication Indicates whether this extension requires an authenticated user. String [] additionalNames The additional feature names. Properties | Improve this Doc View Source Names Gets the name of the feature. Declaration public ISet<string> Names { get; } Property Value Type Description ISet < String > Remarks Used by the OPTS command to find the handler of the feature to modify. | Improve this Doc View Source RequiresAuthentication Gets a value indicating whether this extension requires authentication. Declaration public bool RequiresAuthentication { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source BuildInfo(IFtpConnection) Build an informational string to be sent by the FEAT command. Declaration public string BuildInfo(IFtpConnection connection) Parameters Type Name Description IFtpConnection connection The configured connection. Returns Type Description String the informational string to be sent by the FEAT command. Implements IFeatureInfo"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem.Error | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem.Error Classes BadParameterException Command not implemented for that parameter. FileNameNotAllowedException Requested action not taken. File name not allowed. FileSystemException Represents an error condition the underlying file system wants to communicate to the client. FileUnavailableException Requested action not taken. File unavailable (e.g., file not found, no access). StorageExceededException Requested file action aborted. Exceeded storage allocation (for current directory or dataset)."
  },
  "api/FubarDev.FtpServer.AccountManagement.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.html",
    "title": "Namespace FubarDev.FtpServer.AccountManagement | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.AccountManagement Classes AnonymousFtpUser An anonymous FTP user. AnonymousMembershipProvider Allow any anonymous login. MemberValidationResult Result for a member validation. Interfaces IAnonymousFtpUser The anonymous FTP interface. IFtpUser A basic FTP user interface. IMembershipProvider Membership provider interface. Enums MemberValidationStatus Validation result for a IMembershipProvider ."
  },
  "api/FubarDev.FtpServer.CommandExtensions.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.html",
    "title": "Namespace FubarDev.FtpServer.CommandExtensions | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.CommandExtensions Classes FtpCommandHandlerExtension The base class for FTP command extensions. OptsMlstCommandExtension MLST extension for the OPTS command. OptsUtf8CommandExtension The implementation of the OPTS UTF8 command. SiteBlstCommandExtension The implementation of the SITE BLST command. SiteUtimeCommandExtension The implementation of the SITE UTIME command."
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem.InMemory | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem.InMemory Classes InMemoryDirectoryEntry The im-memory directory entry. InMemoryFileEntry The in-memory file. InMemoryFileSystem The implementation of the in-memory file system. InMemoryFileSystemEntry The base class for all in-memory file system entries. InMemoryFileSystemOptions In-memory file system options. InMemoryFileSystemProvider An implementation of an in-memory file system."
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.html",
    "title": "Namespace FubarDev.FtpServer.AccountManagement.Anonymous | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.AccountManagement.Anonymous Classes BlockAnonymousValidation Disallow anonymous logins. NoTopLevelDomainValidation Allows a server address for anonymous authentication without top level domain. NoValidation Performs no validation. Every kind of password is allowed. SimpleMailAddressValidation The password must have the form of a valid email address. Interfaces IAnonymousPasswordValidator This interface validates the password for an anonymous login."
  },
  "api/FubarDev.FtpServer.ListFormatters.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.html",
    "title": "Namespace FubarDev.FtpServer.ListFormatters | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.ListFormatters Classes FactsListFormatter A formatter for the MLST command. LongListFormatter The IListFormatter for the long directory listing format. ShortListFormatter The IListFormatter for the short directory listing format (name only)."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | FTP Server documentation",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions Extension methods for IServiceCollection ."
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.html",
    "title": "Namespace FubarDev.FtpServer.BackgroundTransfer | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.BackgroundTransfer Classes BackgroundCommandHandler Asynchronous processing of an FTP command. BackgroundTransferInfo Information about a background transfer. TempFileTemporaryData Creates a temporary file to store the data. TemporaryDataFactory Factory to create ITemporaryData objects. Interfaces IBackgroundTransfer Interface for background data transfers. IBackgroundTransferWorker A background transfer worker. ITemporaryData Temporary data holder. ITemporaryDataFactory Factory for temporary data objects. Enums BackgroundTransferStatus The status of a single IBackgroundTransfer . Delegates TemporaryDataFactory.CreateAsyncDelegate The delegate to create temporary data objects."
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.html",
    "title": "Namespace FubarDev.FtpServer.ListFormatters.Facts | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.ListFormatters.Facts Classes CreateFact The create fact. CurrentDirectoryFact The cdir fact. GenericFact A generic fact to be used when no predefined exists. ModifyFact The modify fact. ParentDirectoryFact The pdir fact. PermissionsFact The perm fact. SizeFact The size fact. TypeFact The type fact. Interfaces IFact The basic interface for a fact ( MLST )."
  },
  "api/FubarDev.FtpServer.FtpResponse.html": {
    "href": "api/FubarDev.FtpServer.FtpResponse.html",
    "title": "Class FtpResponse | FTP Server documentation",
    "keywords": "Class FtpResponse FTP response. Inheritance Object FtpResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class FtpResponse Constructors | Improve this Doc View Source FtpResponse(Int32, String) Initializes a new instance of the FtpResponse class. Declaration public FtpResponse(int code, [CanBeNull] string message) Parameters Type Name Description Int32 code The response code. String message The response message. Properties | Improve this Doc View Source AfterWriteAction Gets or sets the Action to execute after sending the response to the client. Declaration public Action AfterWriteAction { get; set; } Property Value Type Description Action | Improve this Doc View Source Code Gets the response code. Declaration public int Code { get; } Property Value Type Description Int32 | Improve this Doc View Source Message Gets the response message. Declaration [CanBeNull] public string Message { get; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/FubarDev.FtpServer.TcpSocketClientAccessor.html": {
    "href": "api/FubarDev.FtpServer.TcpSocketClientAccessor.html",
    "title": "Class TcpSocketClientAccessor | FTP Server documentation",
    "keywords": "Class TcpSocketClientAccessor Accessor to set/get the current TcpClient . Inheritance Object TcpSocketClientAccessor Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class TcpSocketClientAccessor Properties | Improve this Doc View Source TcpSocketClient Gets or sets the current TcpClient . Declaration public TcpClient TcpSocketClient { get; set; } Property Value Type Description TcpClient"
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixOwner.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixOwner.html",
    "title": "Interface IUnixOwner | FTP Server documentation",
    "keywords": "Interface IUnixOwner Defines the owning user and group of an item. Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixOwner Properties | Improve this Doc View Source Group Gets the group. Declaration [NotNull] string Group { get; } Property Value Type Description String | Improve this Doc View Source Owner Gets the owner. Declaration [NotNull] string Owner { get; } Property Value Type Description String"
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.html",
    "title": "Namespace FubarDev.FtpServer.FileSystem.DotNet | FTP Server documentation",
    "keywords": "Namespace FubarDev.FtpServer.FileSystem.DotNet Classes DotNetDirectoryEntry A IUnixDirectoryEntry implementation for the standard .NET file system functionality. DotNetFileEntry A IUnixFileEntry implementation for the standard .NET file system functionality. DotNetFileSystem A IUnixFileSystem implementation that uses the standard .NET functionality to access the file system. DotNetFileSystemOptions Options for the .NET API based file system access. DotNetFileSystemProvider A IFileSystemClassFactory implementation that uses the standard .NET functionality to provide file system access."
  },
  "api/FubarDev.FtpServer.CommandHandlers.XrmdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.XrmdCommandHandler.html",
    "title": "Class XrmdCommandHandler | FTP Server documentation",
    "keywords": "Class XrmdCommandHandler Implements the XRMD command. Inheritance Object FtpCommandHandler XrmdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class XrmdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source XrmdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the XrmdCommandHandler class. Declaration public XrmdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.MffCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MffCommandHandler.html",
    "title": "Class MffCommandHandler | FTP Server documentation",
    "keywords": "Class MffCommandHandler Implements the MFF command. Inheritance Object FtpCommandHandler MffCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MffCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MffCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the MffCommandHandler class. Declaration public MffCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.AccountManagement.IMembershipProvider.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.IMembershipProvider.html",
    "title": "Interface IMembershipProvider | FTP Server documentation",
    "keywords": "Interface IMembershipProvider Membership provider interface. Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IMembershipProvider Remarks This interface must be implemented to allow the username/password authentication. Methods | Improve this Doc View Source ValidateUserAsync(String, String) Validates if the combination of username and password is valid. Declaration Task<MemberValidationResult> ValidateUserAsync([NotNull] string username, [NotNull] string password) Parameters Type Name Description String username The user name. String password The password. Returns Type Description Task < MemberValidationResult > The result of the validation."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | FTP Server documentation",
    "keywords": "Class ServiceCollectionExtensions Extension methods for IServiceCollection . Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : FubarDev.FtpServer.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddFtpServer(IServiceCollection, Action<IFtpServerBuilder>) Adds the FTP server services to the collection. Declaration public static IServiceCollection AddFtpServer(this IServiceCollection services, [NotNull] Action<IFtpServerBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection to add the FTP server services to. Action < IFtpServerBuilder > configure Configuration of the FTP server services. Returns Type Description IServiceCollection The service collection."
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.PermissionsFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.PermissionsFact.html",
    "title": "Class PermissionsFact | FTP Server documentation",
    "keywords": "Class PermissionsFact The perm fact. Inheritance Object PermissionsFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class PermissionsFact : IFact Constructors | Improve this Doc View Source PermissionsFact(IFtpUser, IUnixDirectoryEntry, IUnixDirectoryEntry) Initializes a new instance of the PermissionsFact class. Declaration public PermissionsFact([NotNull] IFtpUser user, [CanBeNull] IUnixDirectoryEntry dir, [NotNull] IUnixDirectoryEntry entry) Parameters Type Name Description IFtpUser user The current user. IUnixDirectoryEntry dir The current directory. IUnixDirectoryEntry entry The directory entry to get the permissions for. | Improve this Doc View Source PermissionsFact(IFtpUser, IUnixDirectoryEntry, IUnixFileEntry) Initializes a new instance of the PermissionsFact class. Declaration public PermissionsFact([NotNull] IFtpUser user, [NotNull] IUnixDirectoryEntry dir, [NotNull] IUnixFileEntry entry) Parameters Type Name Description IFtpUser user The current user. IUnixDirectoryEntry dir The current directory. IUnixFileEntry entry The file to create the permissions for. Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.ParentDirectoryFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.ParentDirectoryFact.html",
    "title": "Class ParentDirectoryFact | FTP Server documentation",
    "keywords": "Class ParentDirectoryFact The pdir fact. Inheritance Object TypeFact ParentDirectoryFact Implements IFact Inherited Members TypeFact.Name TypeFact.Value Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class ParentDirectoryFact : TypeFact, IFact Constructors | Improve this Doc View Source ParentDirectoryFact() Initializes a new instance of the ParentDirectoryFact class. Declaration public ParentDirectoryFact() Implements IFact"
  },
  "api/FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtension.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtension.html",
    "title": "Class FtpCommandHandlerExtension | FTP Server documentation",
    "keywords": "Class FtpCommandHandlerExtension The base class for FTP command extensions. Inheritance Object FtpCommandHandlerExtension OptsMlstCommandExtension OptsUtf8CommandExtension SiteBlstCommandExtension SiteUtimeCommandExtension Implements IFtpCommandHandlerExtension IFtpCommandBase Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandExtensions Assembly : FubarDev.FtpServer.Commands.dll Syntax public abstract class FtpCommandHandlerExtension : IFtpCommandHandlerExtension, IFtpCommandBase Constructors | Improve this Doc View Source FtpCommandHandlerExtension(IFtpConnectionAccessor, String, String, String[]) Initializes a new instance of the FtpCommandHandlerExtension class. Declaration protected FtpCommandHandlerExtension([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] string extensionFor, [NotNull] string name, [NotNull, ItemNotNull] params string[] alternativeNames) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. String extensionFor The name of the command this extension is for. String name The command name. String [] alternativeNames Alternative names. Properties | Improve this Doc View Source Connection Gets the connection this command was created for. Declaration [NotNull] protected IFtpConnection Connection { get; } Property Value Type Description IFtpConnection | Improve this Doc View Source Data Gets the connection data. Declaration [NotNull] protected FtpConnectionData Data { get; } Property Value Type Description FtpConnectionData | Improve this Doc View Source ExtensionFor Gets a name of the command this extension is for. Declaration public string ExtensionFor { get; } Property Value Type Description String | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public virtual bool? IsLoginRequired { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source Names Gets a collection of all command names for this command. Declaration public IReadOnlyCollection<string> Names { get; } Property Value Type Description IReadOnlyCollection < String > Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration public abstract void InitializeConnectionData() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public abstract Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Implements IFtpCommandHandlerExtension IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.AccountManagement.IAnonymousFtpUser.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.IAnonymousFtpUser.html",
    "title": "Interface IAnonymousFtpUser | FTP Server documentation",
    "keywords": "Interface IAnonymousFtpUser The anonymous FTP interface. Inherited Members IFtpUser.Name IFtpUser.IsInGroup(String) Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IAnonymousFtpUser : IFtpUser Remarks The password is interpreted as e-mail. Properties | Improve this Doc View Source Email Gets the e-mail of the anonymous user which was given as password. Declaration [CanBeNull] string Email { get; } Property Value Type Description String"
  },
  "api/FubarDev.FtpServer.CommandHandlers.CwdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.CwdCommandHandler.html",
    "title": "Class CwdCommandHandler | FTP Server documentation",
    "keywords": "Class CwdCommandHandler Implements the CWD command. Inheritance Object FtpCommandHandler CwdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class CwdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source CwdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the CwdCommandHandler class. Declaration public CwdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferStatus.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferStatus.html",
    "title": "Enum BackgroundTransferStatus | FTP Server documentation",
    "keywords": "Enum BackgroundTransferStatus The status of a single IBackgroundTransfer . Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public enum BackgroundTransferStatus Fields Name Description Enqueued Added to transfer queue. Finished Transfer finished. Transferring Transferring the data."
  },
  "api/FubarDev.FtpServer.CommandHandlers.OptsCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.OptsCommandHandler.html",
    "title": "Class OptsCommandHandler | FTP Server documentation",
    "keywords": "Class OptsCommandHandler Implements the OPTS command. Inheritance Object FtpCommandHandler OptsCommandHandler Implements IFtpCommandHandlerExtensionHost IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class OptsCommandHandler : FtpCommandHandler, IFtpCommandHandlerExtensionHost, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source OptsCommandHandler(IFtpConnectionAccessor, IEnumerable<IFtpCommandHandlerExtension>) Initializes a new instance of the OptsCommandHandler class. Declaration public OptsCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull, ItemNotNull] IEnumerable<IFtpCommandHandlerExtension> extensions) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IEnumerable < IFtpCommandHandlerExtension > extensions All registered extensions. Properties | Improve this Doc View Source Extensions Gets the extensions hosted by the FtpCommandHandler . Declaration public IDictionary<string, IFtpCommandHandlerExtension> Extensions { get; } Property Value Type Description IDictionary < String , IFtpCommandHandlerExtension > Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtensionHost IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FtpConnectionOptions.html": {
    "href": "api/FubarDev.FtpServer.FtpConnectionOptions.html",
    "title": "Class FtpConnectionOptions | FTP Server documentation",
    "keywords": "Class FtpConnectionOptions Options for the FTP connection. Inheritance Object FtpConnectionOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class FtpConnectionOptions Properties | Improve this Doc View Source DefaultEncoding Gets or sets the default connection encoding. Declaration public Encoding DefaultEncoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source PromiscuousPasv Gets or sets a value indicating whether to accept PASV connections from any source. If false (default), connections to a PASV port will only be accepted from the same IP that issued the respective PASV command. Declaration public bool PromiscuousPasv { get; set; } Property Value Type Description Boolean"
  },
  "api/FubarDev.FtpServer.FtpCommand.html": {
    "href": "api/FubarDev.FtpServer.FtpCommand.html",
    "title": "Class FtpCommand | FTP Server documentation",
    "keywords": "Class FtpCommand FTP command with argument. Inheritance Object FtpCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public sealed class FtpCommand Constructors | Improve this Doc View Source FtpCommand(String, String) Initializes a new instance of the FtpCommand class. Declaration public FtpCommand([NotNull] string commandName, [CanBeNull] string commandArgument) Parameters Type Name Description String commandName The command name. String commandArgument The command argument. Properties | Improve this Doc View Source Argument Gets the command argument. Declaration [NotNull] public string Argument { get; } Property Value Type Description String | Improve this Doc View Source Name Gets the command name. Declaration [NotNull] public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Parse(String) Splits the command into the name and its arguments. Declaration [NotNull] public static FtpCommand Parse([NotNull] string command) Parameters Type Name Description String command The command to split into name and arguments. Returns Type Description FtpCommand The created FtpCommand . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/FubarDev.FtpServer.CommandHandlers.AborCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.AborCommandHandler.html",
    "title": "Class AborCommandHandler | FTP Server documentation",
    "keywords": "Class AborCommandHandler Implements the ABOR command. Inheritance Object FtpCommandHandler AborCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class AborCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source AborCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the AborCommandHandler class. Declaration public AborCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.Utilities.DirectoryListingEnumerator.html": {
    "href": "api/FubarDev.FtpServer.Utilities.DirectoryListingEnumerator.html",
    "title": "Class DirectoryListingEnumerator | FTP Server documentation",
    "keywords": "Class DirectoryListingEnumerator Helps to enumerate a directory with virtual . and .. entries. Inheritance Object DirectoryListingEnumerator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.Utilities Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class DirectoryListingEnumerator Constructors | Improve this Doc View Source DirectoryListingEnumerator(IEnumerable<IUnixFileSystemEntry>, IUnixFileSystem, Stack<IUnixDirectoryEntry>, Boolean) Initializes a new instance of the DirectoryListingEnumerator class. Declaration public DirectoryListingEnumerator(IEnumerable<IUnixFileSystemEntry> entries, IUnixFileSystem fileSystem, Stack<IUnixDirectoryEntry> pathEntries, bool returnDotEntries) Parameters Type Name Description IEnumerable < IUnixFileSystemEntry > entries The file system entries to enumerate. IUnixFileSystem fileSystem The file system of the file system entries. Stack < IUnixDirectoryEntry > pathEntries The path entries of the current directory. Boolean returnDotEntries true when this enumerator should return the dot entries. Properties | Improve this Doc View Source CurrentDirectory Gets the current directory. Declaration [NotNull] public IUnixDirectoryEntry CurrentDirectory { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source Entry Gets the file system entry. Declaration [NotNull] public IUnixFileSystemEntry Entry { get; } Property Value Type Description IUnixFileSystemEntry | Improve this Doc View Source GrandParentDirectory Gets the grand parent directory. Declaration [CanBeNull] public IUnixDirectoryEntry GrandParentDirectory { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source IsDotEntry Gets a value indicating whether the current entry is either the . or .. entry. Declaration public bool IsDotEntry { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the entry which might be different from the original entries name. Declaration [NotNull] public string Name { get; } Property Value Type Description String | Improve this Doc View Source ParentDirectory Gets the parent directory. Declaration [CanBeNull] public IUnixDirectoryEntry ParentDirectory { get; } Property Value Type Description IUnixDirectoryEntry Methods | Improve this Doc View Source GetFullPath(String) Gets the full path for a given name. Declaration public string GetFullPath(string name) Parameters Type Name Description String name The name to get the full path for. Returns Type Description String The full path. | Improve this Doc View Source MoveNext() Called to enumerate the next directory listing entry. Declaration public bool MoveNext() Returns Type Description Boolean true when there is a value for Entry and Name ."
  },
  "api/FubarDev.FtpServer.TelnetInputParser-1.html": {
    "href": "api/FubarDev.FtpServer.TelnetInputParser-1.html",
    "title": "Class TelnetInputParser<T> | FTP Server documentation",
    "keywords": "Class TelnetInputParser<T> Filters the TELNET commands usually sent before an ABOR command. Inheritance Object TelnetInputParser<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public abstract class TelnetInputParser<T> Type Parameters Name Description T The return type of a Collect(ReadOnlySpan<Byte>) operation. Methods | Improve this Doc View Source Collect(ReadOnlySpan<Byte>) Collects data and handles the Synch and Interrupt Process TELNET commands. Declaration public IReadOnlyList<T> Collect(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data The data buffer. Returns Type Description IReadOnlyList <T> The list of items found inside the collected data. | Improve this Doc View Source DataReceived(ReadOnlySpan<Byte>) Collects all non-TELNET data. Declaration protected abstract IEnumerable<T> DataReceived(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan < Byte > data The data buffer. Returns Type Description IEnumerable <T> The collected items. | Improve this Doc View Source InterruptProcess() Handles the Interrupt Process command. Declaration protected virtual IEnumerable<T> InterruptProcess() Returns Type Description IEnumerable <T> The collected items. | Improve this Doc View Source Synch() Handles the Synch command. Declaration protected virtual IEnumerable<T> Synch() Returns Type Description IEnumerable <T> The collected items."
  },
  "api/FubarDev.FtpServer.CommandHandlers.MfmtCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MfmtCommandHandler.html",
    "title": "Class MfmtCommandHandler | FTP Server documentation",
    "keywords": "Class MfmtCommandHandler Implements the MFMT command. Inheritance Object FtpCommandHandler MfmtCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MfmtCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MfmtCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the MfmtCommandHandler class. Declaration public MfmtCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.AppeCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.AppeCommandHandler.html",
    "title": "Class AppeCommandHandler | FTP Server documentation",
    "keywords": "Class AppeCommandHandler Implements the APPE command. Inheritance Object FtpCommandHandler AppeCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class AppeCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source AppeCommandHandler(IFtpConnectionAccessor, IBackgroundTransferWorker) Initializes a new instance of the AppeCommandHandler class. Declaration public AppeCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] IBackgroundTransferWorker backgroundTransferWorker) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IBackgroundTransferWorker backgroundTransferWorker The background transfer worker service. Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public override bool IsAbortable { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsAbortable Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveFileSystemProvider.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveFileSystemProvider.html",
    "title": "Class GoogleDriveFileSystemProvider | FTP Server documentation",
    "keywords": "Class GoogleDriveFileSystemProvider A file system provider for Google Drive. Inheritance Object GoogleDriveFileSystemProvider Implements IFileSystemClassFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.GoogleDrive Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public class GoogleDriveFileSystemProvider : IFileSystemClassFactory Constructors | Improve this Doc View Source GoogleDriveFileSystemProvider(IGoogleDriveServiceProvider, ITemporaryDataFactory, IOptions<GoogleDriveOptions>) Initializes a new instance of the GoogleDriveFileSystemProvider class. Declaration public GoogleDriveFileSystemProvider([NotNull] IGoogleDriveServiceProvider serviceProvider, [NotNull] ITemporaryDataFactory temporaryDataFactory, [NotNull] IOptions<GoogleDriveOptions> options) Parameters Type Name Description IGoogleDriveServiceProvider serviceProvider The google drive service provider. ITemporaryDataFactory temporaryDataFactory The factory to create temporary data objects. IOptions < GoogleDriveOptions > options Options for the Google Drive file system. Methods | Improve this Doc View Source Create(IAccountInformation) Creates a IUnixFileSystem implementation for a given accountInformation . Declaration public Task<IUnixFileSystem> Create(IAccountInformation accountInformation) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. Returns Type Description Task < IUnixFileSystem > The new IUnixFileSystem for the accountInformation . Remarks When the login is anonymous, the User must be of type IAnonymousFtpUser . Implements IFileSystemClassFactory"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.BadParameterException.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.BadParameterException.html",
    "title": "Class BadParameterException | FTP Server documentation",
    "keywords": "Class BadParameterException Command not implemented for that parameter. Inheritance Object Exception FileSystemException BadParameterException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer.FileSystem.Error Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class BadParameterException : FileSystemException, ISerializable Constructors | Improve this Doc View Source BadParameterException() Initializes a new instance of the BadParameterException class. Declaration public BadParameterException() | Improve this Doc View Source BadParameterException(String) Initializes a new instance of the BadParameterException class. Declaration public BadParameterException(string message) Parameters Type Name Description String message The error message. | Improve this Doc View Source BadParameterException(String, Exception) Initializes a new instance of the BadParameterException class. Declaration public BadParameterException(string message, Exception innerException) Parameters Type Name Description String message The error message. Exception innerException The inner exception. Properties | Improve this Doc View Source FtpErrorCode Gets the FTP error code. Declaration public override int FtpErrorCode { get; } Property Value Type Description Int32 Overrides FileSystemException.FtpErrorCode | Improve this Doc View Source FtpErrorName Gets a human-readable generic error description. Declaration public override string FtpErrorName { get; } Property Value Type Description String Overrides FileSystemException.FtpErrorName Implements System.Runtime.Serialization.ISerializable"
  },
  "api/FubarDev.FtpServer.FtpCommandHandlerProcessDelegate.html": {
    "href": "api/FubarDev.FtpServer.FtpCommandHandlerProcessDelegate.html",
    "title": "Delegate FtpCommandHandlerProcessDelegate | FTP Server documentation",
    "keywords": "Delegate FtpCommandHandlerProcessDelegate Processes the command. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax [NotNull] [ItemCanBeNull] public delegate Task<FtpResponse> FtpCommandHandlerProcessDelegate([NotNull] FtpCommand command, CancellationToken cancellationToken); Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response."
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixDirectoryEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixDirectoryEntry.html",
    "title": "Interface IUnixDirectoryEntry | FTP Server documentation",
    "keywords": "Interface IUnixDirectoryEntry A unix directory entry. Inherited Members IUnixFileSystemEntry.Name IUnixFileSystemEntry.Permissions IUnixFileSystemEntry.LastWriteTime IUnixFileSystemEntry.CreatedTime IUnixFileSystemEntry.NumberOfLinks IUnixFileSystemEntry.FileSystem IUnixOwner.Owner IUnixOwner.Group Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixDirectoryEntry : IUnixFileSystemEntry, IUnixOwner Properties | Improve this Doc View Source IsDeletable Gets a value indicating whether this directory can be deleted. Declaration bool IsDeletable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRoot Gets a value indicating whether this is the root directory. Declaration bool IsRoot { get; } Property Value Type Description Boolean"
  },
  "api/FubarDev.FtpServer.ListFormatters.Facts.GenericFact.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.Facts.GenericFact.html",
    "title": "Class GenericFact | FTP Server documentation",
    "keywords": "Class GenericFact A generic fact to be used when no predefined exists. Inheritance Object GenericFact Implements IFact Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters.Facts Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class GenericFact : IFact Constructors | Improve this Doc View Source GenericFact(String, String) Initializes a new instance of the GenericFact class. Declaration public GenericFact(string name, string value) Parameters Type Name Description String name The fact name. String value The fact value. Properties | Improve this Doc View Source Name Gets the name of the fact. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the fact. Declaration public string Value { get; } Property Value Type Description String Implements IFact"
  },
  "api/FubarDev.FtpServer.ConnectionExtensions.html": {
    "href": "api/FubarDev.FtpServer.ConnectionExtensions.html",
    "title": "Class ConnectionExtensions | FTP Server documentation",
    "keywords": "Class ConnectionExtensions Extension methods for IFtpConnection . Inheritance Object ConnectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public static class ConnectionExtensions Methods | Improve this Doc View Source SendResponseAsync(IFtpConnection, Func<TcpClient, Task<FtpResponse>>, Func<Exception, FtpResponse>) Provides a wrapper for safe disposal of a response socket. Declaration [NotNull] [ItemNotNull] public static Task<FtpResponse> SendResponseAsync([NotNull] this IFtpConnection connection, [NotNull] Func<TcpClient, Task<FtpResponse>> asyncSendAction, [CanBeNull] Func<Exception, FtpResponse> createConnectionErrorFunc = null) Parameters Type Name Description IFtpConnection connection The connection to get the response socket from. Func < TcpClient , Task < FtpResponse >> asyncSendAction The action to perform with a working response socket. Func < Exception , FtpResponse > createConnectionErrorFunc Function to be called when opening the response socket failed. Returns Type Description Task < FtpResponse > The task with the FTP response."
  },
  "api/FubarDev.FtpServer.CommandExtensions.SiteBlstCommandExtension.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.SiteBlstCommandExtension.html",
    "title": "Class SiteBlstCommandExtension | FTP Server documentation",
    "keywords": "Class SiteBlstCommandExtension The implementation of the SITE BLST command. Inheritance Object FtpCommandHandlerExtension SiteBlstCommandExtension Implements IFtpCommandHandlerExtension IFtpCommandBase Inherited Members FtpCommandHandlerExtension.Names FtpCommandHandlerExtension.ExtensionFor FtpCommandHandlerExtension.Connection FtpCommandHandlerExtension.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandExtensions Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SiteBlstCommandExtension : FtpCommandHandlerExtension, IFtpCommandHandlerExtension, IFtpCommandBase Constructors | Improve this Doc View Source SiteBlstCommandExtension(IFtpConnectionAccessor, IBackgroundTransferWorker, ILogger<SiteBlstCommandExtension>) Initializes a new instance of the SiteBlstCommandExtension class. Declaration public SiteBlstCommandExtension([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] IBackgroundTransferWorker backgroundTransferWorker, [CanBeNull] ILogger<SiteBlstCommandExtension> logger = null) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IBackgroundTransferWorker backgroundTransferWorker The background transfer worker service. ILogger < SiteBlstCommandExtension > logger The logger. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool? IsLoginRequired { get; set; } Property Value Type Description Nullable < Boolean > Overrides FtpCommandHandlerExtension.IsLoginRequired Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration public override void InitializeConnectionData() Overrides FtpCommandHandlerExtension.InitializeConnectionData() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandlerExtension.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtension IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.RestCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.RestCommandHandler.html",
    "title": "Class RestCommandHandler | FTP Server documentation",
    "keywords": "Class RestCommandHandler Implements the REST command. Inheritance Object FtpCommandHandler RestCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class RestCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source RestCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the RestCommandHandler class. Declaration public RestCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.MkdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.MkdCommandHandler.html",
    "title": "Class MkdCommandHandler | FTP Server documentation",
    "keywords": "Class MkdCommandHandler Implements the MKD command. Inheritance Object FtpCommandHandler MkdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class MkdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source MkdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the MkdCommandHandler class. Declaration public MkdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.XcwdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.XcwdCommandHandler.html",
    "title": "Class XcwdCommandHandler | FTP Server documentation",
    "keywords": "Class XcwdCommandHandler Implements the XCWD command. Inheritance Object FtpCommandHandler XcwdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class XcwdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source XcwdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the XcwdCommandHandler class. Declaration public XcwdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.RetrCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.RetrCommandHandler.html",
    "title": "Class RetrCommandHandler | FTP Server documentation",
    "keywords": "Class RetrCommandHandler Implements the RETR command. Inheritance Object FtpCommandHandler RetrCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class RetrCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source RetrCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the RetrCommandHandler class. Declaration public RetrCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public override bool IsAbortable { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsAbortable Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FileSystem.Generic.GenericUnixPermissions.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Generic.GenericUnixPermissions.html",
    "title": "Class GenericUnixPermissions | FTP Server documentation",
    "keywords": "Class GenericUnixPermissions Generic implementation of IUnixPermissions . Inheritance Object GenericUnixPermissions Implements IUnixPermissions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.Generic Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class GenericUnixPermissions : IUnixPermissions Constructors | Improve this Doc View Source GenericUnixPermissions(IAccessMode, IAccessMode, IAccessMode) Initializes a new instance of the GenericUnixPermissions class. Declaration public GenericUnixPermissions([NotNull] IAccessMode user, [NotNull] IAccessMode group, [NotNull] IAccessMode other) Parameters Type Name Description IAccessMode user The user permissions. IAccessMode group The group permissions. IAccessMode other The other permissions. Properties | Improve this Doc View Source Group Gets the group permissions. Declaration public IAccessMode Group { get; } Property Value Type Description IAccessMode | Improve this Doc View Source Other Gets the other permissions. Declaration public IAccessMode Other { get; } Property Value Type Description IAccessMode | Improve this Doc View Source User Gets the user permissions. Declaration public IAccessMode User { get; } Property Value Type Description IAccessMode Implements IUnixPermissions Extension Methods PermissionsExtensions.GetAccessModeFor(IUnixPermissions, IUnixOwner, IFtpUser)"
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystemProvider.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystemProvider.html",
    "title": "Class DotNetFileSystemProvider | FTP Server documentation",
    "keywords": "Class DotNetFileSystemProvider A IFileSystemClassFactory implementation that uses the standard .NET functionality to provide file system access. Inheritance Object DotNetFileSystemProvider Implements IFileSystemClassFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.DotNet Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public class DotNetFileSystemProvider : IFileSystemClassFactory Constructors | Improve this Doc View Source DotNetFileSystemProvider(IOptions<DotNetFileSystemOptions>) Initializes a new instance of the DotNetFileSystemProvider class. Declaration public DotNetFileSystemProvider([NotNull] IOptions<DotNetFileSystemOptions> options) Parameters Type Name Description IOptions < DotNetFileSystemOptions > options The file system options. Methods | Improve this Doc View Source Create(IAccountInformation) Creates a IUnixFileSystem implementation for a given accountInformation . Declaration public Task<IUnixFileSystem> Create(IAccountInformation accountInformation) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. Returns Type Description Task < IUnixFileSystem > The new IUnixFileSystem for the accountInformation . Remarks When the login is anonymous, the User must be of type IAnonymousFtpUser . Implements IFileSystemClassFactory"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler.html",
    "title": "Class BackgroundCommandHandler | FTP Server documentation",
    "keywords": "Class BackgroundCommandHandler Asynchronous processing of an FTP command. Inheritance Object BackgroundCommandHandler Implements IBackgroundCommandHandler IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.dll Syntax public sealed class BackgroundCommandHandler : IBackgroundCommandHandler, IDisposable Remarks This allows the implementation of the ABOR command. Methods | Improve this Doc View Source Cancel() Cancels the processing of the current command. Declaration public bool Cancel() Returns Type Description Boolean true when there was a command execution that could be cancelled. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Execute(IFtpCommandBase, FtpCommand) Executes the FTP command with the given FTP command handler . Declaration public Task<FtpResponse> Execute(IFtpCommandBase handler, FtpCommand command) Parameters Type Name Description IFtpCommandBase handler The command handler that processes the given command . FtpCommand command The command to process by the handler . Returns Type Description Task < FtpResponse > null when the command could not be processed. Implements IBackgroundCommandHandler System.IDisposable"
  },
  "api/FubarDev.FtpServer.AccountManagement.Anonymous.NoValidation.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.Anonymous.NoValidation.html",
    "title": "Class NoValidation | FTP Server documentation",
    "keywords": "Class NoValidation Performs no validation. Every kind of password is allowed. Inheritance Object NoValidation Implements IAnonymousPasswordValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement.Anonymous Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class NoValidation : IAnonymousPasswordValidator Methods | Improve this Doc View Source IsValid(String) Determines whether this password is valid for an anonymous login. Declaration public bool IsValid(string password) Parameters Type Name Description String password The password to validate. Returns Type Description Boolean true when the password is valid for this kind of anonymous authentication. Implements IAnonymousPasswordValidator"
  },
  "api/FubarDev.FtpServer.PasvListener.html": {
    "href": "api/FubarDev.FtpServer.PasvListener.html",
    "title": "Class PasvListener | FTP Server documentation",
    "keywords": "Class PasvListener The default implementation of the IPasvListener interface. Inheritance Object PasvListener Implements IPasvListener IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class PasvListener : IPasvListener, IDisposable Constructors | Improve this Doc View Source PasvListener(IPAddress, Int32, IPAddress) Initializes a new instance of the PasvListener class. Declaration public PasvListener(IPAddress listenAddress, int port, IPAddress externalAddress) Parameters Type Name Description IPAddress listenAddress On which address to listen. Int32 port Port to listen on, or 0 for any. IPAddress externalAddress which external address should be advertised to clients. Use null to use the listener's address. Exceptions Type Condition ArgumentNullException listenAddress is null. ArgumentOutOfRangeException port is out of range. Properties | Improve this Doc View Source PasvEndPoint Gets the Endpoint under which the listener is reachable by clients. Declaration public IPEndPoint PasvEndPoint { get; } Property Value Type Description IPEndPoint Methods | Improve this Doc View Source AcceptPasvClientAsync() Accept a client from a PASV command. Declaration public Task<TcpClient> AcceptPasvClientAsync() Returns Type Description Task < TcpClient > A TcpClient with which to communicate with the client. Exceptions Type Condition SocketException Network error, see SocketError . ObjectDisposedException Listener was disposed of. | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IPasvListener System.IDisposable"
  },
  "api/FubarDev.FtpServer.AccountManagement.AnonymousMembershipProvider.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.AnonymousMembershipProvider.html",
    "title": "Class AnonymousMembershipProvider | FTP Server documentation",
    "keywords": "Class AnonymousMembershipProvider Allow any anonymous login. Inheritance Object AnonymousMembershipProvider Implements IMembershipProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class AnonymousMembershipProvider : IMembershipProvider Constructors | Improve this Doc View Source AnonymousMembershipProvider() Initializes a new instance of the AnonymousMembershipProvider class. Declaration public AnonymousMembershipProvider() Remarks Anonymous logins must provide an email address that at least seems to be valid ( SimpleMailAddressValidation ). | Improve this Doc View Source AnonymousMembershipProvider(IAnonymousPasswordValidator) Initializes a new instance of the AnonymousMembershipProvider class. Declaration public AnonymousMembershipProvider([NotNull] IAnonymousPasswordValidator anonymousPasswordValidator) Parameters Type Name Description IAnonymousPasswordValidator anonymousPasswordValidator Anonymous login validation. Methods | Improve this Doc View Source ValidateUserAsync(String, String) Validates if the combination of username and password is valid. Declaration public Task<MemberValidationResult> ValidateUserAsync(string username, string password) Parameters Type Name Description String username The user name. String password The password. Returns Type Description Task < MemberValidationResult > The result of the validation. Implements IMembershipProvider"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.TemporaryDataFactory.CreateAsyncDelegate.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.TemporaryDataFactory.CreateAsyncDelegate.html",
    "title": "Delegate TemporaryDataFactory.CreateAsyncDelegate | FTP Server documentation",
    "keywords": "Delegate TemporaryDataFactory.CreateAsyncDelegate The delegate to create temporary data objects. Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax protected delegate Task<ITemporaryData> CreateAsyncDelegate(Stream input, CancellationToken cancellationToken); Parameters Type Name Description Stream input The data for the temporary data objects. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ITemporaryData > A Task representing the asynchronous operation."
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileSystem.html",
    "title": "Class DotNetFileSystem | FTP Server documentation",
    "keywords": "Class DotNetFileSystem A IUnixFileSystem implementation that uses the standard .NET functionality to access the file system. Inheritance Object DotNetFileSystem Implements IUnixFileSystem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.DotNet Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public class DotNetFileSystem : IUnixFileSystem Constructors | Improve this Doc View Source DotNetFileSystem(String, Boolean) Initializes a new instance of the DotNetFileSystem class. Declaration public DotNetFileSystem(string rootPath, bool allowNonEmptyDirectoryDelete) Parameters Type Name Description String rootPath The path to use as root. Boolean allowNonEmptyDirectoryDelete Defines whether the deletion of non-empty directories is allowed. | Improve this Doc View Source DotNetFileSystem(String, Boolean, Int32) Initializes a new instance of the DotNetFileSystem class. Declaration public DotNetFileSystem(string rootPath, bool allowNonEmptyDirectoryDelete, int streamBufferSize) Parameters Type Name Description String rootPath The path to use as root. Boolean allowNonEmptyDirectoryDelete Defines whether the deletion of non-empty directories is allowed. Int32 streamBufferSize Buffer size to be used in async IO methods. Fields | Improve this Doc View Source DefaultStreamBufferSize The default buffer size for copying from one stream to another. Declaration public static readonly int DefaultStreamBufferSize Field Value Type Description Int32 Properties | Improve this Doc View Source FileSystemEntryComparer Gets a string comparer for file system entry names. Declaration public StringComparer FileSystemEntryComparer { get; } Property Value Type Description StringComparer Remarks Required to support case insensitive file systems. | Improve this Doc View Source Root Gets the root directory entry. Declaration public IUnixDirectoryEntry Root { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source SupportsAppend Gets a value indicating whether this file system supports appending to a file. Declaration public bool SupportsAppend { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsNonEmptyDirectoryDelete Gets a value indicating whether this file system supports deletion of non-empty directories. Declaration public bool SupportsNonEmptyDirectoryDelete { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AppendAsync(IUnixFileEntry, Nullable<Int64>, Stream, CancellationToken) Appends data to a file. Declaration public Task<IBackgroundTransfer> AppendAsync(IUnixFileEntry fileEntry, long? startPosition, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to append data to. Nullable < Int64 > startPosition The start position - when it is null, the data is appended. Stream data The data stream to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateAsync(IUnixDirectoryEntry, String, Stream, CancellationToken) Creates a file with the given fileName and data . Declaration public Task<IBackgroundTransfer> CreateAsync(IUnixDirectoryEntry targetDirectory, string fileName, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the file in. String fileName The name of the new file. Stream data The Stream used to read the data for the new file. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateDirectoryAsync(IUnixDirectoryEntry, String, CancellationToken) Creates a sub directory with the name directoryName in targetDirectory . Declaration public Task<IUnixDirectoryEntry> CreateDirectoryAsync(IUnixDirectoryEntry targetDirectory, string directoryName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the sub directory in. String directoryName The name of the new sub directory. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The new IUnixDirectoryEntry . | Improve this Doc View Source GetEntriesAsync(IUnixDirectoryEntry, CancellationToken) Gets a list of IUnixFileSystemEntry objects for a given directoryEntry . Declaration public Task<IReadOnlyList<IUnixFileSystemEntry>> GetEntriesAsync(IUnixDirectoryEntry directoryEntry, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entries for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IReadOnlyList < IUnixFileSystemEntry >> The list of IUnixFileSystemEntry objects for a given directoryEntry . | Improve this Doc View Source GetEntryByNameAsync(IUnixDirectoryEntry, String, CancellationToken) Gets a file system entry by name. Declaration public Task<IUnixFileSystemEntry> GetEntryByNameAsync(IUnixDirectoryEntry directoryEntry, string name, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entry for. String name The name of the file system entry to search. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the found IUnixFileSystemEntry . | Improve this Doc View Source MoveAsync(IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixDirectoryEntry, String, CancellationToken) Moves a file system entry from parent to target . Declaration public Task<IUnixFileSystemEntry> MoveAsync(IUnixDirectoryEntry parent, IUnixFileSystemEntry source, IUnixDirectoryEntry target, string fileName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry parent The IUnixDirectoryEntry of source . IUnixFileSystemEntry source The IUnixFileSystemEntry to move. IUnixDirectoryEntry target The destination IUnixDirectoryEntry where source gets moved to. String fileName The new name of source . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the new IUnixFileSystemEntry . | Improve this Doc View Source OpenReadAsync(IUnixFileEntry, Int64, CancellationToken) Opens a file for reading. Declaration public Task<Stream> OpenReadAsync(IUnixFileEntry fileEntry, long startPosition, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to read from. Int64 startPosition The start position to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Stream > The Stream to be used for reading. | Improve this Doc View Source ReplaceAsync(IUnixFileEntry, Stream, CancellationToken) Replaces the contents of a file. Declaration public Task<IBackgroundTransfer> ReplaceAsync(IUnixFileEntry fileEntry, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to replace the data for. Stream data The data to be written to the given fileEntry . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source SetMacTimeAsync(IUnixFileSystemEntry, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, CancellationToken) Sets the modify/access/create timestamp of a file system item. Declaration public Task<IUnixFileSystemEntry> SetMacTimeAsync(IUnixFileSystemEntry entry, DateTimeOffset? modify, DateTimeOffset? access, DateTimeOffset? create, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to change the timestamp for. Nullable < DateTimeOffset > modify The modification timestamp. Nullable < DateTimeOffset > access The access timestamp. Nullable < DateTimeOffset > create The creation timestamp. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > The modified IUnixFileSystemEntry . | Improve this Doc View Source UnlinkAsync(IUnixFileSystemEntry, CancellationToken) Deletes a IUnixFileSystemEntry . Declaration public Task UnlinkAsync(IUnixFileSystemEntry entry, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to delete. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task where the underlying action is performed on. Remarks An implementation might decide to move the entry into the trash instead of deleting it. Implements IUnixFileSystem"
  },
  "api/FubarDev.FtpServer.FileSystem.IUnixFileSystemEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IUnixFileSystemEntry.html",
    "title": "Interface IUnixFileSystemEntry | FTP Server documentation",
    "keywords": "Interface IUnixFileSystemEntry The file system entry information that is shared between a IUnixDirectoryEntry and a IUnixFileEntry . Inherited Members IUnixOwner.Owner IUnixOwner.Group Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IUnixFileSystemEntry : IUnixOwner Properties | Improve this Doc View Source CreatedTime Gets the time of creation. Declaration DateTimeOffset? CreatedTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source FileSystem Gets the file system this entry belongs to. Declaration [NotNull] IUnixFileSystem FileSystem { get; } Property Value Type Description IUnixFileSystem | Improve this Doc View Source LastWriteTime Gets the last write time. Declaration DateTimeOffset? LastWriteTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Name Gets the name of the file system entry. Declaration [NotNull] string Name { get; } Property Value Type Description String | Improve this Doc View Source NumberOfLinks Gets the number of links. Declaration long NumberOfLinks { get; } Property Value Type Description Int64 | Improve this Doc View Source Permissions Gets the file entry permissions. Declaration [NotNull] IUnixPermissions Permissions { get; } Property Value Type Description IUnixPermissions"
  },
  "api/FubarDev.FtpServer.FileSystem.SearchResult-1.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.SearchResult-1.html",
    "title": "Class SearchResult<T> | FTP Server documentation",
    "keywords": "Class SearchResult<T> The result of a file system search operation. Inheritance Object SearchResult<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class SearchResult<T> where T : IUnixFileSystemEntry Type Parameters Name Description T The type of the found file system entry. Constructors | Improve this Doc View Source SearchResult(IUnixDirectoryEntry, T, String) Initializes a new instance of the SearchResult<T> class. Declaration public SearchResult([NotNull] IUnixDirectoryEntry directoryEntry, [CanBeNull] T fileEntry, [CanBeNull] string fileName) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The directory entry of the found fileEntry . T fileEntry The found IUnixFileSystemEntry . String fileName The name of the IUnixFileSystemEntry to be searched for within the directoryEntry . Properties | Improve this Doc View Source Directory Gets the IUnixDirectoryEntry where the FileName was searched. Declaration [NotNull] public IUnixDirectoryEntry Directory { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source Entry Gets the found IUnixFileSystemEntry . Declaration [CanBeNull] public T Entry { get; } Property Value Type Description T Remarks null when the target entry could not be found. | Improve this Doc View Source FileName Gets the name of the Entry . Declaration [CanBeNull] public string FileName { get; } Property Value Type Description String Remarks null when the found entry is a ROOT entry."
  },
  "api/FubarDev.FtpServer.FileSystem.IAccessMode.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.IAccessMode.html",
    "title": "Interface IAccessMode | FTP Server documentation",
    "keywords": "Interface IAccessMode A unix style access mode interface. Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IAccessMode Properties | Improve this Doc View Source Execute Gets a value indicating whether an execute is allowed. Declaration bool Execute { get; } Property Value Type Description Boolean | Improve this Doc View Source Read Gets a value indicating whether a read is allowed. Declaration bool Read { get; } Property Value Type Description Boolean | Improve this Doc View Source Write Gets a value indicating whether a write is allowed. Declaration bool Write { get; } Property Value Type Description Boolean"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.FileUnavailableException.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.FileUnavailableException.html",
    "title": "Class FileUnavailableException | FTP Server documentation",
    "keywords": "Class FileUnavailableException Requested action not taken. File unavailable (e.g., file not found, no access). Inheritance Object Exception FileSystemException FileUnavailableException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer.FileSystem.Error Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class FileUnavailableException : FileSystemException, ISerializable Constructors | Improve this Doc View Source FileUnavailableException() Initializes a new instance of the FileUnavailableException class. Declaration public FileUnavailableException() | Improve this Doc View Source FileUnavailableException(String) Initializes a new instance of the FileUnavailableException class. Declaration public FileUnavailableException(string message) Parameters Type Name Description String message The error message. | Improve this Doc View Source FileUnavailableException(String, Exception) Initializes a new instance of the FileUnavailableException class. Declaration public FileUnavailableException(string message, Exception innerException) Parameters Type Name Description String message The error message. Exception innerException The underlying exception. Properties | Improve this Doc View Source FtpErrorCode Gets the FTP error code. Declaration public override int FtpErrorCode { get; } Property Value Type Description Int32 Overrides FileSystemException.FtpErrorCode | Improve this Doc View Source FtpErrorName Gets a human-readable generic error description. Declaration public override string FtpErrorName { get; } Property Value Type Description String Overrides FileSystemException.FtpErrorName Implements System.Runtime.Serialization.ISerializable"
  },
  "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.DotNet.DotNetFileEntry.html",
    "title": "Class DotNetFileEntry | FTP Server documentation",
    "keywords": "Class DotNetFileEntry A IUnixFileEntry implementation for the standard .NET file system functionality. Inheritance Object DotNetFileEntry Implements IUnixFileEntry IUnixFileSystemEntry IUnixOwner Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.DotNet Assembly : FubarDev.FtpServer.FileSystem.DotNet.dll Syntax public class DotNetFileEntry : IUnixFileEntry, IUnixFileSystemEntry, IUnixOwner Constructors | Improve this Doc View Source DotNetFileEntry(DotNetFileSystem, FileInfo) Initializes a new instance of the DotNetFileEntry class. Declaration public DotNetFileEntry([NotNull] DotNetFileSystem fileSystem, [NotNull] FileInfo info) Parameters Type Name Description DotNetFileSystem fileSystem The file system this entry belongs to. FileInfo info The FileInfo to extract the information from. Properties | Improve this Doc View Source CreatedTime Gets the time of creation. Declaration public DateTimeOffset? CreatedTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source FileSystem Gets the file system this entry belongs to. Declaration public IUnixFileSystem FileSystem { get; } Property Value Type Description IUnixFileSystem | Improve this Doc View Source Group Gets the group. Declaration public string Group { get; } Property Value Type Description String | Improve this Doc View Source Info Gets the underlying FileInfo . Declaration public FileInfo Info { get; } Property Value Type Description FileInfo | Improve this Doc View Source LastWriteTime Gets the last write time. Declaration public DateTimeOffset? LastWriteTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Name Gets the name of the file system entry. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source NumberOfLinks Gets the number of links. Declaration public long NumberOfLinks { get; } Property Value Type Description Int64 | Improve this Doc View Source Owner Gets the owner. Declaration public string Owner { get; } Property Value Type Description String | Improve this Doc View Source Permissions Gets the file entry permissions. Declaration public IUnixPermissions Permissions { get; } Property Value Type Description IUnixPermissions | Improve this Doc View Source Size Gets the size of the file. Declaration public long Size { get; } Property Value Type Description Int64 Implements IUnixFileEntry IUnixFileSystemEntry IUnixOwner"
  },
  "api/FubarDev.FtpServer.CommandHandlers.SystCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.SystCommandHandler.html",
    "title": "Class SystCommandHandler | FTP Server documentation",
    "keywords": "Class SystCommandHandler Implements the SYST command. Inheritance Object FtpCommandHandler SystCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SystCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source SystCommandHandler(IFtpConnectionAccessor, IOptions<SystCommandOptions>) Initializes a new instance of the SystCommandHandler class. Declaration public SystCommandHandler(IFtpConnectionAccessor connectionAccessor, IOptions<SystCommandOptions> options) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IOptions < SystCommandOptions > options Options for the SYST command. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.PwdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.PwdCommandHandler.html",
    "title": "Class PwdCommandHandler | FTP Server documentation",
    "keywords": "Class PwdCommandHandler Implements the PWD command. Inheritance Object FtpCommandHandler PwdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class PwdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source PwdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the PwdCommandHandler class. Declaration public PwdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.IFtpCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.IFtpCommandHandler.html",
    "title": "Interface IFtpCommandHandler | FTP Server documentation",
    "keywords": "Interface IFtpCommandHandler Interface that an FTP command handler has to implement. Inherited Members IFtpCommandBase.Names IFtpCommandBase.Process(FtpCommand, CancellationToken) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpCommandHandler : IFtpCommandBase Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration bool IsAbortable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration bool IsLoginRequired { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetExtensions() Gets a collection of command handler extensions provided by this command handler. Declaration [NotNull] [ItemNotNull] [Obsolete(\"All IFtpCommandHandlerExtension implementations are now stand-alone.\")] IEnumerable<IFtpCommandHandlerExtension> GetExtensions() Returns Type Description IEnumerable < IFtpCommandHandlerExtension > A collection of command handler extensions provided by this command handler. | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration [NotNull] [ItemNotNull] IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler."
  },
  "api/FubarDev.FtpServer.FtpServerHost.html": {
    "href": "api/FubarDev.FtpServer.FtpServerHost.html",
    "title": "Class FtpServerHost | FTP Server documentation",
    "keywords": "Class FtpServerHost Simple IFtpServerHost implementation. Inheritance Object FtpServerHost Implements IFtpServerHost Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class FtpServerHost : IFtpServerHost Remarks This services is used to start and stop all IFtpService instances. Constructors | Improve this Doc View Source FtpServerHost(IEnumerable<IFtpService>) Initializes a new instance of the FtpServerHost class. Declaration public FtpServerHost(IEnumerable<IFtpService> ftpServices) Parameters Type Name Description IEnumerable < IFtpService > ftpServices The FTP services to start and stop. Methods | Improve this Doc View Source StartAsync(CancellationToken) Must be called to start the FTP server host. Declaration public Task StartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task The task. Remarks Starts all FTP server services. | Improve this Doc View Source StopAsync(CancellationToken) Must be called for a graceful shutdown of the FTP server host. Declaration public Task StopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task The task. Remarks Stops all FTP server services. Implements IFtpServerHost"
  },
  "api/FubarDev.FtpServer.CommandExtensions.SiteUtimeCommandExtension.html": {
    "href": "api/FubarDev.FtpServer.CommandExtensions.SiteUtimeCommandExtension.html",
    "title": "Class SiteUtimeCommandExtension | FTP Server documentation",
    "keywords": "Class SiteUtimeCommandExtension The implementation of the SITE UTIME command. Inheritance Object FtpCommandHandlerExtension SiteUtimeCommandExtension Implements IFtpCommandHandlerExtension IFtpCommandBase Inherited Members FtpCommandHandlerExtension.Names FtpCommandHandlerExtension.IsLoginRequired FtpCommandHandlerExtension.ExtensionFor FtpCommandHandlerExtension.Connection FtpCommandHandlerExtension.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandExtensions Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SiteUtimeCommandExtension : FtpCommandHandlerExtension, IFtpCommandHandlerExtension, IFtpCommandBase Constructors | Improve this Doc View Source SiteUtimeCommandExtension(IFtpConnectionAccessor) Initializes a new instance of the SiteUtimeCommandExtension class. Declaration public SiteUtimeCommandExtension([NotNull] IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source InitializeConnectionData() Called to initialize the connection data. Declaration public override void InitializeConnectionData() Overrides FtpCommandHandlerExtension.InitializeConnectionData() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandlerExtension.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtension IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.IBackgroundTransferWorker.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.IBackgroundTransferWorker.html",
    "title": "Interface IBackgroundTransferWorker | FTP Server documentation",
    "keywords": "Interface IBackgroundTransferWorker A background transfer worker. Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IBackgroundTransferWorker Methods | Improve this Doc View Source Enqueue(IBackgroundTransfer) Enqueue an entry for a background transfer (e.g. upload). Declaration void Enqueue([NotNull] IBackgroundTransfer backgroundTransfer) Parameters Type Name Description IBackgroundTransfer backgroundTransfer The background transfer to enqueue. | Improve this Doc View Source GetStates() Get the status of all enqueued and active background transfers. Declaration [NotNull] [ItemNotNull] IReadOnlyCollection<BackgroundTransferInfo> GetStates() Returns Type Description IReadOnlyCollection < BackgroundTransferInfo > The status of all background transfers."
  },
  "api/FubarDev.FtpServer.IFtpService.html": {
    "href": "api/FubarDev.FtpServer.IFtpService.html",
    "title": "Interface IFtpService | FTP Server documentation",
    "keywords": "Interface IFtpService Defines methods for services required to run the FTP server. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpService Methods | Improve this Doc View Source StartAsync(CancellationToken) Triggered when the application host is ready to start the service. Declaration Task StartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task The task. | Improve this Doc View Source StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. Declaration Task StopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task The task."
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveServiceProvider.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.GoogleDriveServiceProvider.html",
    "title": "Class GoogleDriveServiceProvider | FTP Server documentation",
    "keywords": "Class GoogleDriveServiceProvider The default implementation of the IGoogleDriveServiceProvider interface. Inheritance Object GoogleDriveServiceProvider Implements IGoogleDriveServiceProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.GoogleDrive Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public class GoogleDriveServiceProvider : IGoogleDriveServiceProvider Constructors | Improve this Doc View Source GoogleDriveServiceProvider(DriveService) Initializes a new instance of the GoogleDriveServiceProvider class. Declaration public GoogleDriveServiceProvider(DriveService driveService) Parameters Type Name Description Google.Apis.Drive.v3.DriveService driveService The Google Drive service. Methods | Improve this Doc View Source GetUserRootAsync(IAccountInformation, CancellationToken) Gets the Google Drive service and root entry for the given user. Declaration public Task<(DriveService service, File rootEntry)> GetUserRootAsync(IAccountInformation accountInformation, CancellationToken cancellationToken) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ValueTuple < Google.Apis.Drive.v3.DriveService , Google.Apis.Drive.v3.Data.File >> The Google Drive service and the root entry. Implements IGoogleDriveServiceProvider"
  },
  "api/FubarDev.FtpServer.FileSystem.EmptyUnixFileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.EmptyUnixFileSystem.html",
    "title": "Class EmptyUnixFileSystem | FTP Server documentation",
    "keywords": "Class EmptyUnixFileSystem An empty file system to be used when the user isn't logged in yet. Inheritance Object EmptyUnixFileSystem Implements IUnixFileSystem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class EmptyUnixFileSystem : IUnixFileSystem Constructors | Improve this Doc View Source EmptyUnixFileSystem() Initializes a new instance of the EmptyUnixFileSystem class. Declaration public EmptyUnixFileSystem() Properties | Improve this Doc View Source FileSystemEntryComparer Gets a string comparer for file system entry names. Declaration public StringComparer FileSystemEntryComparer { get; } Property Value Type Description StringComparer Remarks Required to support case insensitive file systems. | Improve this Doc View Source Root Gets the root directory entry. Declaration public IUnixDirectoryEntry Root { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source SupportsAppend Gets a value indicating whether this file system supports appending to a file. Declaration public bool SupportsAppend { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsNonEmptyDirectoryDelete Gets a value indicating whether this file system supports deletion of non-empty directories. Declaration public bool SupportsNonEmptyDirectoryDelete { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AppendAsync(IUnixFileEntry, Nullable<Int64>, Stream, CancellationToken) Appends data to a file. Declaration public Task<IBackgroundTransfer> AppendAsync(IUnixFileEntry fileEntry, long? startPosition, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to append data to. Nullable < Int64 > startPosition The start position - when it is null, the data is appended. Stream data The data stream to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateAsync(IUnixDirectoryEntry, String, Stream, CancellationToken) Creates a file with the given fileName and data . Declaration public Task<IBackgroundTransfer> CreateAsync(IUnixDirectoryEntry targetDirectory, string fileName, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the file in. String fileName The name of the new file. Stream data The Stream used to read the data for the new file. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateDirectoryAsync(IUnixDirectoryEntry, String, CancellationToken) Creates a sub directory with the name directoryName in targetDirectory . Declaration public Task<IUnixDirectoryEntry> CreateDirectoryAsync(IUnixDirectoryEntry targetDirectory, string directoryName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the sub directory in. String directoryName The name of the new sub directory. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The new IUnixDirectoryEntry . | Improve this Doc View Source GetEntriesAsync(IUnixDirectoryEntry, CancellationToken) Gets a list of IUnixFileSystemEntry objects for a given directoryEntry . Declaration public Task<IReadOnlyList<IUnixFileSystemEntry>> GetEntriesAsync(IUnixDirectoryEntry directoryEntry, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entries for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IReadOnlyList < IUnixFileSystemEntry >> The list of IUnixFileSystemEntry objects for a given directoryEntry . | Improve this Doc View Source GetEntryByNameAsync(IUnixDirectoryEntry, String, CancellationToken) Gets a file system entry by name. Declaration public Task<IUnixFileSystemEntry> GetEntryByNameAsync(IUnixDirectoryEntry directoryEntry, string name, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entry for. String name The name of the file system entry to search. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the found IUnixFileSystemEntry . | Improve this Doc View Source MoveAsync(IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixDirectoryEntry, String, CancellationToken) Moves a file system entry from parent to target . Declaration public Task<IUnixFileSystemEntry> MoveAsync(IUnixDirectoryEntry parent, IUnixFileSystemEntry source, IUnixDirectoryEntry target, string fileName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry parent The IUnixDirectoryEntry of source . IUnixFileSystemEntry source The IUnixFileSystemEntry to move. IUnixDirectoryEntry target The destination IUnixDirectoryEntry where source gets moved to. String fileName The new name of source . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the new IUnixFileSystemEntry . | Improve this Doc View Source OpenReadAsync(IUnixFileEntry, Int64, CancellationToken) Opens a file for reading. Declaration public Task<Stream> OpenReadAsync(IUnixFileEntry fileEntry, long startPosition, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to read from. Int64 startPosition The start position to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Stream > The Stream to be used for reading. | Improve this Doc View Source ReplaceAsync(IUnixFileEntry, Stream, CancellationToken) Replaces the contents of a file. Declaration public Task<IBackgroundTransfer> ReplaceAsync(IUnixFileEntry fileEntry, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to replace the data for. Stream data The data to be written to the given fileEntry . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source SetMacTimeAsync(IUnixFileSystemEntry, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, CancellationToken) Sets the modify/access/create timestamp of a file system item. Declaration public Task<IUnixFileSystemEntry> SetMacTimeAsync(IUnixFileSystemEntry entry, DateTimeOffset? modify, DateTimeOffset? access, DateTimeOffset? create, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to change the timestamp for. Nullable < DateTimeOffset > modify The modification timestamp. Nullable < DateTimeOffset > access The access timestamp. Nullable < DateTimeOffset > create The creation timestamp. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > The modified IUnixFileSystemEntry . | Improve this Doc View Source UnlinkAsync(IUnixFileSystemEntry, CancellationToken) Deletes a IUnixFileSystemEntry . Declaration public Task UnlinkAsync(IUnixFileSystemEntry entry, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to delete. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task where the underlying action is performed on. Remarks An implementation might decide to move the entry into the trash instead of deleting it. Implements IUnixFileSystem Extension Methods FileSystemExtensions.GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.GetDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchDirectoryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchFileAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken) FileSystemExtensions.SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, String, CancellationToken) FileSystemExtensions.SearchEntryAsync(IUnixFileSystem, Stack<IUnixDirectoryEntry>, IReadOnlyList<String>, CancellationToken)"
  },
  "api/FubarDev.FtpServer.FileSystem.Error.FileSystemException.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.Error.FileSystemException.html",
    "title": "Class FileSystemException | FTP Server documentation",
    "keywords": "Class FileSystemException Represents an error condition the underlying file system wants to communicate to the client. Inheritance Object Exception FileSystemException BadParameterException FileNameNotAllowedException FileUnavailableException StorageExceededException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer.FileSystem.Error Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public abstract class FileSystemException : Exception, ISerializable Constructors | Improve this Doc View Source FileSystemException() Initializes a new instance of the FileSystemException class. Declaration protected FileSystemException() | Improve this Doc View Source FileSystemException(String) Initializes a new instance of the FileSystemException class. Declaration protected FileSystemException(string message) Parameters Type Name Description String message The error message. | Improve this Doc View Source FileSystemException(String, Exception) Initializes a new instance of the FileSystemException class. Declaration protected FileSystemException(string message, Exception innerException) Parameters Type Name Description String message The error message. Exception innerException The underlying exception. Properties | Improve this Doc View Source FtpErrorCode Gets the FTP error code. Declaration public abstract int FtpErrorCode { get; } Property Value Type Description Int32 | Improve this Doc View Source FtpErrorName Gets a human-readable generic error description. Declaration public abstract string FtpErrorName { get; } Property Value Type Description String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/FubarDev.FtpServer.CommandHandlers.ProtCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.ProtCommandHandler.html",
    "title": "Class ProtCommandHandler | FTP Server documentation",
    "keywords": "Class ProtCommandHandler The PROT command handler. Inheritance Object FtpCommandHandler ProtCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class ProtCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source ProtCommandHandler(IFtpConnectionAccessor, IOptions<AuthTlsOptions>) Initializes a new instance of the ProtCommandHandler class. Declaration public ProtCommandHandler(IFtpConnectionAccessor connectionAccessor, IOptions<AuthTlsOptions> options) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IOptions < AuthTlsOptions > options The SSL/TLS connection options. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.IFtpCommandBase.html": {
    "href": "api/FubarDev.FtpServer.IFtpCommandBase.html",
    "title": "Interface IFtpCommandBase | FTP Server documentation",
    "keywords": "Interface IFtpCommandBase The base interface for command handlers and extensions. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpCommandBase Properties | Improve this Doc View Source Names Gets a collection of all command names for this command. Declaration [NotNull] [ItemNotNull] IReadOnlyCollection<string> Names { get; } Property Value Type Description IReadOnlyCollection < String > Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration [NotNull] [ItemCanBeNull] Task<FtpResponse> Process([NotNull] FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response."
  },
  "api/FubarDev.FtpServer.IFeatureInfo.html": {
    "href": "api/FubarDev.FtpServer.IFeatureInfo.html",
    "title": "Interface IFeatureInfo | FTP Server documentation",
    "keywords": "Interface IFeatureInfo Defines a feature and its handler. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFeatureInfo Properties | Improve this Doc View Source Names Gets the name of the feature. Declaration [NotNull] [ItemNotNull] ISet<string> Names { get; } Property Value Type Description ISet < String > Remarks Used by the OPTS command to find the handler of the feature to modify. | Improve this Doc View Source RequiresAuthentication Gets a value indicating whether this extension requires authentication. Declaration bool RequiresAuthentication { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source BuildInfo(IFtpConnection) Build an informational string to be sent by the FEAT command. Declaration [NotNull] string BuildInfo([NotNull] IFtpConnection connection) Parameters Type Name Description IFtpConnection connection The configured connection. Returns Type Description String the informational string to be sent by the FEAT command."
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryDirectoryEntry.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryDirectoryEntry.html",
    "title": "Class InMemoryDirectoryEntry | FTP Server documentation",
    "keywords": "Class InMemoryDirectoryEntry The im-memory directory entry. Inheritance Object InMemoryFileSystemEntry InMemoryDirectoryEntry Implements IUnixDirectoryEntry IUnixFileSystemEntry IUnixOwner Inherited Members InMemoryFileSystemEntry.Name InMemoryFileSystemEntry.Owner InMemoryFileSystemEntry.Group InMemoryFileSystemEntry.Permissions InMemoryFileSystemEntry.LastWriteTime InMemoryFileSystemEntry.CreatedTime InMemoryFileSystemEntry.NumberOfLinks InMemoryFileSystemEntry.FileSystem InMemoryFileSystemEntry.Parent InMemoryFileSystemEntry.WithOwner(IFtpUser) InMemoryFileSystemEntry.SetLastWriteTime(DateTimeOffset) InMemoryFileSystemEntry.SetCreateTime(DateTimeOffset) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public class InMemoryDirectoryEntry : InMemoryFileSystemEntry, IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixOwner Constructors | Improve this Doc View Source InMemoryDirectoryEntry(IUnixFileSystem, InMemoryDirectoryEntry, String, IDictionary<String, IUnixFileSystemEntry>) Initializes a new instance of the InMemoryDirectoryEntry class. Declaration public InMemoryDirectoryEntry(IUnixFileSystem fileSystem, InMemoryDirectoryEntry parent, string name, IDictionary<string, IUnixFileSystemEntry> children) Parameters Type Name Description IUnixFileSystem fileSystem The file system this entry belongs to. InMemoryDirectoryEntry parent The parent entry. String name The name of this entry. IDictionary < String , IUnixFileSystemEntry > children The children of this directory entry. Properties | Improve this Doc View Source Children Gets the children of this directory entry. Declaration public IDictionary<string, IUnixFileSystemEntry> Children { get; } Property Value Type Description IDictionary < String , IUnixFileSystemEntry > | Improve this Doc View Source IsDeletable Gets a value indicating whether this directory can be deleted. Declaration public bool IsDeletable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRoot Gets a value indicating whether this is the root directory. Declaration public bool IsRoot { get; } Property Value Type Description Boolean Implements IUnixDirectoryEntry IUnixFileSystemEntry IUnixOwner"
  },
  "api/FubarDev.FtpServer.CommandHandlers.ListCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.ListCommandHandler.html",
    "title": "Class ListCommandHandler | FTP Server documentation",
    "keywords": "Class ListCommandHandler Implements the LIST and NLST commands. Inheritance Object FtpCommandHandler ListCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class ListCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source ListCommandHandler(IFtpConnectionAccessor, ILogger<ListCommandHandler>) Initializes a new instance of the ListCommandHandler class. Declaration public ListCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [CanBeNull] ILogger<ListCommandHandler> logger = null) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. ILogger < ListCommandHandler > logger The logger. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FtpTransferMode.html": {
    "href": "api/FubarDev.FtpServer.FtpTransferMode.html",
    "title": "Class FtpTransferMode | FTP Server documentation",
    "keywords": "Class FtpTransferMode FTP transfer mode (RFC 959, 3.4.). Inheritance Object FtpTransferMode Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public sealed class FtpTransferMode Constructors | Improve this Doc View Source FtpTransferMode(FtpFileType) Initializes a new instance of the FtpTransferMode class. Declaration public FtpTransferMode(FtpFileType fileType) Parameters Type Name Description FtpFileType fileType The file data type of this transfer mode. Properties | Improve this Doc View Source Bits Gets the bits of a binary transfer mode. Declaration public int? Bits { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source FileType Gets the file data type. Declaration public FtpFileType FileType { get; } Property Value Type Description FtpFileType | Improve this Doc View Source InterpreterMode Gets the interpreter mode. Declaration public FtpFileTypeInterpreterMode? InterpreterMode { get; } Property Value Type Description Nullable < FtpFileTypeInterpreterMode > | Improve this Doc View Source IsBinary Gets a value indicating whether the transfer mode is binary. Declaration public bool IsBinary { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Parse(String) Parses a transfer mode. Declaration public static FtpTransferMode Parse(string type) Parameters Type Name Description String type The transfer mode to parse. Returns Type Description FtpTransferMode The new FtpTransferMode . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/FubarDev.FtpServer.IFtpServerStatistics.html": {
    "href": "api/FubarDev.FtpServer.IFtpServerStatistics.html",
    "title": "Interface IFtpServerStatistics | FTP Server documentation",
    "keywords": "Interface IFtpServerStatistics Statistics about the FTP server. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpServerStatistics Properties | Improve this Doc View Source ActiveConnections Gets the currently active number of connections. Declaration long ActiveConnections { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalConnections Gets the total number of connections. Declaration long TotalConnections { get; } Property Value Type Description Int64"
  },
  "api/FubarDev.FtpServer.IFtpServerHost.html": {
    "href": "api/FubarDev.FtpServer.IFtpServerHost.html",
    "title": "Interface IFtpServerHost | FTP Server documentation",
    "keywords": "Interface IFtpServerHost Interface for a simple FTP server host. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public interface IFtpServerHost Remarks This services is used to start and stop all IFtpService instances. Methods | Improve this Doc View Source StartAsync(CancellationToken) Must be called to start the FTP server host. Declaration Task StartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task The task. Remarks Starts all FTP server services. | Improve this Doc View Source StopAsync(CancellationToken) Must be called for a graceful shutdown of the FTP server host. Declaration Task StopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task The task. Remarks Stops all FTP server services."
  },
  "api/FubarDev.FtpServer.FileSystem.GoogleDrive.IGoogleDriveServiceProvider.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.GoogleDrive.IGoogleDriveServiceProvider.html",
    "title": "Interface IGoogleDriveServiceProvider | FTP Server documentation",
    "keywords": "Interface IGoogleDriveServiceProvider An interface to get the Google Drive service for the given user. Namespace : FubarDev.FtpServer.FileSystem.GoogleDrive Assembly : FubarDev.FtpServer.FileSystem.GoogleDrive.dll Syntax public interface IGoogleDriveServiceProvider Methods | Improve this Doc View Source GetUserRootAsync(IAccountInformation, CancellationToken) Gets the Google Drive service and root entry for the given user. Declaration Task<(DriveService service, File rootEntry)> GetUserRootAsync(IAccountInformation accountInformation, CancellationToken cancellationToken) Parameters Type Name Description IAccountInformation accountInformation The FTP account to create the IUnixFileSystem for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < ValueTuple < Google.Apis.Drive.v3.DriveService , Google.Apis.Drive.v3.Data.File >> The Google Drive service and the root entry."
  },
  "api/FubarDev.FtpServer.CommandHandlers.CdUpCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.CdUpCommandHandler.html",
    "title": "Class CdUpCommandHandler | FTP Server documentation",
    "keywords": "Class CdUpCommandHandler Implements the CDUP command. Inheritance Object FtpCommandHandler CdUpCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class CdUpCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source CdUpCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the CdUpCommandHandler class. Declaration public CdUpCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.BackgroundTransfer.TempFileTemporaryData.html": {
    "href": "api/FubarDev.FtpServer.BackgroundTransfer.TempFileTemporaryData.html",
    "title": "Class TempFileTemporaryData | FTP Server documentation",
    "keywords": "Class TempFileTemporaryData Creates a temporary file to store the data. Inheritance Object TempFileTemporaryData Implements ITemporaryData IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.BackgroundTransfer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class TempFileTemporaryData : ITemporaryData, IDisposable Constructors | Improve this Doc View Source TempFileTemporaryData() Initializes a new instance of the TempFileTemporaryData class. Declaration public TempFileTemporaryData() Properties | Improve this Doc View Source Size Gets the size of the temporary data. Declaration public long Size { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source FillAsync(Stream, CancellationToken) Fills the temporary file with the data from the input stream. Declaration public Task FillAsync(Stream input, CancellationToken cancellationToken) Parameters Type Name Description Stream input The input stream. CancellationToken cancellationToken The cancellation token. Returns Type Description Task A Task representing the asynchronous operation. | Improve this Doc View Source OpenAsync() Opens the temporary data and returns a stream. Declaration public Task<Stream> OpenAsync() Returns Type Description Task < Stream > The stream containig the temporary data. Implements ITemporaryData System.IDisposable"
  },
  "api/FubarDev.FtpServer.FtpFileType.html": {
    "href": "api/FubarDev.FtpServer.FtpFileType.html",
    "title": "Enum FtpFileType | FTP Server documentation",
    "keywords": "Enum FtpFileType FTP data type (3.1.1). Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public enum FtpFileType Fields Name Description Ascii ASCII data type (3.1.1.1.). Ebcdic EBCDIC data type (3.1.1.2.). Image IMAGE data type (3.1.1.3.). Local LOCAL data type (3.1.1.4.)."
  },
  "api/FubarDev.FtpServer.CommandHandlers.SiteCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.SiteCommandHandler.html",
    "title": "Class SiteCommandHandler | FTP Server documentation",
    "keywords": "Class SiteCommandHandler The SITE command handler. Inheritance Object FtpCommandHandler SiteCommandHandler Implements IFtpCommandHandlerExtensionHost IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SiteCommandHandler : FtpCommandHandler, IFtpCommandHandlerExtensionHost, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source SiteCommandHandler(IFtpConnectionAccessor, IEnumerable<IFtpCommandHandlerExtension>) Initializes a new instance of the SiteCommandHandler class. Declaration public SiteCommandHandler(IFtpConnectionAccessor connectionAccessor, [NotNull, ItemNotNull] IEnumerable<IFtpCommandHandlerExtension> extensions) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IEnumerable < IFtpCommandHandlerExtension > extensions All registered extensions. Properties | Improve this Doc View Source Extensions Gets the extensions hosted by the FtpCommandHandler . Declaration public IDictionary<string, IFtpCommandHandlerExtension> Extensions { get; } Property Value Type Description IDictionary < String , IFtpCommandHandlerExtension > Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandlerExtensionHost IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.PassCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.PassCommandHandler.html",
    "title": "Class PassCommandHandler | FTP Server documentation",
    "keywords": "Class PassCommandHandler Implements the PASS command. Inheritance Object FtpCommandHandler PassCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class PassCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source PassCommandHandler(IFtpConnectionAccessor, IEnumerable<IMembershipProvider>, IFileSystemClassFactory) Initializes a new instance of the PassCommandHandler class. Declaration public PassCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] IEnumerable<IMembershipProvider> membershipProviders, [NotNull] IFileSystemClassFactory fileSystemClassFactory) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IEnumerable < IMembershipProvider > membershipProviders The membership providers. IFileSystemClassFactory fileSystemClassFactory The file system access factory. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.SizeCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.SizeCommandHandler.html",
    "title": "Class SizeCommandHandler | FTP Server documentation",
    "keywords": "Class SizeCommandHandler Implements the SIZE command. Inheritance Object FtpCommandHandler SizeCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class SizeCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source SizeCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the SizeCommandHandler class. Declaration public SizeCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public override IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. Overrides FtpCommandHandler.GetSupportedFeatures() | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.IFtpCommandHandlerExtensionHost.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.IFtpCommandHandlerExtensionHost.html",
    "title": "Interface IFtpCommandHandlerExtensionHost | FTP Server documentation",
    "keywords": "Interface IFtpCommandHandlerExtensionHost Interface indicating that a command handler can act as an extension host. Inherited Members IFtpCommandHandler.IsLoginRequired IFtpCommandHandler.IsAbortable IFtpCommandHandler.GetSupportedFeatures() IFtpCommandHandler.GetExtensions() IFtpCommandBase.Names IFtpCommandBase.Process(FtpCommand, CancellationToken) Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public interface IFtpCommandHandlerExtensionHost : IFtpCommandHandler, IFtpCommandBase Properties | Improve this Doc View Source Extensions Gets the extensions hosted by the FtpCommandHandler . Declaration [NotNull] IDictionary<string, IFtpCommandHandlerExtension> Extensions { get; } Property Value Type Description IDictionary < String , IFtpCommandHandlerExtension >"
  },
  "api/FubarDev.FtpServer.IFtpServer.html": {
    "href": "api/FubarDev.FtpServer.IFtpServer.html",
    "title": "Interface IFtpServer | FTP Server documentation",
    "keywords": "Interface IFtpServer The interface that must be implemented by the FTP server. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpServer Properties | Improve this Doc View Source MaxActiveConnections Gets the max allows active connections. This will cause connections to be refused if count is exceeded. 0 (default) means no control over connection count. Declaration int MaxActiveConnections { get; } Property Value Type Description Int32 | Improve this Doc View Source Port Gets the port on which the FTP server is listening for incoming connections. Declaration int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source Ready Gets a value indicating whether server ready to receive incoming connectoions. Declaration bool Ready { get; } Property Value Type Description Boolean | Improve this Doc View Source ServerAddress Gets the public IP address (required for PASV and EPSV ). Declaration [NotNull] string ServerAddress { get; } Property Value Type Description String | Improve this Doc View Source Statistics Gets the FTP server statistics. Declaration [NotNull] IFtpServerStatistics Statistics { get; } Property Value Type Description IFtpServerStatistics Methods | Improve this Doc View Source Start() Starts the FTP server in the background. Declaration [Obsolete(\"User IFtpServerHost.StartAsync instead.\")] void Start() | Improve this Doc View Source Stop() Stops the FTP server. Declaration [Obsolete(\"User IFtpServerHost.StopAsync instead.\")] void Stop() Remarks The FTP server cannot be started again after it was stopped. Events | Improve this Doc View Source ConfigureConnection This event is raised when the connection is ready to be configured. Declaration event EventHandler<ConnectionEventArgs> ConfigureConnection Event Type Type Description EventHandler < ConnectionEventArgs >"
  },
  "api/FubarDev.FtpServer.IFtpConnectionAccessor.html": {
    "href": "api/FubarDev.FtpServer.IFtpConnectionAccessor.html",
    "title": "Interface IFtpConnectionAccessor | FTP Server documentation",
    "keywords": "Interface IFtpConnectionAccessor Accessor to get/set the current (scoped) FTP connection. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IFtpConnectionAccessor Properties | Improve this Doc View Source FtpConnection Gets or sets the current FTP connection. Declaration IFtpConnection FtpConnection { get; set; } Property Value Type Description IFtpConnection"
  },
  "api/FubarDev.FtpServer.CommandHandlers.FtpCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.FtpCommandHandler.html",
    "title": "Class FtpCommandHandler | FTP Server documentation",
    "keywords": "Class FtpCommandHandler The base class for all FTP command handlers. Inheritance Object FtpCommandHandler AborCommandHandler AlloCommandHandler AppeCommandHandler AuthTlsCommandHandler CdUpCommandHandler CwdCommandHandler DeleCommandHandler FeatCommandHandler HelpCommandHandler ListCommandHandler MdtmCommandHandler MfctCommandHandler MffCommandHandler MfmtCommandHandler MkdCommandHandler MlstCommandHandler ModeCommandHandler NoOpCommandHandler OptsCommandHandler PassCommandHandler PasvCommandHandler PbszCommandHandler PortCommandHandler ProtCommandHandler PwdCommandHandler QuitCommandHandler RestCommandHandler RetrCommandHandler RmdCommandHandler RnfrCommandHandler RntoCommandHandler SiteCommandHandler SizeCommandHandler StatCommandHandler StorCommandHandler StruCommandHandler SystCommandHandler TypeCommandHandler UserCommandHandler XcwdCommandHandler XmkdCommandHandler XrmdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public abstract class FtpCommandHandler : IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source FtpCommandHandler(IFtpConnectionAccessor, String, String[]) Initializes a new instance of the FtpCommandHandler class. Declaration protected FtpCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] string name, [NotNull, ItemNotNull] params string[] alternativeNames) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. String name The command name. String [] alternativeNames Alternative names. Properties | Improve this Doc View Source Connection Gets the connection this command was created for. Declaration [NotNull] protected IFtpConnection Connection { get; } Property Value Type Description IFtpConnection | Improve this Doc View Source Data Gets the connection data. Declaration [NotNull] protected FtpConnectionData Data { get; } Property Value Type Description FtpConnectionData | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public virtual bool IsAbortable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public virtual bool IsLoginRequired { get; } Property Value Type Description Boolean | Improve this Doc View Source Names Gets a collection of all command names for this command. Declaration public IReadOnlyCollection<string> Names { get; } Property Value Type Description IReadOnlyCollection < String > Methods | Improve this Doc View Source GetExtensions() Gets a collection of command handler extensions provided by this command handler. Declaration public virtual IEnumerable<IFtpCommandHandlerExtension> GetExtensions() Returns Type Description IEnumerable < IFtpCommandHandlerExtension > A collection of command handler extensions provided by this command handler. | Improve this Doc View Source GetSupportedFeatures() Gets a collection of features supported by this command handler. Declaration public virtual IEnumerable<IFeatureInfo> GetSupportedFeatures() Returns Type Description IEnumerable < IFeatureInfo > A list of features supported by this command handler. | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public abstract Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.StatCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.StatCommandHandler.html",
    "title": "Class StatCommandHandler | FTP Server documentation",
    "keywords": "Class StatCommandHandler The STAT command handler. Inheritance Object FtpCommandHandler StatCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class StatCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source StatCommandHandler(IFtpConnectionAccessor, IFtpServer, IBackgroundTransferWorker) Initializes a new instance of the StatCommandHandler class. Declaration public StatCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] IFtpServer server, [NotNull] IBackgroundTransferWorker backgroundTransferWorker) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IFtpServer server The FTP server. IBackgroundTransferWorker backgroundTransferWorker The background transfer worker service. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.HelpCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.HelpCommandHandler.html",
    "title": "Class HelpCommandHandler | FTP Server documentation",
    "keywords": "Class HelpCommandHandler The HELP command handler. Inheritance Object FtpCommandHandler HelpCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class HelpCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source HelpCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the HelpCommandHandler class. Declaration public HelpCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsLoginRequired Gets a value indicating whether a login is required to execute this command. Declaration public override bool IsLoginRequired { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsLoginRequired Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.IPasvListener.html": {
    "href": "api/FubarDev.FtpServer.IPasvListener.html",
    "title": "Interface IPasvListener | FTP Server documentation",
    "keywords": "Interface IPasvListener Wraps a TCPListener so we can easily use it in our commands that require a passive data connection. Inherited Members IDisposable.Dispose() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IPasvListener : IDisposable Properties | Improve this Doc View Source PasvEndPoint Gets the Endpoint under which the listener is reachable by clients. Declaration IPEndPoint PasvEndPoint { get; } Property Value Type Description IPEndPoint Methods | Improve this Doc View Source AcceptPasvClientAsync() Accept a client from a PASV command. Declaration Task<TcpClient> AcceptPasvClientAsync() Returns Type Description Task < TcpClient > A TcpClient with which to communicate with the client. Exceptions Type Condition SocketException Network error, see SocketError . ObjectDisposedException Listener was disposed of."
  },
  "api/FubarDev.FtpServer.CommandHandlers.StorCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.StorCommandHandler.html",
    "title": "Class StorCommandHandler | FTP Server documentation",
    "keywords": "Class StorCommandHandler This class implements the STOR command (4.1.3.). Inheritance Object FtpCommandHandler StorCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class StorCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source StorCommandHandler(IFtpConnectionAccessor, IBackgroundTransferWorker) Initializes a new instance of the StorCommandHandler class. Declaration public StorCommandHandler([NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull] IBackgroundTransferWorker backgroundTransferWorker) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IBackgroundTransferWorker backgroundTransferWorker The background transfer worker service. Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public override bool IsAbortable { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsAbortable Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.XmkdCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.XmkdCommandHandler.html",
    "title": "Class XmkdCommandHandler | FTP Server documentation",
    "keywords": "Class XmkdCommandHandler Implements the XMKD command. Inheritance Object FtpCommandHandler XmkdCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class XmkdCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source XmkdCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the XmkdCommandHandler class. Declaration public XmkdCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.CommandHandlers.RnfrCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.RnfrCommandHandler.html",
    "title": "Class RnfrCommandHandler | FTP Server documentation",
    "keywords": "Class RnfrCommandHandler Implements the RNFR command. Inheritance Object FtpCommandHandler RnfrCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class RnfrCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source RnfrCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the RnfrCommandHandler class. Declaration public RnfrCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Properties | Improve this Doc View Source IsAbortable Gets a value indicating whether this command is abortable. Declaration public override bool IsAbortable { get; } Property Value Type Description Boolean Overrides FtpCommandHandler.IsAbortable Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.IAccountInformation.html": {
    "href": "api/FubarDev.FtpServer.IAccountInformation.html",
    "title": "Interface IAccountInformation | FTP Server documentation",
    "keywords": "Interface IAccountInformation Information about the account associated to a connection. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IAccountInformation Properties | Improve this Doc View Source AuthenticatedBy Gets the membership provider that was used to authenticate the user. Declaration [NotNull] IMembershipProvider AuthenticatedBy { get; } Property Value Type Description IMembershipProvider | Improve this Doc View Source User Gets the current user name. Declaration [NotNull] IFtpUser User { get; } Property Value Type Description IFtpUser"
  },
  "api/FubarDev.FtpServer.FtpServerStatistics.html": {
    "href": "api/FubarDev.FtpServer.FtpServerStatistics.html",
    "title": "Class FtpServerStatistics | FTP Server documentation",
    "keywords": "Class FtpServerStatistics Statistics about the FTP server. Inheritance Object FtpServerStatistics Implements IFtpServerStatistics Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class FtpServerStatistics : IFtpServerStatistics Properties | Improve this Doc View Source ActiveConnections Gets the currently active number of connections. Declaration public long ActiveConnections { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalConnections Gets the total number of connections. Declaration public long TotalConnections { get; } Property Value Type Description Int64 Implements IFtpServerStatistics"
  },
  "api/FubarDev.FtpServer.FtpServerOptions.html": {
    "href": "api/FubarDev.FtpServer.FtpServerOptions.html",
    "title": "Class FtpServerOptions | FTP Server documentation",
    "keywords": "Class FtpServerOptions The FTP server options. Inheritance Object FtpServerOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public class FtpServerOptions Properties | Improve this Doc View Source MaxActiveConnections Gets or sets the max allows active connections. This will cause connections to be refused if count is exceeded. 0 (default) means no control over connection count. Declaration public int MaxActiveConnections { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PasvAddress Gets or sets the address published to clients for PASV connections. This may be necessary if you are behind a forwarding firewall, for example. Declaration public string PasvAddress { get; set; } Property Value Type Description String | Improve this Doc View Source PasvMaxPort Gets or sets maximum port number to use for passive ftp. If set, needs to be larger than PasvMinPort. Declaration public int PasvMaxPort { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PasvMinPort Gets or sets minimum port number to use for passive ftp. Only active if PasvMaxPort is set, too). If set, needs to be larger than 1023. Declaration public int PasvMinPort { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Port Gets or sets the server port. Declaration public int Port { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ServerAddress Gets or sets the address the server listens on. Leave empty to listen on all interfaces. Declaration public string ServerAddress { get; set; } Property Value Type Description String"
  },
  "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystem.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.InMemory.InMemoryFileSystem.html",
    "title": "Class InMemoryFileSystem | FTP Server documentation",
    "keywords": "Class InMemoryFileSystem The implementation of the in-memory file system. Inheritance Object InMemoryFileSystem Implements IUnixFileSystem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem.InMemory Assembly : FubarDev.FtpServer.FileSystem.InMemory.dll Syntax public class InMemoryFileSystem : IUnixFileSystem Constructors | Improve this Doc View Source InMemoryFileSystem(StringComparer) Initializes a new instance of the InMemoryFileSystem class. Declaration public InMemoryFileSystem(StringComparer fileSystemEntryComparer) Parameters Type Name Description StringComparer fileSystemEntryComparer The file system entry name comparer. Properties | Improve this Doc View Source FileSystemEntryComparer Gets a string comparer for file system entry names. Declaration public StringComparer FileSystemEntryComparer { get; } Property Value Type Description StringComparer Remarks Required to support case insensitive file systems. | Improve this Doc View Source Root Gets the root directory entry. Declaration public IUnixDirectoryEntry Root { get; } Property Value Type Description IUnixDirectoryEntry | Improve this Doc View Source SupportsAppend Gets a value indicating whether this file system supports appending to a file. Declaration public bool SupportsAppend { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsNonEmptyDirectoryDelete Gets a value indicating whether this file system supports deletion of non-empty directories. Declaration public bool SupportsNonEmptyDirectoryDelete { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AppendAsync(IUnixFileEntry, Nullable<Int64>, Stream, CancellationToken) Appends data to a file. Declaration public Task<IBackgroundTransfer> AppendAsync(IUnixFileEntry fileEntry, long? startPosition, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to append data to. Nullable < Int64 > startPosition The start position - when it is null, the data is appended. Stream data The data stream to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateAsync(IUnixDirectoryEntry, String, Stream, CancellationToken) Creates a file with the given fileName and data . Declaration public Task<IBackgroundTransfer> CreateAsync(IUnixDirectoryEntry targetDirectory, string fileName, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the file in. String fileName The name of the new file. Stream data The Stream used to read the data for the new file. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source CreateDirectoryAsync(IUnixDirectoryEntry, String, CancellationToken) Creates a sub directory with the name directoryName in targetDirectory . Declaration public Task<IUnixDirectoryEntry> CreateDirectoryAsync(IUnixDirectoryEntry targetDirectory, string directoryName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry targetDirectory The directory to create the sub directory in. String directoryName The name of the new sub directory. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixDirectoryEntry > The new IUnixDirectoryEntry . | Improve this Doc View Source GetEntriesAsync(IUnixDirectoryEntry, CancellationToken) Gets a list of IUnixFileSystemEntry objects for a given directoryEntry . Declaration public Task<IReadOnlyList<IUnixFileSystemEntry>> GetEntriesAsync(IUnixDirectoryEntry directoryEntry, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entries for. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IReadOnlyList < IUnixFileSystemEntry >> The list of IUnixFileSystemEntry objects for a given directoryEntry . | Improve this Doc View Source GetEntryByNameAsync(IUnixDirectoryEntry, String, CancellationToken) Gets a file system entry by name. Declaration public Task<IUnixFileSystemEntry> GetEntryByNameAsync(IUnixDirectoryEntry directoryEntry, string name, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry directoryEntry The IUnixDirectoryEntry to get the file system entry for. String name The name of the file system entry to search. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the found IUnixFileSystemEntry . | Improve this Doc View Source MoveAsync(IUnixDirectoryEntry, IUnixFileSystemEntry, IUnixDirectoryEntry, String, CancellationToken) Moves a file system entry from parent to target . Declaration public Task<IUnixFileSystemEntry> MoveAsync(IUnixDirectoryEntry parent, IUnixFileSystemEntry source, IUnixDirectoryEntry target, string fileName, CancellationToken cancellationToken) Parameters Type Name Description IUnixDirectoryEntry parent The IUnixDirectoryEntry of source . IUnixFileSystemEntry source The IUnixFileSystemEntry to move. IUnixDirectoryEntry target The destination IUnixDirectoryEntry where source gets moved to. String fileName The new name of source . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > Returns the new IUnixFileSystemEntry . | Improve this Doc View Source OpenReadAsync(IUnixFileEntry, Int64, CancellationToken) Opens a file for reading. Declaration public Task<Stream> OpenReadAsync(IUnixFileEntry fileEntry, long startPosition, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to read from. Int64 startPosition The start position to read from. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < Stream > The Stream to be used for reading. | Improve this Doc View Source ReplaceAsync(IUnixFileEntry, Stream, CancellationToken) Replaces the contents of a file. Declaration public Task<IBackgroundTransfer> ReplaceAsync(IUnixFileEntry fileEntry, Stream data, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileEntry fileEntry The IUnixFileEntry to replace the data for. Stream data The data to be written to the given fileEntry . CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IBackgroundTransfer > an optional IBackgroundTransfer when the transfer needs to happen in the background. | Improve this Doc View Source SetMacTimeAsync(IUnixFileSystemEntry, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, CancellationToken) Sets the modify/access/create timestamp of a file system item. Declaration public Task<IUnixFileSystemEntry> SetMacTimeAsync(IUnixFileSystemEntry entry, DateTimeOffset? modify, DateTimeOffset? access, DateTimeOffset? create, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to change the timestamp for. Nullable < DateTimeOffset > modify The modification timestamp. Nullable < DateTimeOffset > access The access timestamp. Nullable < DateTimeOffset > create The creation timestamp. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IUnixFileSystemEntry > The modified IUnixFileSystemEntry . | Improve this Doc View Source UnlinkAsync(IUnixFileSystemEntry, CancellationToken) Deletes a IUnixFileSystemEntry . Declaration public Task UnlinkAsync(IUnixFileSystemEntry entry, CancellationToken cancellationToken) Parameters Type Name Description IUnixFileSystemEntry entry The IUnixFileSystemEntry to delete. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task where the underlying action is performed on. Remarks An implementation might decide to move the entry into the trash instead of deleting it. Implements IUnixFileSystem"
  },
  "api/FubarDev.FtpServer.AccountManagement.MemberValidationStatus.html": {
    "href": "api/FubarDev.FtpServer.AccountManagement.MemberValidationStatus.html",
    "title": "Enum MemberValidationStatus | FTP Server documentation",
    "keywords": "Enum MemberValidationStatus Validation result for a IMembershipProvider . Namespace : FubarDev.FtpServer.AccountManagement Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public enum MemberValidationStatus Fields Name Description Anonymous Anonymous user. AuthenticatedUser User authenticated successfully. InvalidAnonymousEmail Email address validation for anonymous login failed. InvalidLogin User name or password invalid."
  },
  "api/FubarDev.FtpServer.FileSystem.MemoryTemporaryData.html": {
    "href": "api/FubarDev.FtpServer.FileSystem.MemoryTemporaryData.html",
    "title": "Class MemoryTemporaryData | FTP Server documentation",
    "keywords": "Class MemoryTemporaryData Stores the temporary data in a memory stream. Inheritance Object MemoryTemporaryData Implements ITemporaryData IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.FileSystem Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class MemoryTemporaryData : ITemporaryData, IDisposable Remarks This is not recommended in a production environment. Properties | Improve this Doc View Source Size Gets the size of the temporary data. Declaration public long Size { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Dispose the object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true when called from the Dispose() function. | Improve this Doc View Source FillAsync(Stream, CancellationToken) Copies the stream data into the temporary data store. Declaration public Task FillAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream The data to copy. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task. | Improve this Doc View Source OpenAsync() Opens the temporary data and returns a stream. Declaration public Task<Stream> OpenAsync() Returns Type Description Task < Stream > The stream containig the temporary data. Implements ITemporaryData System.IDisposable"
  },
  "api/FubarDev.FtpServer.IBackgroundCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.IBackgroundCommandHandler.html",
    "title": "Interface IBackgroundCommandHandler | FTP Server documentation",
    "keywords": "Interface IBackgroundCommandHandler Interface for asynchronous processing of an FTP command. Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public interface IBackgroundCommandHandler Remarks This allows the implementation of the ABOR command. Methods | Improve this Doc View Source Cancel() Cancels the processing of the current command. Declaration bool Cancel() Returns Type Description Boolean true when there was a command execution that could be cancelled. | Improve this Doc View Source Execute(IFtpCommandBase, FtpCommand) Executes the FTP command with the given FTP command handler . Declaration [CanBeNull] Task<FtpResponse> Execute([NotNull] IFtpCommandBase handler, [NotNull] FtpCommand command) Parameters Type Name Description IFtpCommandBase handler The command handler that processes the given command . FtpCommand command The command to process by the handler . Returns Type Description Task < FtpResponse > null when the command could not be processed."
  },
  "api/FubarDev.FtpServer.FtpFileTypeInterpreterMode.html": {
    "href": "api/FubarDev.FtpServer.FtpFileTypeInterpreterMode.html",
    "title": "Enum FtpFileTypeInterpreterMode | FTP Server documentation",
    "keywords": "Enum FtpFileTypeInterpreterMode Format control (RFC 959 chapter 3.1.1.5). Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public enum FtpFileTypeInterpreterMode Fields Name Description AsaCarriageControl Carriage Control (ASA, 3.1.1.5.3). NonPrint Default format (3.1.1.5.1). Telnet Telnet format controls (3.1.1.5.2)."
  },
  "api/FubarDev.FtpServer.ListFormatters.FactsListFormatter.html": {
    "href": "api/FubarDev.FtpServer.ListFormatters.FactsListFormatter.html",
    "title": "Class FactsListFormatter | FTP Server documentation",
    "keywords": "Class FactsListFormatter A formatter for the MLST command. Inheritance Object FactsListFormatter Implements IListFormatter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.ListFormatters Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public class FactsListFormatter : IListFormatter Constructors | Improve this Doc View Source FactsListFormatter(IFtpUser, DirectoryListingEnumerator, ISet<String>, Boolean) Initializes a new instance of the FactsListFormatter class. Declaration public FactsListFormatter(IFtpUser user, DirectoryListingEnumerator enumerator, ISet<string> activeFacts, bool absoluteName) Parameters Type Name Description IFtpUser user The user to create this formatter for. DirectoryListingEnumerator enumerator The enumerator for the directory listing to format. ISet < String > activeFacts The active facts to return for the entries. Boolean absoluteName Returns an absolute entry name. Methods | Improve this Doc View Source Format(IUnixFileSystemEntry, String) Gets the output line to write for the given IUnixFileSystemEntry . Declaration public string Format(IUnixFileSystemEntry entry, string name) Parameters Type Name Description IUnixFileSystemEntry entry The entry to create the output line for. String name Returns Type Description String The text to write to the client. Implements IListFormatter"
  },
  "api/FubarDev.FtpServer.FtpServerBuilderExtensions.html": {
    "href": "api/FubarDev.FtpServer.FtpServerBuilderExtensions.html",
    "title": "Class FtpServerBuilderExtensions | FTP Server documentation",
    "keywords": "Class FtpServerBuilderExtensions Extension methods for IFtpServerBuilder . Inheritance Object FtpServerBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.Abstractions.dll Syntax public static class FtpServerBuilderExtensions Methods | Improve this Doc View Source EnableAnonymousAuthentication(IFtpServerBuilder) Enables anonymous authentication. Declaration public static IFtpServerBuilder EnableAnonymousAuthentication(this IFtpServerBuilder builder) Parameters Type Name Description IFtpServerBuilder builder The server builder used to configure the FTP server. Returns Type Description IFtpServerBuilder the server builder used to configure the FTP server."
  },
  "api/FubarDev.FtpServer.FtpServer.html": {
    "href": "api/FubarDev.FtpServer.FtpServer.html",
    "title": "Class FtpServer | FTP Server documentation",
    "keywords": "Class FtpServer The portable FTP server. Inheritance Object FtpServer Implements IFtpServer IFtpService IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public sealed class FtpServer : IFtpServer, IFtpService, IDisposable Constructors | Improve this Doc View Source FtpServer(IOptions<FtpServerOptions>, IServiceProvider, ILogger<FtpServer>) Initializes a new instance of the FtpServer class. Declaration public FtpServer([NotNull] IOptions<FtpServerOptions> serverOptions, [NotNull] IServiceProvider serviceProvider, [CanBeNull] ILogger<FtpServer> logger = null) Parameters Type Name Description IOptions < FtpServerOptions > serverOptions The server options. IServiceProvider serviceProvider The service provider used to query services. ILogger < FtpServer > logger The FTP server logger. Properties | Improve this Doc View Source MaxActiveConnections Gets the max allows active connections. This will cause connections to be refused if count is exceeded. 0 (default) means no control over connection count. Declaration public int MaxActiveConnections { get; } Property Value Type Description Int32 | Improve this Doc View Source Port Gets the port on which the FTP server is listening for incoming connections. Declaration public int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source Ready Gets a value indicating whether server ready to receive incoming connectoions. Declaration public bool Ready { get; } Property Value Type Description Boolean | Improve this Doc View Source ServerAddress Gets the public IP address (required for PASV and EPSV ). Declaration public string ServerAddress { get; } Property Value Type Description String | Improve this Doc View Source Statistics Gets the FTP server statistics. Declaration public IFtpServerStatistics Statistics { get; } Property Value Type Description IFtpServerStatistics Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Events | Improve this Doc View Source ConfigureConnection This event is raised when the connection is ready to be configured. Declaration public event EventHandler<ConnectionEventArgs> ConfigureConnection Event Type Type Description EventHandler < ConnectionEventArgs > Explicit Interface Implementations | Improve this Doc View Source IFtpServer.Start() Starts the FTP server in the background. Declaration void IFtpServer.Start() | Improve this Doc View Source IFtpServer.Stop() Stops the FTP server. Declaration void IFtpServer.Stop() Remarks The FTP server cannot be started again after it was stopped. | Improve this Doc View Source IFtpService.StartAsync(CancellationToken) Triggered when the application host is ready to start the service. Declaration Task IFtpService.StartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task The task. | Improve this Doc View Source IFtpService.StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. Declaration Task IFtpService.StopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task The task. Implements IFtpServer IFtpService System.IDisposable"
  },
  "api/FubarDev.FtpServer.CommandHandlers.StruCommandHandler.html": {
    "href": "api/FubarDev.FtpServer.CommandHandlers.StruCommandHandler.html",
    "title": "Class StruCommandHandler | FTP Server documentation",
    "keywords": "Class StruCommandHandler Implements the STRU command. Inheritance Object FtpCommandHandler StruCommandHandler Implements IFtpCommandHandler IFtpCommandBase Inherited Members FtpCommandHandler.Names FtpCommandHandler.IsLoginRequired FtpCommandHandler.IsAbortable FtpCommandHandler.Connection FtpCommandHandler.Data FtpCommandHandler.GetSupportedFeatures() FtpCommandHandler.GetExtensions() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer.CommandHandlers Assembly : FubarDev.FtpServer.Commands.dll Syntax public class StruCommandHandler : FtpCommandHandler, IFtpCommandHandler, IFtpCommandBase Constructors | Improve this Doc View Source StruCommandHandler(IFtpConnectionAccessor) Initializes a new instance of the StruCommandHandler class. Declaration public StruCommandHandler(IFtpConnectionAccessor connectionAccessor) Parameters Type Name Description IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. Methods | Improve this Doc View Source Process(FtpCommand, CancellationToken) Processes the command. Declaration public override Task<FtpResponse> Process(FtpCommand command, CancellationToken cancellationToken) Parameters Type Name Description FtpCommand command The command to process. CancellationToken cancellationToken The cancellation token to signal command abortion. Returns Type Description Task < FtpResponse > The FTP response. Overrides FtpCommandHandler.Process(FtpCommand, CancellationToken) Implements IFtpCommandHandler IFtpCommandBase"
  },
  "api/FubarDev.FtpServer.FtpConnection.html": {
    "href": "api/FubarDev.FtpServer.FtpConnection.html",
    "title": "Class FtpConnection | FTP Server documentation",
    "keywords": "Class FtpConnection This class represents a FTP connection. Inheritance Object FtpConnection Implements IFtpConnection IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : FubarDev.FtpServer Assembly : FubarDev.FtpServer.dll Syntax public sealed class FtpConnection : IFtpConnection, IDisposable Constructors | Improve this Doc View Source FtpConnection(TcpClient, IOptions<FtpConnectionOptions>, IFtpConnectionAccessor, IEnumerable<IFtpCommandHandler>, IEnumerable<IFtpCommandHandlerExtension>, ILogger<IFtpConnection>) Initializes a new instance of the FtpConnection class. Declaration public FtpConnection([NotNull] TcpClient socket, [NotNull] IOptions<FtpConnectionOptions> options, [NotNull] IFtpConnectionAccessor connectionAccessor, [NotNull, ItemNotNull] IEnumerable<IFtpCommandHandler> commandHandlers, [NotNull, ItemNotNull] IEnumerable<IFtpCommandHandlerExtension> commandHandlerExtensions, [CanBeNull] ILogger<IFtpConnection> logger = null) Parameters Type Name Description TcpClient socket The socket to use to communicate with the client. IOptions < FtpConnectionOptions > options The options for the FTP connection. IFtpConnectionAccessor connectionAccessor The accessor to get the connection that is active during the Process(FtpCommand, CancellationToken) method execution. IEnumerable < IFtpCommandHandler > commandHandlers The registered command handlers. IEnumerable < IFtpCommandHandlerExtension > commandHandlerExtensions The registered command handler extensions. ILogger < IFtpConnection > logger The logger for the FTP connection. Properties | Improve this Doc View Source CommandHandlers Gets the dictionary of all known command handlers. Declaration public IReadOnlyDictionary<string, IFtpCommandHandler> CommandHandlers { get; } Property Value Type Description IReadOnlyDictionary < String , IFtpCommandHandler > | Improve this Doc View Source Data Gets the FTP connection data. Declaration public FtpConnectionData Data { get; } Property Value Type Description FtpConnectionData | Improve this Doc View Source Encoding Gets or sets the encoding for the LIST/NLST commands. Declaration public Encoding Encoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source IsSecure Gets a value indicating whether this is a secure connection. Declaration public bool IsSecure { get; } Property Value Type Description Boolean | Improve this Doc View Source LocalEndPoint Gets the local end point. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint | Improve this Doc View Source Log Gets the FTP connection logger. Declaration public ILogger Log { get; } Property Value Type Description ILogger | Improve this Doc View Source OriginalStream Gets the control connection stream. Declaration public Stream OriginalStream { get; } Property Value Type Description Stream | Improve this Doc View Source PromiscuousPasv Gets a value indicating whether to accept PASV connections from any source. If false (default), connections to a PASV port will only be accepted from the same IP that issued the respective PASV command. Declaration public bool PromiscuousPasv { get; } Property Value Type Description Boolean | Improve this Doc View Source RemoteAddress Gets the remote address of the client. Declaration public Address RemoteAddress { get; } Property Value Type Description Address | Improve this Doc View Source SocketStream Gets or sets the control connection stream. Declaration public Stream SocketStream { get; set; } Property Value Type Description Stream Methods | Improve this Doc View Source Close() Closes the connection. Declaration public void Close() | Improve this Doc View Source CreateEncryptedStream(Stream) Create an encrypted stream. Declaration public Task<Stream> CreateEncryptedStream(Stream unencryptedStream) Parameters Type Name Description Stream unencryptedStream The stream to encrypt. Returns Type Description Task < Stream > The encrypted stream. | Improve this Doc View Source CreateResponseSocket() Creates a response socket for e.g. LIST/NLST. Declaration [NotNull] [ItemNotNull] public Task<TcpClient> CreateResponseSocket() Returns Type Description Task < TcpClient > The data connection. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Start() Starts processing of messages for this connection. Declaration public void Start() | Improve this Doc View Source WriteAsync(FtpResponse, CancellationToken) Writes a FTP response to a client. Declaration public Task WriteAsync(FtpResponse response, CancellationToken cancellationToken) Parameters Type Name Description FtpResponse response The response to write to the client. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task. | Improve this Doc View Source WriteAsync(String, CancellationToken) Writes response to a client. Declaration public Task WriteAsync(string response, CancellationToken cancellationToken) Parameters Type Name Description String response The response to write to the client. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task. Events | Improve this Doc View Source Closed Gets or sets the event handler that is triggered when the connection is closed. Declaration public event EventHandler Closed Event Type Type Description EventHandler Implements IFtpConnection System.IDisposable"
  }
}